{
    "RandomCompat_intval": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "RandomCompat_intval",
        "summary": "Cast to an integer if we can, safely.",
        "description": "<p>If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX) (non-inclusive), it will sanely cast it to an int. If you it's equal to ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats lose precision, so the &lt;= and =&gt; operators might accidentally let a float through.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "number": {
                "label": "number",
                "description": "The number we want to convert to an int",
                "type": "int",
                "types": [
                    "int",
                    "float"
                ],
                "default": null,
                "required": true
            },
            "fail_open": {
                "label": "fail_open",
                "description": "Set to true to not throw an exception",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "float",
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "RandomCompat_strlen": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "RandomCompat_strlen",
        "summary": "strlen() implementation that isn't brittle to mbstring.func_overload",
        "description": "<p>This version just used the default strlen()<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "binary_string": {
                "label": "binary_string",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "RandomCompat_substr": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "RandomCompat_substr",
        "summary": "substr() implementation that isn't brittle to mbstring.func_overload",
        "description": "<p>This version just uses the default substr()<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "binary_string": {
                "label": "binary_string",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "start": {
                "label": "start",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "length": {
                "label": "length",
                "description": "(optional)",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "WP_Filesystem": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "WP_Filesystem",
        "summary": "Initialises and connects the WordPress Filesystem Abstraction classes.",
        "description": "<p>This function will include the chosen transport and attempt connecting.<\/p> <p>Plugins may add extra transports, And force WordPress to use them by returning the filename via the {@see 'filesystem_method_file'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Connection args, These are passed directly to the WP_Filesystem_*() classes.",
                "type": "array",
                "types": [
                    "array",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Context for get_filesystem_method().",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "allow_relaxed_file_ownership": {
                "label": "allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True on success, false on failure, null if the filesystem method class file does not exist.",
        "rank": 0
    },
    "__": {
        "since": "2.1.0",
        "group": "i18n",
        "type": "efct",
        "name": "__",
        "summary": "Retrieve the translation of $text.",
        "description": "<p>If there is no translation, or the text domain isn't loaded, the original text is returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text.",
        "rank": 0
    },
    "__autoload": {
        "since": "4.6.0",
        "group": "PHP",
        "type": "efct",
        "name": "__autoload",
        "summary": "Autoloader compatibility callback.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "classname": {
                "label": "classname",
                "description": "Class to attempt autoloading.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "__return_empty_array": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_empty_array",
        "summary": "Returns an empty array.",
        "description": "<p>Useful for returning an empty array to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Empty array.",
        "rank": 0
    },
    "__return_empty_string": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_empty_string",
        "summary": "Returns an empty string.",
        "description": "<p>Useful for returning an empty string to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Empty string.",
        "rank": 0
    },
    "__return_false": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_false",
        "summary": "Returns false.",
        "description": "<p>Useful for returning false to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "false",
                "label": "false"
            }
        },
        "return": [
            "false"
        ],
        "return_description": "False.",
        "rank": 0
    },
    "__return_null": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_null",
        "summary": "Returns null.",
        "description": "<p>Useful for returning null to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "null",
                "label": "null"
            }
        },
        "return": [
            "null"
        ],
        "return_description": "Null value.",
        "rank": 0
    },
    "__return_true": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_true",
        "summary": "Returns true.",
        "description": "<p>Useful for returning true to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True.",
        "rank": 0
    },
    "__return_zero": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "__return_zero",
        "summary": "Returns 0.",
        "description": "<p>Useful for returning 0 to filters easily.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "0.",
        "rank": 0
    },
    "_admin_notice_post_locked": {
        "since": "2.8.5",
        "group": "Administration",
        "type": "fct",
        "name": "_admin_notice_post_locked",
        "summary": "Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "none",
                "label": "none"
            }
        },
        "return": [
            "none"
        ],
        "return_description": "",
        "rank": 0
    },
    "_draft_or_post_title": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "_draft_or_post_title",
        "summary": "Get the post title.",
        "description": "<p>The post title is fetched and if it is blank then a default string is returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The post title if set.",
        "rank": 0
    },
    "_e": {
        "since": "1.2.0",
        "group": "i18n",
        "type": "efct",
        "name": "_e",
        "summary": "Display translated text.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_ex": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "efct",
        "name": "_ex",
        "summary": "Display translated string with gettext context.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated context string without pipe.",
        "rank": 0
    },
    "_fetch_remote_file": {
        "since": "1.5.0",
        "group": "External",
        "type": "efct",
        "name": "_fetch_remote_file",
        "summary": "Retrieve URL headers and content using WP HTTP Request API.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL to retrieve",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "headers": {
                "label": "headers",
                "description": "Headers to send to the URL.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "\"\"",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "Snoopy",
                "label": "Snoopy"
            }
        },
        "return": [
            "Snoopy"
        ],
        "return_description": "style response",
        "rank": 0
    },
    "_get_dropins": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "_get_dropins",
        "summary": "Returns drop-ins that WordPress uses.",
        "description": "<p>Includes Multisite drop-ins only when is_multisite()<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key is file name. The value is an array, with the first value the  purpose of the drop-in and the second value the name of the constant that must be  true for the drop-in to be used, or true if no constant is required.",
        "rank": 0
    },
    "_get_meta_table": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "efct",
        "name": "_get_meta_table",
        "summary": "Retrieve the name of the metadata table for the specified object type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Type of object to get metadata table for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Metadata table name, or false if no metadata table exists",
        "rank": 0
    },
    "_get_widget_id_base": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "_get_widget_id_base",
        "summary": "Retrieves the widget ID base value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Widget ID base.",
        "rank": 0
    },
    "_json_decode_object_helper": {
        "since": false,
        "group": "PHP",
        "type": "efct",
        "name": "_json_decode_object_helper",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "_list_meta_row": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "_list_meta_row",
        "summary": "Outputs a single row of public meta data in the Custom Fields meta box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "entry": {
                "label": "entry",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "count": {
                "label": "count",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "_media_states": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "_media_states",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_n": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "_n",
        "summary": "Translates and retrieves the singular or plural form based on the supplied number.",
        "description": "<p>Used when you want to use the appropriate form of a string based on whether a number is singular or plural.<\/p> <p>Example:<\/p> printf( _n( '%s person', '%s people', $count, 'text-domain' ), number_format_i18n( $count ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "The text to be used if the number is singular.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "plural": {
                "label": "plural",
                "description": "The text to be used if the number is plural.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "number": {
                "label": "number",
                "description": "The number to compare against to use either the singular or plural form.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The translated singular or plural form.",
        "rank": 0
    },
    "_n_noop": {
        "since": "2.5.0",
        "group": "i18n",
        "type": "efct",
        "name": "_n_noop",
        "summary": "Registers plural strings in POT file, but does not translate them.",
        "description": "<p>Used when you want to keep structures with translatable plural strings and use them later when the number is known.<\/p> <p>Example:<\/p> $message = _n_noop( '%s post', '%s posts', 'text-domain' ); ... printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "singular": {
                "label": "singular",
                "description": "Singular form to be localized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "plural": {
                "label": "plural",
                "description": "Plural form to be localized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "{     Array of translation information for the strings.     @type string $0        Singular form to be localized. No longer used.     @type string $1        Plural form to be localized. No longer used.     @type string $singular Singular form to be localized.     @type string $plural   Plural form to be localized.     @type null   $context  Context information for the translators.     @type string $domain   Text domain. }",
        "rank": 0
    },
    "_nx": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "_nx",
        "summary": "Translates and retrieves the singular or plural form based on the supplied number, with gettext context.",
        "description": "<p>This is a hybrid of _n() and _x(). It supports context and plurals.<\/p> <p>Used when you want to use the appropriate form of a string with context based on whether a number is singular or plural.<\/p> <p>Example of a generic phrase which is disambiguated via the context parameter:<\/p> printf( _nx( '%s group', '%s groups', $people, 'group of people', 'text-domain' ), number_format_i18n( $people ) ); printf( _nx( '%s group', '%s groups', $animals, 'group of animals', 'text-domain' ), number_format_i18n( $animals ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "The text to be used if the number is singular.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "plural": {
                "label": "plural",
                "description": "The text to be used if the number is plural.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "number": {
                "label": "number",
                "description": "The number to compare against to use either the singular or plural form.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The translated singular or plural form.",
        "rank": 0
    },
    "_nx_noop": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "_nx_noop",
        "summary": "Registers plural strings with gettext context in POT file, but does not translate them.",
        "description": "<p>Used when you want to keep structures with translatable plural strings and use them later when the number is known.<\/p> <p>Example of a generic phrase which is disambiguated via the context parameter:<\/p> $messages = array( 'people' =&gt; _nx_noop( '%s group', '%s groups', 'people', 'text-domain' ), 'animals' =&gt; _nx_noop( '%s group', '%s groups', 'animals', 'text-domain' ), ); ... $message = $messages[ $type ]; printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "singular": {
                "label": "singular",
                "description": "Singular form to be localized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "plural": {
                "label": "plural",
                "description": "Plural form to be localized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "{     Array of translation information for the strings.     @type string $0        Singular form to be localized. No longer used.     @type string $1        Plural form to be localized. No longer used.     @type string $2        Context information for the translators. No longer used.     @type string $singular Singular form to be localized.     @type string $plural   Plural form to be localized.     @type string $context  Context information for the translators.     @type string $domain   Text domain. }",
        "rank": 0
    },
    "_post_states": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "_post_states",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_redirect_to_about_wordpress": {
        "since": "3.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "_redirect_to_about_wordpress",
        "summary": "Redirect to the About WordPress page after a successful upgrade.",
        "description": "<p>This function is only needed when the existing installation is older than 3.4.0.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_version": {
                "label": "new_version",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_register_widget_form_callback": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "_register_widget_form_callback",
        "summary": "Registers the form callback for a widget.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "Name attribute for the widget.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "form_callback": {
                "label": "form_callback",
                "description": "Form callback.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Widget control options. See wp_register_widget_control().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_register_widget_update_callback": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "_register_widget_update_callback",
        "summary": "Registers the update callback for a widget.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id_base": {
                "label": "id_base",
                "description": "The base ID of a widget created by extending WP_Widget.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "update_callback": {
                "label": "update_callback",
                "description": "Update callback method for the widget.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Widget control options. See wp_register_widget_control().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_response_to_rss": {
        "since": "1.5.0",
        "group": "External",
        "type": "efct",
        "name": "_response_to_rss",
        "summary": "Retrieve",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "resp": {
                "label": "resp",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "MagpieRSS",
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "_update_blog_date_on_post_delete": {
        "since": "3.4.0",
        "group": "Multisite",
        "type": "efct",
        "name": "_update_blog_date_on_post_delete",
        "summary": "Handler for updating the current site's last updated date when a published post is deleted.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_update_blog_date_on_post_publish": {
        "since": "3.3.0",
        "group": "Multisite",
        "type": "efct",
        "name": "_update_blog_date_on_post_publish",
        "summary": "Handler for updating the site's last updated date when a post is published or an already published post is changed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_status": {
                "label": "new_status",
                "description": "The new post status",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "old_status": {
                "label": "old_status",
                "description": "The old post status",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_update_generic_term_count": {
        "since": "3.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "_update_generic_term_count",
        "summary": "Will update term count based on number of objects.",
        "description": "<p>Default callback for the 'link_category' taxonomy.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "List of term taxonomy IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Current taxonomy object of terms.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_update_posts_count_on_delete": {
        "since": "4.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "_update_posts_count_on_delete",
        "summary": "Handler for updating the current site's posts count when a post is deleted.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_update_posts_count_on_transition_post_status": {
        "since": "4.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "_update_posts_count_on_transition_post_status",
        "summary": "Handler for updating the current site's posts count when a post status changes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_status": {
                "label": "new_status",
                "description": "The status the post is changing to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "old_status": {
                "label": "old_status",
                "description": "The status the post is changing from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post object",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_wp_ajax_menu_quick_search": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "_wp_ajax_menu_quick_search",
        "summary": "Prints the appropriate response to a menu quick search.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request": {
                "label": "request",
                "description": "The unsanitized request values.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_wp_customize_changeset_filter_insert_post_data": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "efct",
        "name": "_wp_customize_changeset_filter_insert_post_data",
        "summary": "Filters changeset post data upon insert to ensure post_name is intact.",
        "description": "<p>This is needed to prevent the post_name from being dropped when the post is transitioned into pending status by a contributor.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "An array of slashed post data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "supplied_post_data": {
                "label": "supplied_post_data",
                "description": "An array of sanitized, but otherwise unmodified post data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_wp_get_allowed_postdata": {
        "since": "5.0.1",
        "group": "Administration",
        "type": "efct",
        "name": "_wp_get_allowed_postdata",
        "summary": "Returns only allowed post data fields",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "Array of post data. Defaults to the contents of $_POST.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "bool"
        ],
        "return_description": "WP_Error on failure, true on success.",
        "rank": 0
    },
    "_wp_post_thumbnail_html": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "_wp_post_thumbnail_html",
        "summary": "Output HTML for the post thumbnail meta-box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "thumbnail_id": {
                "label": "thumbnail_id",
                "description": "ID of the attachment used for thumbnail",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post ID or object associated with the thumbnail, defaults to global $post.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "html",
        "rank": 0
    },
    "_wp_privacy_send_erasure_fulfillment_notification": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "_wp_privacy_send_erasure_fulfillment_notification",
        "summary": "Notify the user when their erasure request is fulfilled.",
        "description": "<p>Without this, the user would never know if their data was actually erased.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "The privacy request post ID associated with this request.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_wp_privacy_send_request_confirmation_notification": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "_wp_privacy_send_request_confirmation_notification",
        "summary": "Notify the site administrator via email when a request is confirmed.",
        "description": "<p>Without this, the admin would have to manually check the site to see if any action was needed on their part yet.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "The ID of the request.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "_wp_remove_unregistered_widgets": {
        "since": "4.9.0",
        "group": "Widgets",
        "type": "efct",
        "name": "_wp_remove_unregistered_widgets",
        "summary": "Compares a list of sidebars with their widgets against a whitelist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sidebars_widgets": {
                "label": "sidebars_widgets",
                "description": "List of sidebars and their widget instance IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "whitelist": {
                "label": "whitelist",
                "description": "List of widget IDs to compare against. Default: Registered widgets.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Sidebars with whitelisted widgets.",
        "rank": 0
    },
    "_wp_translate_postdata": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "_wp_translate_postdata",
        "summary": "Rename $_POST data from form names to DB post columns.",
        "description": "<p>Manipulates $_POST directly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "update": {
                "label": "update",
                "description": "Are we updating a pre-existing post?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "Array of post data. Defaults to the contents of $_POST.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "bool"
        ],
        "return_description": "WP_Error on failure, true on success.",
        "rank": 0
    },
    "_x": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "_x",
        "summary": "Retrieve translated string with gettext context.",
        "description": "<p>Quite a few times, there will be collisions with similar translatable text found in more than two places, but with different translated context.<\/p> <p>By including the context in the pot file, translators can translate the two strings differently.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated context string without pipe.",
        "rank": 0
    },
    "absint": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "absint",
        "summary": "Convert a value to non-negative integer.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "maybeint": {
                "label": "maybeint",
                "description": "Data you wish to have converted to a non-negative integer.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "A non-negative integer.",
        "rank": 0
    },
    "activate_plugin": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "activate_plugin",
        "summary": "Attempts activation of plugin in a \"sandbox\" and redirects on success.",
        "description": "<p>A plugin that is already activated will not attempt to be activated again.<\/p> <p>The way it works is by setting the redirection to the error before trying to include the plugin file. If the plugin fails, then the redirection will not be overwritten with the success message. Also, the options will not be updated and the activation hook will not be called on plugin error.<\/p> <p>It should be noted that in no way the below code will actually prevent errors within the file. The code should not be used elsewhere to replicate the &quot;sandbox&quot;, which uses redirection to work. {@source 13 1}<\/p> <p>If any errors are found or text is outputted, then it will be captured to ensure that the success redirection will update the error redirection.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "redirect": {
                "label": "redirect",
                "description": "URL to redirect to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "network_wide": {
                "label": "network_wide",
                "description": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "silent": {
                "label": "silent",
                "description": "Whether to prevent calling activation hooks.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "null"
        ],
        "return_description": "WP_Error on invalid file or null on success.",
        "rank": 0
    },
    "activate_plugins": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "activate_plugins",
        "summary": "Activate multiple plugins.",
        "description": "<p>When WP_Error is returned, it does not mean that one of the plugins had errors. It means that one or more of the plugins file path was invalid.<\/p> <p>The execution will be halted as soon as one of the plugins has an error.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugins": {
                "label": "plugins",
                "description": "Single plugin or list of plugins to activate.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "redirect": {
                "label": "redirect",
                "description": "Redirect to page after successful activation.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "network_wide": {
                "label": "network_wide",
                "description": "Whether to enable the plugin for all sites in the network.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "silent": {
                "label": "silent",
                "description": "Prevent calling activation hooks. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True when finished or WP_Error if there were errors during a plugin activation.",
        "rank": 0
    },
    "add_action": {
        "since": "1.2.0",
        "group": "Plugin",
        "type": "efct",
        "name": "add_action",
        "summary": "Hooks a function on to a specific action.",
        "description": "<p>Actions are the hooks that the WordPress core launches at specific points during execution, or when specific events occur. Plugins can specify that one or more of its PHP functions are executed at these points, using the Action API.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the action to which the $function_to_add is hooked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_add": {
                "label": "function_to_add",
                "description": "The name of the function you wish to be called.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "Used to specify the order in which the functions associated with a particular action are executed. Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            },
            "accepted_args": {
                "label": "accepted_args",
                "description": "The number of arguments the function accepts.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Will always return true.",
        "rank": 0
    },
    "add_blog_option": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "add_blog_option",
        "summary": "Add a new option for a given blog id.",
        "description": "<p>You do not need to serialize values. If the value needs to be serialized, then it will be serialized before it is inserted into the database. Remember, resources can not be serialized or added as an option.<\/p> <p>You can create options without values and then update the values later. Existing options will not be updated and checks are performed to ensure that you aren't adding a protected WordPress option. Care should be taken to not name options the same as the ones which are protected.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "A blog ID. Can be null to refer to the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to add. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value, can be anything. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if option was not added and true if option was added.",
        "rank": 0
    },
    "add_clean_index": {
        "since": "1.0.1",
        "group": "Administration",
        "type": "efct",
        "name": "add_clean_index",
        "summary": "Adds an index to a specified table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table": {
                "label": "table",
                "description": "Database table name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "index": {
                "label": "index",
                "description": "Database table index column.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True, when done with execution.",
        "rank": 0
    },
    "add_comment_meta": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "add_comment_meta",
        "summary": "Add meta data field to a comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether the same key should not be added.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "Meta ID on success, false on failure.",
        "rank": 0
    },
    "add_comments_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_comments_page",
        "summary": "Add submenu page to the Comments main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_cssclass": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "add_cssclass",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "add": {
                "label": "add",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "class": {
                "label": "class",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_dashboard_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_dashboard_page",
        "summary": "Add submenu page to the Dashboard main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_editor_style": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "efct",
        "name": "add_editor_style",
        "summary": "Add callback for custom TinyMCE editor stylesheets.",
        "description": "<p>The parameter $stylesheet is the name of the stylesheet, relative to the theme root. It also accepts an array of stylesheets. It is optional and defaults to 'editor-style.css'.<\/p> <p>This function automatically adds another stylesheet with -rtl prefix, e.g. editor-style-rtl.css. If that file doesn't exist, it is removed before adding the stylesheet(s) to TinyMCE. If an array of stylesheets is passed to add_editor_style(), RTL is only added for the first stylesheet.<\/p> <p>Since version 3.4 the TinyMCE body has .rtl CSS class. It is a better option to use that class and add any RTL styles to the main stylesheet.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "stylesheet": {
                "label": "stylesheet",
                "description": "Stylesheet name or array thereof, relative to theme root. Defaults to 'editor-style.css'",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'editor-style.css'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_existing_user_to_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "add_existing_user_to_blog",
        "summary": "Add a user to a blog based on details from maybe_add_existing_user_to_blog().",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "details": {
                "label": "details",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_feed": {
        "since": "2.1.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "add_feed",
        "summary": "Add a new feed type like \/atom1\/.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feedname": {
                "label": "feedname",
                "description": "Feed name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "Callback to run on feed display.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Feed action name.",
        "rank": 0
    },
    "add_filter": {
        "since": "0.71",
        "group": "Plugin",
        "type": "efct",
        "name": "add_filter",
        "summary": "Hook a function or method to a specific filter action.",
        "description": "<p>WordPress offers filter hooks to allow plugins to modify various types of internal data at runtime.<\/p> <p>A plugin can modify data by binding a callback to a filter hook. When the filter is later applied, each bound callback is run in order of priority, and given the opportunity to modify a value by returning a new value.<\/p> <p>The following example shows how a callback function is bound to a filter hook.<\/p> <p>Note that $example is passed to the callback, (maybe) modified, then returned:<\/p> function example_callback( $example ) { \/\/ Maybe modify $example in some way. return $example; } add_filter( 'example_filter', 'example_callback' ); <p>Bound callbacks can accept from none to the total number of arguments passed as parameters in the corresponding apply_filters() call.<\/p> <p>In other words, if an apply_filters() call passes four total arguments, callbacks bound to it can accept none (the same as 1) of the arguments or up to four. The important part is that the $accepted_args value must reflect the number of arguments the bound callback <em>actually<\/em> opted to accept. If no arguments were accepted by the callback that is considered to be the same as accepting 1 argument. For example:<\/p> \/\/ Filter call. $value = apply_filters( 'hook', $value, $arg2, $arg3 ); \/\/ Accepting zero\/one arguments. function example_callback() { ... return 'some value'; } add_filter( 'hook', 'example_callback' ); \/\/ Where $priority is default 10, $accepted_args is default 1. \/\/ Accepting two arguments (three possible). function example_callback( $value, $arg2 ) { ... return $maybe_modified_value; } add_filter( 'hook', 'example_callback', 10, 2 ); \/\/ Where $priority is 10, $accepted_args is 2. <p><em>Note:<\/em> The function will return true whether or not the callback is valid. It is up to you to take care. This is done for optimization purposes, so everything is as quick as possible.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the filter to hook the $function_to_add callback to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_add": {
                "label": "function_to_add",
                "description": "The callback to be run when the filter is applied.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "Used to specify the order in which the functions associated with a particular action are executed. Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            },
            "accepted_args": {
                "label": "accepted_args",
                "description": "The number of arguments the function accepts.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_image_size": {
        "since": "2.9.0",
        "group": "Media",
        "type": "efct",
        "name": "add_image_size",
        "summary": "Register a new image size.",
        "description": "<p>Cropping behavior for the image size is dependent on the value of $crop:<\/p> <li>If false (default), images will be scaled, not cropped.<\/li> <li>If an array in the form of array( x_crop_position, y_crop_position ): <ul> <li>x_crop_position accepts 'left' 'center', or 'right'.<\/li> <li>y_crop_position accepts 'top', 'center', or 'bottom'. Images will be cropped to the specified dimensions within the defined crop area.<\/li> <\/ul><\/li> <li>If true, images will be cropped to the specified dimensions using center positions.<\/li> ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Image size identifier.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "width": {
                "label": "width",
                "description": "Image width in pixels. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "height": {
                "label": "height",
                "description": "Image height in pixels. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "crop": {
                "label": "crop",
                "description": "Whether to crop images to specified width and height or resize. An array can specify positioning of the crop area.",
                "type": "bool",
                "types": [
                    "bool",
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_link": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "add_link",
        "summary": "Add a link to using values provided in $_POST.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Value 0 or WP_Error on failure. The link ID on success.",
        "rank": 0
    },
    "add_links_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_links_page",
        "summary": "Add submenu page to the Links main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_magic_quotes": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "add_magic_quotes",
        "summary": "Walks the array while sanitizing the contents.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "array": {
                "label": "array",
                "description": "Array to walk while sanitizing contents.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Sanitized $array.",
        "rank": 0
    },
    "add_management_page": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_management_page",
        "summary": "Add submenu page to the Tools main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_media_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_media_page",
        "summary": "Add submenu page to the Media main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_menu_classes": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "add_menu_classes",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu": {
                "label": "menu",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_menu_page": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_menu_page",
        "summary": "Add a top-level menu page.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by. Should be unique for this menu page and only include lowercase alphanumeric, dashes, and underscores characters to be compatible with sanitize_key().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            },
            "icon_url": {
                "label": "icon_url",
                "description": "The URL to the icon to be used for this menu. <br\/> * Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme. This should begin with 'data:image\/svg+xml;base64,'. <br\/> * Pass the name of a Dashicons helper class to use a font icon, e.g. 'dashicons-chart-pie'. <br\/> * Pass 'none' to leave div.wp-menu-image empty so an icon can be added via CSS.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "position": {
                "label": "position",
                "description": "The position in the menu order this one should appear.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The resulting page's hook_suffix.",
        "rank": 0
    },
    "add_meta": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_meta",
        "summary": "Add post meta data defined in $_POST superglobal for post with given ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_ID": {
                "label": "post_ID",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_meta_box": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_meta_box",
        "summary": "Adds a meta box to one or more screens.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Meta box ID (used in the 'id' attribute for the meta box).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Title of the meta box.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "Function that fills the box with the desired content. The function should echo its output.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "screen": {
                "label": "screen",
                "description": "The screen or screens on which to show the box (such as a post type, 'link', or 'comment'). Accepts a single screen ID, WP_Screen object, or array of screen IDs. Default is the current screen. If you have used add_menu_page() or add_submenu_page() to create a new screen (and hence screen_id), make sure your menu slug conforms to the limits of sanitize_key() otherwise the 'screen' menu may not correctly render on your page.",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "The context within the screen where the boxes should display. Available contexts vary from screen to screen. Post edit screen contexts include 'normal', 'side', and 'advanced'. Comments screen contexts include 'normal' and 'side'. Menus meta boxes (accordion sections) all use the 'side' context. Global",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'advanced'",
                "required": false
            },
            "priority": {
                "label": "priority",
                "description": "The priority within the context where the boxes should show ('high', 'low').",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            },
            "callback_args": {
                "label": "callback_args",
                "description": "Data that should be set as the $args property of the box array (which is the second parameter passed to your callback).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_metadata": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "efct",
        "name": "add_metadata",
        "summary": "Add metadata for the specified object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object metadata is for",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether the specified metadata key should be unique for the object. If true, and the object already has a value for the specified metadata key, no change will be made.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "The meta ID on success, false on failure.",
        "rank": 0
    },
    "add_network_option": {
        "since": "4.4.0",
        "group": "Option",
        "type": "efct",
        "name": "add_network_option",
        "summary": "Add a new network option.",
        "description": "<p>Existing options will not be updated.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Can be null to default to the current network ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to add. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value, can be anything. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if option was not added and true if option was added.",
        "rank": 0
    },
    "add_new_user_to_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "add_new_user_to_blog",
        "summary": "Adds a newly created user to the appropriate blog",
        "description": "<p>To add a user in general, use add_user_to_blog(). This function is specifically hooked into the {@see 'wpmu_activate_user'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "Ignored.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_option": {
        "since": "1.0.0",
        "group": "Option",
        "type": "efct",
        "name": "add_option",
        "summary": "Add a new option.",
        "description": "<p>You do not need to serialize values. If the value needs to be serialized, then it will be serialized before it is inserted into the database. Remember, resources can not be serialized or added as an option.<\/p> <p>You can create options without values and then update the values later. Existing options will not be updated and checks are performed to ensure that you aren't adding a protected WordPress option. Care should be taken to not name options the same as the ones which are protected.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Name of option to add. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Description. Not used anymore.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "autoload": {
                "label": "autoload",
                "description": "Whether to load the option when WordPress starts up. Default is enabled. Accepts 'no' to disable for legacy reasons.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "'yes'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if option was not added and true if option was added.",
        "rank": 0
    },
    "add_option_whitelist": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_option_whitelist",
        "summary": "Adds an array of options to the options whitelist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_options": {
                "label": "new_options",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_options_page": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_options_page",
        "summary": "Add submenu page to the Settings main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_pages_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_pages_page",
        "summary": "Add submenu page to the Pages main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_permastruct": {
        "since": "3.0.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "add_permastruct",
        "summary": "Add permalink structure.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Name for permalink structure.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "struct": {
                "label": "struct",
                "description": "Permalink structure.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments for building the rules from the permalink structure, see WP_Rewrite::add_permastruct() for full details.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_ping": {
        "since": "1.5.0",
        "group": "Post",
        "type": "efct",
        "name": "add_ping",
        "summary": "Add a URL to those already pinged.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post object or ID.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "uri": {
                "label": "uri",
                "description": "Ping URI or array of URIs.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "How many rows were updated.",
        "rank": 0
    },
    "add_plugins_page": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_plugins_page",
        "summary": "Add submenu page to the Plugins main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_post_meta": {
        "since": "1.5.0",
        "group": "Post",
        "type": "efct",
        "name": "add_post_meta",
        "summary": "Adds a meta field to the given post.",
        "description": "<p>Post meta data is called &quot;Custom Fields&quot; on the Administration Screen.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether the same key should not be added.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Meta ID on success, false on failure.",
        "rank": 0
    },
    "add_post_type_support": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "add_post_type_support",
        "summary": "Register support of certain features for a post type.",
        "description": "<p>All core features are directly associated with a functional area of the edit screen, such as the editor or a meta box. Features include: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'.<\/p> <p>Additionally, the 'revisions' feature dictates whether the post type will store revisions, and the 'comments' feature dictates whether the comments count will show on the edit screen.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type for which to add the feature.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feature": {
                "label": "feature",
                "description": "The feature being added, accepts an array of feature strings or a single string.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_posts_page": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_posts_page",
        "summary": "Add submenu page to the Posts main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_query_arg": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "add_query_arg",
        "summary": "Retrieves a modified URL query string.",
        "description": "<p>You can rebuild the URL and append query variables to the URL query by using this function. There are two ways to use this function; either a single key and value, or an associative array.<\/p> <p>Using a single key and value:<\/p> add_query_arg( 'key', 'value', 'http:\/\/example.com' ); <p>Using an associative array:<\/p> add_query_arg( array( 'key1' =&gt; 'value1', 'key2' =&gt; 'value2', ), 'http:\/\/example.com' ); <p>Omitting the URL from either use results in the current URL being used (the value of $_SERVER['REQUEST_URI']).<\/p> <p>Values are expected to be encoded appropriately with urlencode() or rawurlencode().<\/p> <p>Setting any query variable's value to boolean false removes the key (see remove_query_arg()).<\/p> <p>Important: The return value of add_query_arg() is not escaped by default. Output should be late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting (XSS) attacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "Either a query variable key, or an associative array of query variables.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Either a query variable value, or a URL to act upon.",
                "type": "string",
                "types": [
                    "string"
                ],
                "required": false
            },
            "url": {
                "label": "url",
                "description": "A URL to act upon.",
                "type": "string",
                "types": [
                    "string"
                ],
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "New URL query string (unescaped).",
        "rank": 0
    },
    "add_rewrite_endpoint": {
        "since": "2.1.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "add_rewrite_endpoint",
        "summary": "Add an endpoint, like \/trackback\/.",
        "description": "<p>Adding an endpoint creates extra rewrite rules for each of the matching places specified by the provided bitmask. For example:<\/p> add_rewrite_endpoint( 'json', EP_PERMALINK | EP_PAGES ); <p>will add a new rewrite rule ending with &quot;json(\/(.*))?\/?$&quot; for every permastruct that describes a permalink (post) or page. This is rewritten to &quot;json=$match&quot; where $match is the part of the URL matched by the endpoint regex (e.g. &quot;foo&quot; in &quot;[permalink]\/json\/foo\/&quot;).<\/p> <p>A new query var with the same name as the endpoint will also be created.<\/p> <p>When specifying $places ensure that you are using the EP_* constants (or a combination of them using the bitwise OR operator) as their values are not guaranteed to remain static (especially EP_ALL).<\/p> <p>Be sure to flush the rewrite rules - see flush_rewrite_rules() - when your plugin gets activated and deactivated.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Name of the endpoint.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "places": {
                "label": "places",
                "description": "Endpoint mask describing the places the endpoint should be added.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "query_var": {
                "label": "query_var",
                "description": "Name of the corresponding query variable. Pass false to skip registering a query_var for this endpoint. Defaults to the value of $name.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_rewrite_rule": {
        "since": "2.1.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "add_rewrite_rule",
        "summary": "Adds a rewrite rule that transforms a URL structure to a set of query vars.",
        "description": "<p>Any value in the $after parameter that isn't 'bottom' will result in the rule being placed at the top of the rewrite rules.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "regex": {
                "label": "regex",
                "description": "Regular expression to match request against.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "query": {
                "label": "query",
                "description": "The corresponding query vars for this rewrite rule.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "after": {
                "label": "after",
                "description": "Priority of the new rule. Accepts 'top' or 'bottom'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'bottom'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_rewrite_tag": {
        "since": "2.1.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "add_rewrite_tag",
        "summary": "Add a new rewrite tag (like %postname%).",
        "description": "<p>The $query parameter is optional. If it is omitted you must ensure that you call this on, or before, the {@see 'init'} hook. This is because $query defaults to &quot;$tag=&quot;, and for this to work a new query var has to be added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Name of the new rewrite tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "regex": {
                "label": "regex",
                "description": "Regular expression to substitute the tag for in rewrite rules.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "query": {
                "label": "query",
                "description": "String to append to the rewritten query. Must end in '='.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_role": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "add_role",
        "summary": "Add role, if it does not exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "role": {
                "label": "role",
                "description": "Role name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "display_name": {
                "label": "display_name",
                "description": "Display name for role.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capabilities": {
                "label": "capabilities",
                "description": "List of capabilities, e.g. array( 'edit_posts' =&gt; true, 'delete_posts' =&gt; false );",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Role",
            "null"
        ],
        "return_description": "WP_Role object if role is added, null if already exists.",
        "rank": 0
    },
    "add_screen_option": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_screen_option",
        "summary": "Register and configure an admin screen option",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "An option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Option-dependent arguments.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_settings_error": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_settings_error",
        "summary": "Register a settings error to be displayed to the user.",
        "description": "<p>Part of the Settings API. Use this to show messages to users about settings validation problems, missing settings or anything else.<\/p> <p>Settings errors should be added inside the $sanitize_callback function defined in register_setting() for a given setting to give feedback about the submission.<\/p> <p>By default messages will show immediately after the submission that generated the error. Additional calls to settings_errors() can be used to show errors even when the settings page is first accessed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "setting": {
                "label": "setting",
                "description": "Slug title of the setting to which this error applies.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "code": {
                "label": "code",
                "description": "Slug-name to identify the error. Used as part of 'id' attribute in HTML output.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "message": {
                "label": "message",
                "description": "The formatted message text to display to the user (will be shown inside styled &lt;div&gt; and &lt;p&gt; tags).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "type": {
                "label": "type",
                "description": "Message type, controls HTML class. Accepts 'error' or 'updated'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'error'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_settings_field": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_settings_field",
        "summary": "Add a new field to a section of a settings page.",
        "description": "<p>Part of the Settings API. Use this to define a settings field that will show as part of a settings section inside a settings page. The fields are shown using do_settings_fields() in do_settings-sections()<\/p> <p>The $callback argument should be the name of a function that echoes out the html input tags for this setting field. Use get_option() to retrieve existing values to show.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Slug-name to identify the field. Used in the 'id' attribute of tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Formatted title of the field. Shown as the label for the field during output.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "Function that fills the field with the desired form inputs. The function should echo its output.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "The slug-name of the settings page on which to show the section (general, reading, writing, ...).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "section": {
                "label": "section",
                "description": "The slug-name of the section of the settings page in which to show the box.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Extra arguments used when outputting the field. <ul><li><b>'label_for'<\/b><br\/><i>(string)<\/i> When supplied, the setting title will be wrapped in a &lt;label&gt; element, its for attribute populated with this value.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> CSS Class to be added to the &lt;tr&gt; element when the field is output.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_settings_section": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_settings_section",
        "summary": "Add a new section to a settings page.",
        "description": "<p>Part of the Settings API. Use this to define new settings sections for an admin page. Show settings sections in your admin page callback function with do_settings_sections(). Add settings fields to your section with add_settings_field().<\/p> <p>The $callback argument should be the name of a function that echoes out any content you want to show at the top of the settings section before the actual fields. It can output nothing if you want.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Slug-name to identify the section. Used in the 'id' attribute of tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Formatted title of the section. Shown as the heading for the section.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "Function that echos out any content at the top of the section (between heading and fields).",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page();",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_shortcode": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "add_shortcode",
        "summary": "Adds a new shortcode.",
        "description": "<p>Care should be taken through prefixing or other means to ensure that the shortcode tag being added is unique and will not conflict with other, already-added shortcode tags. In the event of a duplicated tag, the tag loaded last will take precedence.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Shortcode tag to be searched in post content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "The callback function to run when the shortcode is found. Every shortcode callback is passed three parameters by default, including an array of attributes ($atts), the shortcode content or null if not set ($content), and finally the shortcode tag itself ($shortcode_tag), in that order.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "add_site_meta": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "add_site_meta",
        "summary": "Adds metadata to a site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether the same key should not be added.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Meta ID on success, false on failure.",
        "rank": 0
    },
    "add_site_option": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "add_site_option",
        "summary": "Add a new option for the current network.",
        "description": "<p>Existing options will not be updated. Note that prior to 3.3 this wasn't the case.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Name of option to add. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value, can be anything. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if the option was not added. True if the option was added.",
        "rank": 0
    },
    "add_submenu_page": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_submenu_page",
        "summary": "Add a submenu page.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "parent_slug": {
                "label": "parent_slug",
                "description": "The slug name for the parent menu (or the file name of a standard WordPress admin page).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by. Should be unique for this menu and only include lowercase alphanumeric, dashes, and underscores characters to be compatible with sanitize_key().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_term_meta": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "add_term_meta",
        "summary": "Adds metadata to a term.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether to bail if an entry with the same key is found for the term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error",
            "bool"
        ],
        "return_description": "Meta ID on success. WP_Error when term_id is ambiguous between taxonomies.                           False on failure.",
        "rank": 0
    },
    "add_theme_page": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "add_theme_page",
        "summary": "Add submenu page to the Appearance main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "add_theme_support": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "efct",
        "name": "add_theme_support",
        "summary": "Registers theme support for a given feature.",
        "description": "<p>Must be called in the theme's functions.php file to work. If attached to a hook, it must be {@see 'after_setup_theme'}. The {@see 'init'} hook may be too late for some features.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feature": {
                "label": "feature",
                "description": "The feature being added. Likely core values include 'post-formats', 'post-thumbnails', 'html5', 'custom-logo', 'custom-header-uploads', 'custom-header', 'custom-background', 'title-tag', 'starter-content', 'responsive-embeds', etc.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args,...": {
                "label": "args,...",
                "description": "extra arguments to pass along with certain features.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "void",
            "bool"
        ],
        "return_description": "False on failure, void otherwise.",
        "rank": 0
    },
    "add_user": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "add_user",
        "summary": "Creates a new user from the \"Users\" form using $_POST information.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "WP_Error or User ID.",
        "rank": 0
    },
    "add_user_meta": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "add_user_meta",
        "summary": "Adds meta data to a user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "unique": {
                "label": "unique",
                "description": "Whether the same key should not be added.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Meta ID on success, false on failure.",
        "rank": 0
    },
    "add_user_to_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "add_user_to_blog",
        "summary": "Adds a user to a blog.",
        "description": "<p>Use the {@see 'add_user_to_blog'} action to fire an event when users are added to a blog.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog you're adding the user to.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "ID of the user you're adding.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "role": {
                "label": "role",
                "description": "The role you want the user to have",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "add_users_page": {
        "since": "2.1.3",
        "group": "Administration",
        "type": "efct",
        "name": "add_users_page",
        "summary": "Add submenu page to the Users\/Profile main menu.",
        "description": "<p>This function takes a capability which will be used to determine whether or not a page is included in the menu.<\/p> <p>The function which is hooked in to handle the output of the page must check that the user has the required capability as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page_title": {
                "label": "page_title",
                "description": "The text to be displayed in the title tags of the page when the menu is selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_title": {
                "label": "menu_title",
                "description": "The text to be used for the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "The capability required for this menu to be displayed to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function to be called to output the content for this page.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The resulting page's hook_suffix, or false if the user does not have the capability required.",
        "rank": 0
    },
    "addslashes_gpc": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "addslashes_gpc",
        "summary": "Adds slashes to escape strings.",
        "description": "<p>Slashes will first be removed if magic_quotes_gpc is set, see {@link https:\/\/secure.php.net\/magic_quotes} for more details.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "gpc": {
                "label": "gpc",
                "description": "The string returned from HTTP request data.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns a string escaped with slashes.",
        "rank": 0
    },
    "adjacent_image_link": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "adjacent_image_link",
        "summary": "Displays next or previous image link that has the same post parent.",
        "description": "<p>Retrieves the current attachment object from the $post global.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prev": {
                "label": "prev",
                "description": "Whether to display the next (false) or previous (true) link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Link text.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "adjacent_post_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "efct",
        "name": "adjacent_post_link",
        "summary": "Displays the adjacent post link.",
        "description": "<p>Can be either next post link or previous.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "Link anchor format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "link": {
                "label": "link",
                "description": "Link permalink format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded category IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "previous": {
                "label": "previous",
                "description": "Whether to display link to previous or next post.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "adjacent_posts_rel_link": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "adjacent_posts_rel_link",
        "summary": "Displays the relational links for the posts adjacent to the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Link title format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "admin_color_scheme_picker": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "admin_color_scheme_picker",
        "summary": "Display the default admin color scheme picker (Used in user-edit.php)",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "admin_created_user_email": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "admin_created_user_email",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "admin_url": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "admin_url",
        "summary": "Retrieves the URL to the admin area for the current site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "path relative to the admin URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Admin URL link with optional path appended.",
        "rank": 0
    },
    "allow_subdirectory_install": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "allow_subdirectory_install",
        "summary": "Allow subdirectory installation.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether subdirectory installation is allowed",
        "rank": 0
    },
    "allow_subdomain_install": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "allow_subdomain_install",
        "summary": "Allow subdomain installation",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether subdomain installation is allowed",
        "rank": 0
    },
    "allowed_http_request_hosts": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "allowed_http_request_hosts",
        "summary": "Whitelists allowed redirect hosts for safe HTTP requests as well.",
        "description": "<p>Attached to the {@see 'http_request_host_is_external'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "is_external": {
                "label": "is_external",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "host": {
                "label": "host",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "allowed_tags": {
        "since": "1.0.1",
        "group": "Template",
        "type": "fct",
        "name": "allowed_tags",
        "summary": "Display all of the allowed tags in HTML format with attributes.",
        "description": "<p>This is useful for displaying in the comment area, which elements and attributes are supported. As well as any plugins which want to display it.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML allowed tags entity encoded.",
        "rank": 0
    },
    "antispambot": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "antispambot",
        "summary": "Converts email addresses characters to HTML entities to block spam bots.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "Email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "hex_encoding": {
                "label": "hex_encoding",
                "description": "Set to 1 to enable hex encoding.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted email address.",
        "rank": 0
    },
    "apache_mod_loaded": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "apache_mod_loaded",
        "summary": "Does the specified module exist in the Apache config?",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mod": {
                "label": "mod",
                "description": "The module, e.g. mod_rewrite.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "The default return value if the module is not found.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the specified module is loaded.",
        "rank": 0
    },
    "apply_filters": {
        "since": "0.71",
        "group": "Plugin",
        "type": "efct",
        "name": "apply_filters",
        "summary": "Call the functions added to a filter hook.",
        "description": "<p>The callback functions attached to filter hook $tag are invoked by calling this function. This function can be used to create a new filter hook by simply calling this function with the name of the new hook specified using the $tag parameter.<\/p> <p>The function allows for additional arguments to be added and passed to hooks.<\/p> \/\/ Our filter callback function function example_callback( $string, $arg1, $arg2 ) { \/\/ (maybe) modify $string return $string; } add_filter( 'example_filter', 'example_callback', 10, 3 ); \/* * Apply the filters by calling the 'example_callback' function we * \"hooked\" to 'example_filter' using the add_filter() function above. * - 'example_filter' is the filter hook $tag * - 'filter me' is the value being filtered * - $arg1 and $arg2 are the additional arguments passed to the callback. $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the filter hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The value on which the filters hooked to $tag are applied on.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "var,...": {
                "label": "var,...",
                "description": "Additional variables passed to the functions hooked to $tag.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The filtered value after all hooked functions are applied to it.",
        "rank": 0
    },
    "apply_filters_deprecated": {
        "since": "4.6.0",
        "group": "Plugin",
        "type": "efct",
        "name": "apply_filters_deprecated",
        "summary": "Fires functions attached to a deprecated filter hook.",
        "description": "<p>When a filter hook is deprecated, the apply_filters() call is replaced with apply_filters_deprecated(), which triggers a deprecation notice and then fires the original filter hook.<\/p> <p>Note: the value and extra arguments passed to the original apply_filters() call must be passed here to $args as an array. For example:<\/p> \/\/ Old filter. return apply_filters( 'wpdocs_filter', $value, $extra_arg ); \/\/ Deprecated. return apply_filters_deprecated( 'wpdocs_filter', array( $value, $extra_arg ), '4.9', 'wpdocs_new_filter' );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the filter hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of additional function arguments to be passed to apply_filters().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "version": {
                "label": "version",
                "description": "The version of WordPress that deprecated the hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "replacement": {
                "label": "replacement",
                "description": "The hook that should have been used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "message": {
                "label": "message",
                "description": "A message regarding the change.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "apply_filters_ref_array": {
        "since": "3.0.0",
        "group": "Plugin",
        "type": "efct",
        "name": "apply_filters_ref_array",
        "summary": "Execute functions hooked on a specific filter hook, specifying arguments in an array.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the filter hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "The arguments supplied to the functions hooked to $tag.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The filtered value after all hooked functions are applied to it.",
        "rank": 0
    },
    "array_replace_recursive": {
        "since": "4.5.3",
        "group": "PHP",
        "type": "efct",
        "name": "array_replace_recursive",
        "summary": "PHP-agnostic version of {@link array_replace_recursive()}.",
        "description": "<p>The array_replace_recursive() function is a PHP 5.3 function. WordPress currently supports down to PHP 5.2, so this method is a workaround for PHP 5.2.<\/p> <p>Note: array_replace_recursive() supports infinite arguments, but for our use- case, we only need to support two arguments.<\/p> <p>Subject to removal once WordPress makes PHP 5.3.0 the minimum requirement.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "base": {
                "label": "base",
                "description": "Array with keys needing to be replaced.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "replacements": {
                "label": "replacements",
                "description": "Array with the replaced keys.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "attachment_id3_data_meta_box": {
        "since": "3.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "attachment_id3_data_meta_box",
        "summary": "Display fields for ID3 data",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "A post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "attachment_submit_meta_box": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "attachment_submit_meta_box",
        "summary": "Display attachment submit form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "attachment_url_to_postid": {
        "since": "4.0.0",
        "group": "Media",
        "type": "efct",
        "name": "attachment_url_to_postid",
        "summary": "Tries to convert an attachment URL into a post ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL to resolve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The found post ID, or 0 on failure.",
        "rank": 0
    },
    "author_can": {
        "since": "2.9.0",
        "group": "Users",
        "type": "efct",
        "name": "author_can",
        "summary": "Whether the author of the supplied post has a specific capability.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "Capability name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post author has the given capability.",
        "rank": 0
    },
    "avoid_blog_page_permalink_collision": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "avoid_blog_page_permalink_collision",
        "summary": "Avoids a collision between a site slug and a permalink slug.",
        "description": "<p>In a subdirectory installation this will make sure that a site and a post do not use the same subdirectory by checking for a site with the same name as a new post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "An array of post data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "postarr": {
                "label": "postarr",
                "description": "An array of posts. Not currently used.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The new array of post data after checking for collisions.",
        "rank": 0
    },
    "backslashit": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "backslashit",
        "summary": "Adds backslashes before letters and before a number at the start of a string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Value to which backslashes will be added.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String with backslashes inserted.",
        "rank": 0
    },
    "balanceTags": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "balanceTags",
        "summary": "Balances tags if forced to, or if the 'use_balanceTags' option is set to true.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to be balanced",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "force": {
                "label": "force",
                "description": "If true, forces balancing, ignoring the value of the option.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Balanced text",
        "rank": 0
    },
    "before_last_bar": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "before_last_bar",
        "summary": "Remove last item on a pipe-delimited string.",
        "description": "<p>Meant for removing the last item in a string, such as 'Role name|User role'. The original string will be returned if no pipe '|' characters are found in the string.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "A pipe-delimited string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Either $string or everything before the last pipe.",
        "rank": 0
    },
    "block_version": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "block_version",
        "summary": "Returns the current version of the block format that the content string is using.",
        "description": "<p>If the string doesn't contain blocks, it returns 0.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to test.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The block format version is 1 if the content contains one or more blocks, 0 otherwise.",
        "rank": 0
    },
    "bloginfo": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "bloginfo",
        "summary": "Displays information about the current site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "show": {
                "label": "show",
                "description": "Site information to display.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "bloginfo_rss": {
        "since": "0.71",
        "group": "Feed",
        "type": "efct",
        "name": "bloginfo_rss",
        "summary": "Display RSS container for the bloginfo function.",
        "description": "<p>You can retrieve anything that you can using the get_bloginfo() function. Everything will be stripped of tags and characters converted, when the values are retrieved for use in the feeds.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "show": {
                "label": "show",
                "description": "See get_bloginfo() for possible values.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "body_class": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "body_class",
        "summary": "Displays the class names for the body element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "Space-separated string or array of class names to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "bool_from_yn": {
        "since": "1.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "bool_from_yn",
        "summary": "Whether input is yes or no.",
        "description": "<p>Must be 'y' to be true.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "yn": {
                "label": "yn",
                "description": "Character string containing either 'y' (yes) or 'n' (no).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if yes, false on anything else.",
        "rank": 0
    },
    "build_dropdown_script_block_core_categories": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "build_dropdown_script_block_core_categories",
        "summary": "Generates the inline script for a categories dropdown field.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "dropdown_id": {
                "label": "dropdown_id",
                "description": "ID of the dropdown field.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the dropdown onChange redirection script.",
        "rank": 0
    },
    "build_query": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "build_query",
        "summary": "Build URL query based on an associative and, or indexed array.",
        "description": "<p>This is a convenient function for easily building url queries. It sets the separator to '&amp;' and uses _http_build_query() function.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "URL-encode key\/value pairs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL-encoded string.",
        "rank": 0
    },
    "bulk_edit_posts": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "bulk_edit_posts",
        "summary": "Process the post data for the bulk editing of posts.",
        "description": "<p>Updates all bulk edited posts\/pages, adding (but not removing) tags and categories. Skips pages when they would be their own parent or child.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "the array of post data to process if not provided will use $_POST superglobal.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "cache_users": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "cache_users",
        "summary": "Retrieve info for user lists to prevent multiple queries by get_userdata()",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_ids": {
                "label": "user_ids",
                "description": "User ID numbers list",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "calendar_week_mod": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "calendar_week_mod",
        "summary": "Get number of days since the start of the week.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "num": {
                "label": "num",
                "description": "Number of day.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "float",
                "label": "float"
            }
        },
        "return": [
            "float"
        ],
        "return_description": "Days since the start of the week.",
        "rank": 0
    },
    "can_edit_network": {
        "since": "3.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "can_edit_network",
        "summary": "Whether or not we can edit this network from this page.",
        "description": "<p>By default editing of network is restricted to the Network Admin for that $network_id. This function allows for this to be overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "The network ID to check.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if network can be edited, otherwise false.",
        "rank": 0
    },
    "cancel_comment_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "cancel_comment_reply_link",
        "summary": "Display HTML content for cancel comment reply link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to display for cancel reply link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "capital_P_dangit": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "capital_P_dangit",
        "summary": "Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).",
        "description": "<p>Violating our coding standards for a good function name.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text to be modified.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The modified text.",
        "rank": 0
    },
    "cat_is_ancestor_of": {
        "since": "2.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "cat_is_ancestor_of",
        "summary": "Check if a category is an ancestor of another category.",
        "description": "<p>You can use either an id or the category object for both parameters. If you use an integer the category will be retrieved.<\/p>",
        "inputs": {
            "cat1": {
                "label": "cat1",
                "description": "ID or object to check if this is the parent category.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "cat2": {
                "label": "cat2",
                "description": "The child category.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether $cat2 is child of $cat1",
        "rank": 0
    },
    "category_description": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "category_description",
        "summary": "Retrieve category description.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "category": {
                "label": "category",
                "description": "Category ID. Will use global category ID by default.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Category description, available.",
        "rank": 0
    },
    "category_exists": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "category_exists",
        "summary": "Check whether a category exists.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cat_name": {
                "label": "cat_name",
                "description": "Category name.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "parent": {
                "label": "parent",
                "description": "ID of parent term.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "check_admin_referer": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "check_admin_referer",
        "summary": "Makes sure that a user was referred from another admin page.",
        "description": "<p>To avoid security exploits.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action nonce.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "-1",
                "required": false
            },
            "query_arg": {
                "label": "query_arg",
                "description": "Key to check for nonce in $_REQUEST (since 2.5).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'_wpnonce'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
        "rank": 0
    },
    "check_ajax_referer": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "check_ajax_referer",
        "summary": "Verifies the Ajax request to prevent processing requests external of the blog.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action nonce.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "-1",
                "required": false
            },
            "query_arg": {
                "label": "query_arg",
                "description": "Key to check for the nonce in $_REQUEST (since 2.5). If false, $_REQUEST values will be evaluated for '_ajax_nonce', and '_wpnonce' (in that order).",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "die": {
                "label": "die",
                "description": "Whether to die early when the nonce cannot be verified.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
        "rank": 0
    },
    "check_and_publish_future_post": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "check_and_publish_future_post",
        "summary": "Publish future post and make sure post ID has future post status.",
        "description": "<p>Invoked by cron 'publish_future_post' event. This safeguard prevents cron from publishing drafts, etc.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "check_column": {
        "since": "1.0.0",
        "group": "Plugin",
        "type": "efct",
        "name": "check_column",
        "summary": "Check column matches criteria.",
        "description": "<p>Uses the SQL DESC for retrieving the table info for the column. It will help understand the parameters, if you do more research on what column information is returned by the SQL statement. Pass in null to skip checking that criteria.<\/p> <p>Column names returned from DESC table are case sensitive and are listed: Field Type Null Key Default Extra<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table_name": {
                "label": "table_name",
                "description": "Table name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "col_name": {
                "label": "col_name",
                "description": "Column name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "col_type": {
                "label": "col_type",
                "description": "Column type",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "is_null": {
                "label": "is_null",
                "description": "Check is null.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "Key info.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "default": {
                "label": "default",
                "description": "Default value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "extra": {
                "label": "extra",
                "description": "Extra value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if matches. False, if not matching.",
        "rank": 0
    },
    "check_comment": {
        "since": "1.2.0",
        "group": "Comment",
        "type": "efct",
        "name": "check_comment",
        "summary": "Check whether a comment passes internal checks to be allowed to add.",
        "description": "<p>If manual comment moderation is set in the administration, then all checks, regardless of their type and whitelist, will fail and the function will return false.<\/p> <p>If the number of links exceeds the amount in the administration, then the check fails. If any of the parameter contents match the blacklist of words, then the check fails.<\/p> <p>If the comment author was approved before, then the comment is automatically whitelisted.<\/p> <p>If all checks pass, the function will return true.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "author": {
                "label": "author",
                "description": "Comment author name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "Comment author email.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "Comment author URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "comment": {
                "label": "comment",
                "description": "Content of the comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_ip": {
                "label": "user_ip",
                "description": "Comment author IP address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_agent": {
                "label": "user_agent",
                "description": "Comment author User-Agent.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "comment_type": {
                "label": "comment_type",
                "description": "Comment type, either user-submitted comment, trackback, or pingback.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "If all checks pass, true, otherwise false.",
        "rank": 0
    },
    "check_import_new_users": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "check_import_new_users",
        "summary": "Checks if the current user has permissions to import new users.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "permission": {
                "label": "permission",
                "description": "A permission to be checked. Currently not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the user has proper permissions, false if they do not.",
        "rank": 0
    },
    "check_password_reset_key": {
        "since": "3.1.0",
        "group": "Users",
        "type": "efct",
        "name": "check_password_reset_key",
        "summary": "Retrieves a user row based on password reset key and login",
        "description": "<p>A key is considered 'expired' if it exactly matches the value of the user_activation_key field, rather than being matched after going through the hashing process. This field is now hashed; old values are no longer accepted but have a different WP_Error code so good user feedback can be provided.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "Hash to validate sending user's password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "login": {
                "label": "login",
                "description": "The user login.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User object on success, WP_Error object for invalid or expired keys.",
        "rank": 0
    },
    "check_upload_mimes": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "check_upload_mimes",
        "summary": "Check an array of MIME types against a whitelist.",
        "description": "<p>WordPress ships with a set of allowed upload filetypes, which is defined in wp-includes\/functions.php in get_allowed_mime_types(). This function is used to filter that list against the filetype whitelist provided by Multisite Super Admins at wp-admin\/network\/settings.php.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mimes": {
                "label": "mimes",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "check_upload_size": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "check_upload_size",
        "summary": "Determine if uploaded file exceeds space quota.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "$_FILES array for a given file.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise.",
        "rank": 0
    },
    "checked": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "checked",
        "summary": "Outputs the html checked attribute.",
        "description": "<p>Compares the first two arguments and if identical marks as checked<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "checked": {
                "label": "checked",
                "description": "One of the values to compare",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "current": {
                "label": "current",
                "description": "(true) The other value to compare if not just true",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or just return the string",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "html attribute or empty string",
        "rank": 0
    },
    "clean_attachment_cache": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "clean_attachment_cache",
        "summary": "Will clean the attachment in the cache.",
        "description": "<p>Cleaning means delete from the cache. Optionally will clean the term object cache associated with the attachment ID.<\/p> <p>This function will not run if $_wp_suspend_cache_invalidation is not empty.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The attachment ID in the cache to clean.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "clean_terms": {
                "label": "clean_terms",
                "description": "Whether to clean terms cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_blog_cache": {
        "since": "3.5.0",
        "group": "Multisite",
        "type": "efct",
        "name": "clean_blog_cache",
        "summary": "Clean the blog cache",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog": {
                "label": "blog",
                "description": "The site object or ID to be cleared from cache.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_bookmark_cache": {
        "since": "2.7.0",
        "group": "Bookmark",
        "type": "efct",
        "name": "clean_bookmark_cache",
        "summary": "Deletes the bookmark cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "bookmark_id": {
                "label": "bookmark_id",
                "description": "Bookmark ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_category_cache": {
        "since": "2.1.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "clean_category_cache",
        "summary": "Remove the category cache data based on ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Category ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_comment_cache": {
        "since": "2.3.0",
        "group": "Comment",
        "type": "efct",
        "name": "clean_comment_cache",
        "summary": "Removes a comment from the object cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ids": {
                "label": "ids",
                "description": "Comment ID or an array of comment IDs to remove from cache.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_network_cache": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "efct",
        "name": "clean_network_cache",
        "summary": "Removes a network from the object cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ids": {
                "label": "ids",
                "description": "Network ID or an array of network IDs to remove from cache.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_object_term_cache": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "clean_object_term_cache",
        "summary": "Removes the taxonomy relationship to terms from the cache.",
        "description": "<p>Will remove the entire taxonomy relationship containing term $object_id. The term IDs have to exist within the taxonomy $object_type for the deletion to take place.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_ids": {
                "label": "object_ids",
                "description": "Single or list of term object ID(s).",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "The taxonomy object type.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_post_cache": {
        "since": "2.0.0",
        "group": "Post",
        "type": "efct",
        "name": "clean_post_cache",
        "summary": "Will clean the post in the cache.",
        "description": "<p>Cleaning means delete from the cache of the post. Will call to clean the term object cache associated with the post ID.<\/p> <p>This function not run if $_wp_suspend_cache_invalidation is not empty. See wp_suspend_cache_invalidation().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object to remove from the cache.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_site_details_cache": {
        "since": "4.7.4",
        "group": "Multisite",
        "type": "efct",
        "name": "clean_site_details_cache",
        "summary": "Cleans the site details cache for a site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID. Default is the current site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_taxonomy_cache": {
        "since": "4.9.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "clean_taxonomy_cache",
        "summary": "Clean the caches for a taxonomy.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_term_cache": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "clean_term_cache",
        "summary": "Will remove all of the term ids from the cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ids": {
                "label": "ids",
                "description": "Single or list of Term IDs.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Can be empty and will assume tt_ids, else will use for context.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "clean_taxonomy": {
                "label": "clean_taxonomy",
                "description": "Whether to clean taxonomy wide caches (true), or just individual term object caches (false).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "clean_user_cache": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "clean_user_cache",
        "summary": "Clean all user caches",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "User object or ID to be cleaned from the cache",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author",
        "summary": "Displays the author of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to print the author. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_IP": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_IP",
        "summary": "Display the IP address of the author of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to print the author's IP address. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_email": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_email",
        "summary": "Display the email of the author of the current global $comment.",
        "description": "<p>Care should be taken to protect the email address and assure that email harvesters do not capture your commentors' email address. Most assume that their email address will not appear in raw form on the site. Doing so will enable anyone, including those that people don't want to get the email address and use it for their own means good and bad.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to print the author's email. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_email_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_email_link",
        "summary": "Display the html email link to the author of the current comment.",
        "description": "<p>Care should be taken to protect the email address and assure that email harvesters do not capture your commentors' email address. Most assume that their email address will not appear in raw form on the site. Doing so will enable anyone, including those that people don't want to get the email address and use it for their own means good and bad.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "linktext": {
                "label": "linktext",
                "description": "Text to display instead of the comment author's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Text or HTML to display before the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Text or HTML to display after the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment ID or WP_Comment object. Default is the current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_link",
        "summary": "Display the html link to the url of the author of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to print the author's link. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_url": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_url",
        "summary": "Display the url of the author of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to print the author's URL. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_author_url_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_author_url_link",
        "summary": "Displays the HTML link of the url of the author of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "linktext": {
                "label": "linktext",
                "description": "Text to display instead of the comment author's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Text or HTML to display before the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Text or HTML to display after the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment ID or WP_Comment object. Default is the current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_class": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_class",
        "summary": "Generates semantic classes for each comment element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "One or more classes to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment ID or WP_Comment object. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to cho or return the output.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "If <code>$echo<\/code> is false, the class will be returned. Void otherwise.",
        "rank": 0
    },
    "comment_date": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_date",
        "summary": "Display the comment date of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "The format of the date. Default user's settings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to print the date. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_excerpt": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_excerpt",
        "summary": "Display the excerpt of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to print the excerpt. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_exists": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "comment_exists",
        "summary": "Determine if a comment exists based on author and date.",
        "description": "<p>For best performance, use $timezone = 'gmt', which queries a field that is properly indexed. The default value for $timezone is 'blog' for legacy reasons.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_author": {
                "label": "comment_author",
                "description": "Author of the comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "comment_date": {
                "label": "comment_date",
                "description": "Date of the comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "timezone": {
                "label": "timezone",
                "description": "Timezone. Accepts 'blog' or 'gmt'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'blog'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Comment post ID on success.",
        "rank": 0
    },
    "comment_footer_die": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "comment_footer_die",
        "summary": "Display error message at bottom of comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "msg": {
                "label": "msg",
                "description": "Error Message. Assumed to contain HTML and be sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_form": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_form",
        "summary": "Outputs a complete commenting form for use within a template.",
        "description": "<p>Most strings and form fields may be controlled through the $args array passed into the function, while you may also choose to use the {@see 'comment_form_default_fields'} filter to modify the array of default fields if you'd just like to add a new one or remove a single field. All fields are also individually passed through a filter of the {@see 'comment_form<em>field<\/em>$name'} where $name is the key used in the array of fields.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Default arguments and form fields to override. <ul><li><b>'fields'<\/b><br\/><i>(array)<\/i> Default comment fields, filterable by default via the &#039;comment_form_default_fields&#039; hook.<ul> <li><b>'author'<\/b><br\/><i>(string)<\/i> Comment author field HTML.<\/li> <li><b>'email'<\/b><br\/><i>(string)<\/i> Comment author email field HTML.<\/li> <li><b>'url'<\/b><br\/><i>(string)<\/i> Comment author URL field HTML.<\/li> <li><b>'cookies'<\/b><br\/><i>(string)<\/i> Comment cookie opt-in field HTML. <\/li><\/ul> <\/li> <li><b>'comment_field'<\/b><br\/><i>(string)<\/i> The comment textarea field HTML.<\/li> <li><b>'must_log_in'<\/b><br\/><i>(string)<\/i> HTML element for a 'must be logged in to comment' message.<\/li> <li><b>'logged_in_as'<\/b><br\/><i>(string)<\/i> HTML element for a 'logged in as [user]' message.<\/li> <li><b>'comment_notes_before'<\/b><br\/><i>(string)<\/i> HTML element for a message displayed before the comment fields if the user is not logged in. Default 'Your email address will not be published.'.<\/li> <li><b>'comment_notes_after'<\/b><br\/><i>(string)<\/i> HTML element for a message displayed after the textarea field.<\/li> <li><b>'action'<\/b><br\/><i>(string)<\/i> The comment form element action attribute. Default '\/wp-comments-post.php'.<\/li> <li><b>'id_form'<\/b><br\/><i>(string)<\/i> The comment form element id attribute. Default 'commentform'.<\/li> <li><b>'id_submit'<\/b><br\/><i>(string)<\/i> The comment submit element id attribute. Default 'submit'.<\/li> <li><b>'class_form'<\/b><br\/><i>(string)<\/i> The comment form element class attribute. Default 'comment-form'.<\/li> <li><b>'class_submit'<\/b><br\/><i>(string)<\/i> The comment submit element class attribute. Default 'submit'.<\/li> <li><b>'name_submit'<\/b><br\/><i>(string)<\/i> The comment submit element name attribute. Default 'submit'.<\/li> <li><b>'title_reply'<\/b><br\/><i>(string)<\/i> The translatable 'reply' button label. Default 'Leave a Reply'.<\/li> <li><b>'title_reply_to'<\/b><br\/><i>(string)<\/i> The translatable 'reply-to' button label. Default 'Leave a Reply to %s', where %s is the author of the comment being replied to.<\/li> <li><b>'title_reply_before'<\/b><br\/><i>(string)<\/i> HTML displayed before the comment form title. Default: '&lt;h3 id=&quot;reply-title&quot; class=&quot;comment-reply-title&quot;&gt;'.<\/li> <li><b>'title_reply_after'<\/b><br\/><i>(string)<\/i> HTML displayed after the comment form title. Default: '&lt;\/h3&gt;'.<\/li> <li><b>'cancel_reply_before'<\/b><br\/><i>(string)<\/i> HTML displayed before the cancel reply link.<\/li> <li><b>'cancel_reply_after'<\/b><br\/><i>(string)<\/i> HTML displayed after the cancel reply link.<\/li> <li><b>'cancel_reply_link'<\/b><br\/><i>(string)<\/i> The translatable 'cancel reply' button label. Default 'Cancel reply'.<\/li> <li><b>'label_submit'<\/b><br\/><i>(string)<\/i> The translatable 'submit' button label. Default 'Post a comment'.<\/li> <li><b>'submit_button'<\/b><br\/><i>(string)<\/i> HTML format for the Submit button. Default: '&lt;input name=&quot;%1$s&quot; type=&quot;submit&quot; id=&quot;%2$s&quot; class=&quot;%3$s&quot; value=&quot;%4$s&quot; \/&gt;'.<\/li> <li><b>'submit_field'<\/b><br\/><i>(string)<\/i> HTML format for the markup surrounding the Submit button and comment hidden fields. Default: '&lt;p class=&quot;form-submit&quot;&gt;%1$s %2$s&lt;\/p&gt;', where %1$s is the submit button markup and %2$s is the comment hidden fields.<\/li> <li><b>'format'<\/b><br\/><i>(string)<\/i> The comment form format. Default 'xhtml'. Accepts 'xhtml', 'html5'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object to generate the form for. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_form_title": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_form_title",
        "summary": "Display text based on comment reply status.",
        "description": "<p>Only affects users with JavaScript disabled.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "noreplytext": {
                "label": "noreplytext",
                "description": "Text to display when not replying to a comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "replytext": {
                "label": "replytext",
                "description": "Text to display when replying to a comment. Accepts &quot;%s&quot; for the author of the comment being replied to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "linktoparent": {
                "label": "linktoparent",
                "description": "Boolean to control making the author's name a link to their comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_guid": {
        "since": "2.5.0",
        "group": "Feed",
        "type": "efct",
        "name": "comment_guid",
        "summary": "Display the feed GUID for the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "comment object or id. Defaults to global comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_id_fields": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_id_fields",
        "summary": "Output hidden input HTML for replying to comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Post ID. Default current post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_link": {
        "since": "1.5.0",
        "group": "Feed",
        "type": "efct",
        "name": "comment_link",
        "summary": "Display the link to the comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment object or id. Defaults to global comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "comment_reply_link",
        "summary": "Displays the HTML content for reply to comment link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Override default options.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment being replied to. Default current comment.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object the comment is going to be displayed on. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Link to show comment form, if successful. False, if comments are closed.",
        "rank": 0
    },
    "comment_text": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_text",
        "summary": "Display the text of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to print the text. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": true
            },
            "args": {
                "label": "args",
                "description": "An array of arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_time": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_time",
        "summary": "Display the comment time of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "The format of the time. Default user's settings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comment_type": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comment_type",
        "summary": "Display the comment type of the current comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commenttxt": {
                "label": "commenttxt",
                "description": "String to display for comment type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "trackbacktxt": {
                "label": "trackbacktxt",
                "description": "String to display for trackback type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "pingbacktxt": {
                "label": "pingbacktxt",
                "description": "String to display for pingback type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comments_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comments_link",
        "summary": "Display the link to the current post comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not Used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deprecated_2": {
                "label": "deprecated_2",
                "description": "Not Used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comments_link_feed": {
        "since": "3.0.0",
        "group": "Feed",
        "type": "fct",
        "name": "comments_link_feed",
        "summary": "Outputs the link to the comments for the current post in an xml safe way",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "none",
                "label": "none"
            }
        },
        "return": [
            "none"
        ],
        "return_description": "",
        "rank": 0
    },
    "comments_number": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comments_number",
        "summary": "Display the language string for the number of comments the current post has.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "zero": {
                "label": "zero",
                "description": "Text for no comments.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "one": {
                "label": "one",
                "description": "Text for one comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "more": {
                "label": "more",
                "description": "Text for more than one comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comments_open": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "comments_open",
        "summary": "Determines whether the current post is open for comments.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the comments are open.",
        "rank": 0
    },
    "comments_popup_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "comments_popup_link",
        "summary": "Displays the link to the comments for the current post ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "zero": {
                "label": "zero",
                "description": "String to display when no comments.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "one": {
                "label": "one",
                "description": "String to display when only one comment is available.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "more": {
                "label": "more",
                "description": "String to display when there are more than one comment.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "css_class": {
                "label": "css_class",
                "description": "CSS class to use for comments.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "none": {
                "label": "none",
                "description": "String to display when comments have been turned off.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "comments_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "comments_template",
        "summary": "Load the comment template specified in $file.",
        "description": "<p>Will not display the comments template if not on single post or page, or if the post does not have comments.<\/p> <p>Uses the WordPress database object to query for the comments. The comments are passed through the {@see 'comments_array'} filter hook with the list of comments and the post ID respectively.<\/p> <p>The $file path is passed through a filter hook called {@see 'comments_template'}, which includes the TEMPLATEPATH and $file combined. Tries the $filtered path first and if it fails it will require the default comment template from the default theme. If either does not exist, then the WordPress process will be halted. It is advised for that reason, that the default theme is not deleted.<\/p> <p>Will not try to get the comments if the post has none.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The file to load.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'\/comments.php'",
                "required": false
            },
            "separate_comments": {
                "label": "separate_comments",
                "description": "Whether to separate the comments by comment type.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "confirm_another_blog_signup": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "confirm_another_blog_signup",
        "summary": "Confirm a new site signup.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The domain URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The site root path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_name": {
                "label": "user_name",
                "description": "The username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "meta": {
                "label": "meta",
                "description": "Any additional meta from the &#039;add_signup_meta&#039; filter in validate_blog_signup().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "The site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 1
    },
    "confirm_blog_signup": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "confirm_blog_signup",
        "summary": "New site signup confirmation",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The domain URL",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The site root path",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The new site title",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_name": {
                "label": "user_name",
                "description": "The user's username",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "meta": {
                "label": "meta",
                "description": "Any additional meta from the &#039;add_signup_meta&#039; filter in validate_blog_signup()",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 1
    },
    "confirm_delete_users": {
        "since": false,
        "group": "Multisite",
        "type": "efct",
        "name": "confirm_delete_users",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "users": {
                "label": "users",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "confirm_user_signup": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "confirm_user_signup",
        "summary": "New user signup confirmation",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The username",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 1
    },
    "content_url": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "content_url",
        "summary": "Retrieves the URL to the content directory.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the content URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content URL link with optional path appended.",
        "rank": 0
    },
    "convert_chars": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "convert_chars",
        "summary": "Converts lone & characters into `&#038;` (a.k.a. `&amp;`)",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "String of characters to be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted string.",
        "rank": 0
    },
    "convert_invalid_entities": {
        "since": "4.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "convert_invalid_entities",
        "summary": "Converts invalid Unicode references range to valid range.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "String with entities that need converting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted string.",
        "rank": 0
    },
    "convert_smilies": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "convert_smilies",
        "summary": "Convert text equivalent of smilies to images.",
        "description": "<p>Will only convert smilies if the option 'use_smilies' is true and the global used in the function isn't empty.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Content to convert smilies from text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted content with text smilies replaced with images.",
        "rank": 0
    },
    "convert_to_screen": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "convert_to_screen",
        "summary": "Convert a screen string to a screen object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hook_name": {
                "label": "hook_name",
                "description": "The hook name (also known as the hook suffix) used to determine the screen.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_Screen",
                "label": "WP_Screen"
            }
        },
        "return": [
            "WP_Screen"
        ],
        "return_description": "Screen object.",
        "rank": 0
    },
    "copy_dir": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "copy_dir",
        "summary": "Copies a directory from one location to another via the WordPress Filesystem Abstraction.",
        "description": "<p>Assumes that WP_Filesystem() has already been called and setup.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "from": {
                "label": "from",
                "description": "Source directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "to": {
                "label": "to",
                "description": "Destination directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "skip_list": {
                "label": "skip_list",
                "description": "A list of files\/folders to skip copying.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "True on success, WP_Error on failure.",
        "rank": 0
    },
    "core_update_footer": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "core_update_footer",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "msg": {
                "label": "msg",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "count_many_users_posts": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "count_many_users_posts",
        "summary": "Number of posts written by a list of users.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "users": {
                "label": "users",
                "description": "Array of user IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post_type": {
                "label": "post_type",
                "description": "Single post type or array of post types to check. Defaults to 'post'.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post'",
                "required": false
            },
            "public_only": {
                "label": "public_only",
                "description": "Only return counts for public posts. Defaults to false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Amount of posts each user has written.",
        "rank": 0
    },
    "count_user_posts": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "count_user_posts",
        "summary": "Number of posts user has written.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "userid": {
                "label": "userid",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_type": {
                "label": "post_type",
                "description": "Single post type or array of post types to count the number of posts for.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "public_only": {
                "label": "public_only",
                "description": "Whether to only return counts for public posts.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Number of posts the user has written in this post type.",
        "rank": 0
    },
    "count_users": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "count_users",
        "summary": "Count number of users who have each of the user roles.",
        "description": "<p>Assumes there are neither duplicated nor orphaned capabilities meta_values. Assumes role names are unique phrases. Same assumption made by WP_User_Query::prepare_query() Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users. Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "strategy": {
                "label": "strategy",
                "description": "The computational strategy to use when counting the users. Accepts either 'time' or 'memory'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'time'",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "The site ID to count users for. Defaults to the current site.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Includes a grand total and an array of counts indexed by role strings.",
        "rank": 0
    },
    "current_action": {
        "since": "3.9.0",
        "group": "Plugin",
        "type": "fct",
        "name": "current_action",
        "summary": "Retrieve the name of the current action.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Hook name of the current action.",
        "rank": 0
    },
    "current_filter": {
        "since": "2.5.0",
        "group": "Plugin",
        "type": "fct",
        "name": "current_filter",
        "summary": "Retrieve the name of the current filter or action.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Hook name of the current filter or action.",
        "rank": 0
    },
    "current_theme_supports": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "efct",
        "name": "current_theme_supports",
        "summary": "Checks a theme's support for a given feature",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feature": {
                "label": "feature",
                "description": "the feature being checked",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "current_time": {
        "since": "1.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "current_time",
        "summary": "Retrieve the current time based on specified type.",
        "description": "<p>The 'mysql' type will return the time in the format for MySQL DATETIME field. The 'timestamp' type will return the current timestamp. Other strings will be interpreted as PHP date formats (e.g. 'Y-m-d').<\/p> <p>If $gmt is set to either '1' or 'true', then both types will use GMT time. if $gmt is false, the output is adjusted with the GMT offset in the WordPress option.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Type of time to retrieve. Accepts 'mysql', 'timestamp', or PHP date format string (e.g. 'Y-m-d').",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "gmt": {
                "label": "gmt",
                "description": "Whether to use GMT timezone. Default false.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "string"
        ],
        "return_description": "Integer if $type is 'timestamp', string otherwise.",
        "rank": 0
    },
    "current_user_can": {
        "since": "2.0.0",
        "group": "Users",
        "type": "fct",
        "name": "current_user_can",
        "summary": "Whether the current user has a specific capability.",
        "description": "<p>While checking against particular roles in place of a capability is supported in part, this practice is discouraged as it may produce unreliable results.<\/p> <p>Note: Will always return true if the current user is a super admin, unless specifically denied.<\/p>",
        "inputs": {
            "capability": {
                "label": "capability",
                "description": "Capability name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the specific object to check against if $capability is a &quot;meta&quot; cap. &quot;Meta&quot; capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used by map_meta_cap() to map to other &quot;primitive&quot; capabilities, e.g. 'edit_posts', 'edit_others_posts', etc. Accessed via func_get_args() and passed to WP_User::has_cap(), then map_meta_cap().",
                "type": "int",
                "types": [
                    "int"
                ],
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the current user has the given capability. If <code>$capability<\/code> is a meta cap and <code>$object_id<\/code> is              passed, whether the current user has the given meta capability for the given object.",
        "rank": 0
    },
    "current_user_can_for_blog": {
        "since": "3.0.0",
        "group": "Users",
        "type": "fct",
        "name": "current_user_can_for_blog",
        "summary": "Whether the current user has a specific capability for a given site.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "Capability name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the user has the given capability.",
        "rank": 0
    },
    "dashboard_browser_nag_class": {
        "since": "3.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "dashboard_browser_nag_class",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "classes": {
                "label": "classes",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "dashboard_php_nag_class": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "dashboard_php_nag_class",
        "summary": "Adds an additional class to the PHP nag if the current version is insecure.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "classes": {
                "label": "classes",
                "description": "Metabox classes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Modified metabox classes.",
        "rank": 0
    },
    "date_i18n": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "date_i18n",
        "summary": "Retrieve the date in localized format, based on a sum of Unix timestamp and timezone offset in seconds.",
        "description": "<p>If the locale specifies the locale month and weekday, then the locale will take over the format for the date. If it isn't, then the date format string will be used instead.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "dateformatstring": {
                "label": "dateformatstring",
                "description": "Format to display the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "timestamp_with_offset": {
                "label": "timestamp_with_offset",
                "description": "A sum of Unix timestamp and timezone offset in seconds.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "gmt": {
                "label": "gmt",
                "description": "Whether to use GMT timezone. Only applies if timestamp is not provided.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The date, translated if locale specifies it.",
        "rank": 0
    },
    "dbDelta": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "dbDelta",
        "summary": "Modifies the database based on specified SQL statements.",
        "description": "<p>Useful for creating new tables and updating existing tables to a new structure.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "queries": {
                "label": "queries",
                "description": "The query to run. Can be multiple queries in an array, or a string of queries separated by semicolons.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "execute": {
                "label": "execute",
                "description": "Whether or not to execute the query right away.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Strings containing the results of the various update queries.",
        "rank": 0
    },
    "deactivate_plugins": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "deactivate_plugins",
        "summary": "Deactivate a single plugin or multiple plugins.",
        "description": "<p>The deactivation hook is disabled by the plugin upgrader by using the $silent parameter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugins": {
                "label": "plugins",
                "description": "Single plugin or list of plugins to deactivate.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "silent": {
                "label": "silent",
                "description": "Prevent calling deactivation hooks. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "network_wide": {
                "label": "network_wide",
                "description": "Whether to deactivate the plugin for all sites in the network. A value of null (the default) will deactivate plugins for both the site and the network.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "default_password_nag_edit_user": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "default_password_nag_edit_user",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_ID": {
                "label": "user_ID",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "old_data": {
                "label": "old_data",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "default_password_nag_handler": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "default_password_nag_handler",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "Deprecated.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "default_topic_count_scale": {
        "since": "2.9.0",
        "group": "Template",
        "type": "efct",
        "name": "default_topic_count_scale",
        "summary": "Default topic count scaling for tag links.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "count": {
                "label": "count",
                "description": "Number of posts with that tag.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Scaled count.",
        "rank": 0
    },
    "delete_blog_option": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "delete_blog_option",
        "summary": "Removes option by name for a given blog id. Prevents removal of protected WordPress options.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "A blog ID. Can be null to refer to the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to remove. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if option is successfully deleted. False on failure.",
        "rank": 0
    },
    "delete_comment_meta": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "delete_comment_meta",
        "summary": "Remove metadata matching criteria from a comment.",
        "description": "<p>You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "comment ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_expired_transients": {
        "since": "4.9.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_expired_transients",
        "summary": "Deletes all expired transients.",
        "description": "<p>The multi-table delete syntax is used to delete the transient record from table a, and the corresponding transient_timeout record from table b.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "force_db": {
                "label": "force_db",
                "description": "Force cleanup to run against the database even when an external object cache is used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "delete_meta": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "delete_meta",
        "summary": "Delete post meta data by meta ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mid": {
                "label": "mid",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "delete_metadata": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "efct",
        "name": "delete_metadata",
        "summary": "Delete metadata for the specified object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object metadata is for",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar. If specified, only delete metadata entries with this value. Otherwise, delete all entries with the specified meta_key. Pass null, false, or an empty string to skip this check. (For backward compatibility, it is not possible to pass an empty string to delete those entries with an empty string for a value.)",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "delete_all": {
                "label": "delete_all",
                "description": "If true, delete matching metadata entries for all objects, ignoring the specified object_id. Otherwise, only delete matching metadata entries for the specified object_id.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on successful delete, false on failure.",
        "rank": 0
    },
    "delete_metadata_by_mid": {
        "since": "3.3.0",
        "group": "Meta",
        "type": "efct",
        "name": "delete_metadata_by_mid",
        "summary": "Delete meta data by meta ID",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_id": {
                "label": "meta_id",
                "description": "ID for a specific meta row",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on successful delete, false on failure.",
        "rank": 0
    },
    "delete_network_option": {
        "since": "4.4.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_network_option",
        "summary": "Removes a network option by name.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Can be null to default to the current network ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to remove. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if succeed. False, if failure.",
        "rank": 0
    },
    "delete_option": {
        "since": "1.2.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_option",
        "summary": "Removes option by name. Prevents removal of protected WordPress options.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Name of option to remove. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if option is successfully deleted. False on failure.",
        "rank": 0
    },
    "delete_plugins": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "delete_plugins",
        "summary": "Remove directory and files of a plugin for a list of plugins.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugins": {
                "label": "plugins",
                "description": "List of plugin paths to delete, relative to the plugins directory.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null",
            "WP_Error"
        ],
        "return_description": "True on success, false if <code>$plugins<\/code> is empty, <code>WP_Error<\/code> on failure.                            <code>null<\/code> if filesystem credentials are required to proceed.",
        "rank": 0
    },
    "delete_post_meta": {
        "since": "1.5.0",
        "group": "Post",
        "type": "efct",
        "name": "delete_post_meta",
        "summary": "Deletes a post meta field for the given post ID.",
        "description": "<p>You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching the key, if needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_post_meta_by_key": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "delete_post_meta_by_key",
        "summary": "Deletes everything from post meta matching the given meta key.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_meta_key": {
                "label": "post_meta_key",
                "description": "Key to search for when deleting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post meta key was deleted from the database.",
        "rank": 0
    },
    "delete_post_thumbnail": {
        "since": "3.3.0",
        "group": "Post",
        "type": "efct",
        "name": "delete_post_thumbnail",
        "summary": "Removes the thumbnail (featured image) from the given post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object from which the thumbnail should be removed.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_site_meta": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "delete_site_meta",
        "summary": "Removes metadata matching criteria from a site.",
        "description": "<p>You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_site_meta_by_key": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "delete_site_meta_by_key",
        "summary": "Deletes everything from site meta matching meta key.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key to search for when deleting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the site meta key was deleted from the database.",
        "rank": 0
    },
    "delete_site_option": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_site_option",
        "summary": "Removes a option by name for the current network.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Name of option to remove. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if succeed. False, if failure.",
        "rank": 0
    },
    "delete_site_transient": {
        "since": "2.9.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_site_transient",
        "summary": "Delete a site transient.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if successful, false otherwise",
        "rank": 0
    },
    "delete_term_meta": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "delete_term_meta",
        "summary": "Removes metadata matching criteria from a term.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. If provided, rows will only be removed that match the value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_theme": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "delete_theme",
        "summary": "Remove a theme",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "stylesheet": {
                "label": "stylesheet",
                "description": "Stylesheet of the theme to delete.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "redirect": {
                "label": "redirect",
                "description": "Redirect to page when complete.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null",
            "WP_Error"
        ],
        "return_description": "True on success, false if <code>$stylesheet<\/code> is empty, WP_Error on failure.                            Null if filesystem credentials are required to proceed.",
        "rank": 0
    },
    "delete_transient": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_transient",
        "summary": "Delete a transient.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "true if successful, false otherwise",
        "rank": 0
    },
    "delete_user_meta": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "delete_user_meta",
        "summary": "Remove metadata matching criteria from a user.",
        "description": "<p>You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_user_option": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "delete_user_option",
        "summary": "Delete user option with global blog capability.",
        "description": "<p>User options are just like user metadata except that they have support for global blog options. If the 'global' parameter is false, which it is by default it will prepend the WordPress table prefix to the option name.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "User option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "global": {
                "label": "global",
                "description": "Whether option name is global or blog specific. Default false (blog specific).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "delete_user_setting": {
        "since": "2.7.0",
        "group": "Option",
        "type": "efct",
        "name": "delete_user_setting",
        "summary": "Delete user interface settings.",
        "description": "<p>Deleting settings would reset them to the defaults.<\/p> <p>This function has to be used before any output has started as it calls setcookie().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "names": {
                "label": "names",
                "description": "The name or array of names of the setting to be deleted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True if deleted successfully, false if not. Null if the current user can't be established.",
        "rank": 0
    },
    "deslash": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "deslash",
        "summary": "Filters for content to remove unnecessary slashes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The content to modify.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The de-slashed content.",
        "rank": 0
    },
    "determine_locale": {
        "since": "5.0.0",
        "group": "i18n",
        "type": "fct",
        "name": "determine_locale",
        "summary": "Determine the current locale desired for the request.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The determined locale.",
        "rank": 0
    },
    "did_action": {
        "since": "2.1.0",
        "group": "Plugin",
        "type": "efct",
        "name": "did_action",
        "summary": "Retrieve the number of times an action is fired.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the action hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The number of times action hook $tag is fired.",
        "rank": 0
    },
    "disabled": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "disabled",
        "summary": "Outputs the html disabled attribute.",
        "description": "<p>Compares the first two arguments and if identical marks as disabled<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "disabled": {
                "label": "disabled",
                "description": "One of the values to compare",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "current": {
                "label": "current",
                "description": "(true) The other value to compare if not just true",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or just return the string",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "html attribute or empty string",
        "rank": 0
    },
    "discover_pingback_server_uri": {
        "since": "1.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "discover_pingback_server_uri",
        "summary": "Finds a pingback server URI based on the given URL.",
        "description": "<p>Checks the HTML for the rel=&quot;pingback&quot; link and x-pingback headers. It does a check for the x-pingback headers first and returns that, if available. The check for the rel=&quot;pingback&quot; has more overhead than just the header.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL to ping.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not Used.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "False on failure, string containing URI on success.",
        "rank": 0
    },
    "dismiss_core_update": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "dismiss_core_update",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "update": {
                "label": "update",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "display_header": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "display_header",
        "summary": "Display installation header.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "body_classes": {
                "label": "body_classes",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "display_header_text": {
        "since": "3.4.0",
        "group": "Theme",
        "type": "fct",
        "name": "display_header_text",
        "summary": "Whether to display the header text.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "display_setup_form": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "display_setup_form",
        "summary": "Display installer setup form.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "error": {
                "label": "error",
                "description": "",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_accordion_sections": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_accordion_sections",
        "summary": "Meta Box Accordion Template Function.",
        "description": "<p>Largely made up of abstracted code from do_meta_boxes(), this function serves to build meta boxes as list items for display as a collapsible accordion.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "screen": {
                "label": "screen",
                "description": "The screen identifier.",
                "type": "string",
                "types": [
                    "string",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The meta box context.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object": {
                "label": "object",
                "description": "gets passed to the section callback function as first parameter.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "number of meta boxes as accordion sections.",
        "rank": 0
    },
    "do_action": {
        "since": "1.2.0",
        "group": "Plugin",
        "type": "efct",
        "name": "do_action",
        "summary": "Execute functions hooked on a specific action hook.",
        "description": "<p>This function invokes all functions attached to action hook $tag. It is possible to create new action hooks by simply calling this function, specifying the name of the new hook using the $tag parameter.<\/p> <p>You can pass extra arguments to the hooks, much like you can with apply_filters().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the action to be executed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "arg,...": {
                "label": "arg,...",
                "description": "Additional arguments which are passed on to the functions hooked to the action. Default empty.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_action_deprecated": {
        "since": "4.6.0",
        "group": "Plugin",
        "type": "efct",
        "name": "do_action_deprecated",
        "summary": "Fires functions attached to a deprecated action hook.",
        "description": "<p>When an action hook is deprecated, the do_action() call is replaced with do_action_deprecated(), which triggers a deprecation notice and then fires the original hook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the action hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of additional function arguments to be passed to do_action().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "version": {
                "label": "version",
                "description": "The version of WordPress that deprecated the hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "replacement": {
                "label": "replacement",
                "description": "The hook that should have been used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "message": {
                "label": "message",
                "description": "A message regarding the change.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_action_ref_array": {
        "since": "2.1.0",
        "group": "Plugin",
        "type": "efct",
        "name": "do_action_ref_array",
        "summary": "Execute functions hooked on a specific action hook, specifying arguments in an array.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The name of the action to be executed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "The arguments supplied to the functions hooked to $tag.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_block_editor_incompatible_meta_box": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_block_editor_incompatible_meta_box",
        "summary": "Function that renders a \"fake\" meta box with an information message, shown on the block editor, when an incompatible meta box is found.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object": {
                "label": "object",
                "description": "The data object being rendered on this screen.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Custom formats meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'old_callback'<\/b><br\/><i>(callable)<\/i> The original callback for this meta box.<\/li> <li><b>'args'<\/b><br\/><i>(array)<\/i> Extra meta box arguments.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_blocks": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "do_blocks",
        "summary": "Parses dynamic blocks out of `post_content` and re-renders them.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Post content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Updated post content.",
        "rank": 0
    },
    "do_core_upgrade": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_core_upgrade",
        "summary": "Upgrade WordPress core display.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "reinstall": {
                "label": "reinstall",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_enclose": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "do_enclose",
        "summary": "Check content for video and audio links to add as enclosures.",
        "description": "<p>Will not add enclosures that have already been added and will remove enclosures that are no longer in the post. This is called as pingbacks and trackbacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Post Content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_ID": {
                "label": "post_ID",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_feed_atom": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "do_feed_atom",
        "summary": "Load either Atom comment feed or Atom posts feed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "for_comments": {
                "label": "for_comments",
                "description": "True for the comment feed, false for normal feed.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_feed_rss2": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "do_feed_rss2",
        "summary": "Load either the RSS2 comment feed or the RSS2 posts feed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "for_comments": {
                "label": "for_comments",
                "description": "True for the comment feed, false for normal feed.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_meta_boxes": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_meta_boxes",
        "summary": "Meta-Box template function.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "screen": {
                "label": "screen",
                "description": "Screen identifier. If you have used add_menu_page() or add_submenu_page() to create a new screen (and hence screen_id) make sure your menu slug conforms to the limits of sanitize_key() otherwise the 'screen' menu may not correctly render on your page.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The screen context for which to display meta boxes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object": {
                "label": "object",
                "description": "Gets passed to the first parameter of the meta box callback function. Often this is the object that's the focus of the current screen, for example a WP_Post or WP_Comment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "number of meta_boxes",
        "rank": 0
    },
    "do_settings_fields": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_settings_fields",
        "summary": "Print out the settings fields for a particular settings section.",
        "description": "<p>Part of the Settings API. Use this in a settings page to output a specific section. Should normally be called by do_settings_sections() rather than directly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page": {
                "label": "page",
                "description": "Slug title of the admin page whose settings fields you want to show.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "section": {
                "label": "section",
                "description": "Slug title of the settings section whose fields you want to show.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_settings_sections": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "do_settings_sections",
        "summary": "Prints out all settings sections added to a particular settings page",
        "description": "<p>Part of the Settings API. Use this in a settings page callback function to output all the sections and fields that were added to that $page with add_settings_section() and add_settings_field()<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "page": {
                "label": "page",
                "description": "The slug name of the page whose settings sections you want to output.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "do_shortcode": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "do_shortcode",
        "summary": "Search content for shortcodes and filter shortcodes through their hooks.",
        "description": "<p>If there are no shortcode tags defined, then the content will be returned without any filtering. This might cause issues when plugins are disabled but the shortcode will still show up in the post or content.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to search for shortcodes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "ignore_html": {
                "label": "ignore_html",
                "description": "When true, shortcodes inside HTML elements will be skipped.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with shortcodes filtered out.",
        "rank": 0
    },
    "do_shortcodes_in_html_tags": {
        "since": "4.2.3",
        "group": "Shortcodes",
        "type": "efct",
        "name": "do_shortcodes_in_html_tags",
        "summary": "Search only inside HTML elements for shortcodes and process them.",
        "description": "<p>Any [ or ] characters remaining inside elements will be HTML encoded to prevent interference with shortcodes that are outside the elements. Assumes $content processed by KSES already. Users with unfiltered_html capability may get unexpected output if angle braces are nested in tags.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to search for shortcodes",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "ignore_html": {
                "label": "ignore_html",
                "description": "When true, all square braces inside elements will be encoded.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "tagnames": {
                "label": "tagnames",
                "description": "List of shortcodes to find.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with shortcodes filtered out.",
        "rank": 0
    },
    "do_trackbacks": {
        "since": "1.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "do_trackbacks",
        "summary": "Perform trackbacks.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post object or ID to do trackbacks on.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "doing_action": {
        "since": "3.9.0",
        "group": "Plugin",
        "type": "efct",
        "name": "doing_action",
        "summary": "Retrieve the name of an action currently being processed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to check. Defaults to null, which checks if any action is currently being run.",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the action is currently in the stack.",
        "rank": 0
    },
    "doing_filter": {
        "since": "3.9.0",
        "group": "Plugin",
        "type": "efct",
        "name": "doing_filter",
        "summary": "Retrieve the name of a filter currently being processed.",
        "description": "<p>The function current_filter() only returns the most recent filter or action being executed. did_action() returns true once the action is initially processed.<\/p> <p>This function allows detection for any filter currently being executed (despite not being the most recent filter to fire, in the case of hooks called from hook callbacks) to be verified.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "Filter to check. Defaults to null, which checks if any filter is currently being run.",
                "type": "null",
                "types": [
                    "null",
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the filter is currently in the stack.",
        "rank": 0
    },
    "domain_exists": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "domain_exists",
        "summary": "Checks whether a site name is already taken.",
        "description": "<p>The name is the site's subdomain or the site's subdirectory path depending on the network settings.<\/p> <p>Used during the new site registration process to ensure that each site name is unique.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The domain to be checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The path to be checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "network_id": {
                "label": "network_id",
                "description": "Network ID. Relevant only on multi-network installations.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "null"
        ],
        "return_description": "The site ID if the site name exists, null otherwise.",
        "rank": 0
    },
    "download_url": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "download_url",
        "summary": "Downloads a URL to a local temporary file using the WordPress HTTP API.",
        "description": "<p>Please note that the calling function must unlink() the file.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL of the file to download.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "timeout": {
                "label": "timeout",
                "description": "The timeout for the request to download the file. Default 300 seconds.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "300",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "Filename on success, WP_Error on failure.",
        "rank": 0
    },
    "drop_index": {
        "since": "1.0.1",
        "group": "Administration",
        "type": "efct",
        "name": "drop_index",
        "summary": "Drops a specified index from a table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table": {
                "label": "table",
                "description": "Database table name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "index": {
                "label": "index",
                "description": "Index name to drop.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True, when finished.",
        "rank": 0
    },
    "dynamic_sidebar": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "dynamic_sidebar",
        "summary": "Display dynamic sidebar.",
        "description": "<p>By default this displays the default sidebar or 'sidebar-1'. If your theme specifies the 'id' or 'name' parameter for its registered sidebars you can pass an id or name as the $index parameter. Otherwise, you can pass in a numerical index to display the sidebar at that index.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "index": {
                "label": "index",
                "description": "Index, name or ID of dynamic sidebar.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if widget sidebar was found and called. False if not found or not called.",
        "rank": 0
    },
    "edit_bookmark_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "edit_bookmark_link",
        "summary": "Displays the edit bookmark link anchor content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Anchor text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "bookmark": {
                "label": "bookmark",
                "description": "Bookmark ID. Default is the current bookmark.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "edit_comment_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "edit_comment_link",
        "summary": "Displays the edit comment link with formatting.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Anchor text. If null, default is 'Edit This'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "edit_form_image_editor": {
        "since": "3.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "edit_form_image_editor",
        "summary": "Displays the image and editor in the post editor",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "A post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "edit_link": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "edit_link",
        "summary": "Updates or inserts a link using values provided in $_POST.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link_id": {
                "label": "link_id",
                "description": "ID of the link to edit. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Value 0 or WP_Error on failure. The link ID on success.",
        "rank": 0
    },
    "edit_post": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "edit_post",
        "summary": "Update an existing post with values provided in $_POST.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Post ID.",
        "rank": 0
    },
    "edit_post_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "edit_post_link",
        "summary": "Displays the edit post link for post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Anchor text. If null, default is 'Edit This'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "Add custom class to link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post-edit-link'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "edit_tag_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "edit_tag_link",
        "summary": "Displays or retrieves the edit link for a tag with formatting.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Anchor text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Term object. If null, the queried object will be inspected.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "edit_term_link": {
        "since": "3.1.0",
        "group": "Template",
        "type": "efct",
        "name": "edit_term_link",
        "summary": "Displays or retrieves the edit term link with formatting.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Anchor text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after edit link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term object. If null, the queried object will be inspected.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": "null",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether or not to echo the return.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML content.",
        "rank": 0
    },
    "edit_user": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "edit_user",
        "summary": "Edit user settings based on contents of $_POST",
        "description": "<p>Used on user-edit.php and profile.php to manage and process user options, passwords etc.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "user id of the updated user.",
        "rank": 0
    },
    "email_exists": {
        "since": "2.1.0",
        "group": "Users",
        "type": "efct",
        "name": "email_exists",
        "summary": "Determines whether the given email exists.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email": {
                "label": "email",
                "description": "Email.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "The user's ID on success, and false on failure.",
        "rank": 0
    },
    "ent2ncr": {
        "since": "1.5.1",
        "group": "WordPress",
        "type": "efct",
        "name": "ent2ncr",
        "summary": "Converts named entities into numbered entities.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text within which entities will be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Text with converted entities.",
        "rank": 0
    },
    "esc_attr": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_attr",
        "summary": "Escaping for HTML attributes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "esc_attr__": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_attr__",
        "summary": "Retrieve the translation of $text and escapes it for safe use in an attribute.",
        "description": "<p>If there is no translation, or the text domain isn't loaded, the original text is returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text on success, original text on failure.",
        "rank": 0
    },
    "esc_attr_e": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_attr_e",
        "summary": "Display translated text that has been escaped for safe use in an attribute.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "esc_attr_x": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_attr_x",
        "summary": "Translate string with gettext context, and escapes it for safe use in an attribute.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text",
        "rank": 0
    },
    "esc_html": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_html",
        "summary": "Escaping for HTML blocks.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "esc_html__": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_html__",
        "summary": "Retrieve the translation of $text and escapes it for safe use in HTML output.",
        "description": "<p>If there is no translation, or the text domain isn't loaded, the original text is escaped and returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text",
        "rank": 0
    },
    "esc_html_e": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_html_e",
        "summary": "Display translated text that has been escaped for safe use in HTML output.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "esc_html_x": {
        "since": "2.9.0",
        "group": "i18n",
        "type": "efct",
        "name": "esc_html_x",
        "summary": "Translate string with gettext context, and escapes it for safe use in HTML output.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text.",
        "rank": 0
    },
    "esc_js": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_js",
        "summary": "Escape single quotes, htmlspecialchar \" < > &, and fix line endings.",
        "description": "<p>Escapes text strings for echoing in JS. It is intended to be used for inline JS (in a tag attribute, for example onclick=&quot;...&quot;). Note that the strings have to be in single quotes. The {@see 'js_escape'} filter is also applied here.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text to be escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Escaped text.",
        "rank": 0
    },
    "esc_sql": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_sql",
        "summary": "Escapes data for use in a MySQL query.",
        "description": "<p>Usually you should prepare queries using wpdb::prepare(). Sometimes, spot-escaping is required or useful. One example is preparing an array for use in an IN clause.<\/p> <p>NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string, this prevents certain SQLi attacks from taking place. This change in behaviour may cause issues for code that expects the return value of esc_sql() to be useable for other purposes.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Unescaped data",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Escaped data",
        "rank": 0
    },
    "esc_textarea": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_textarea",
        "summary": "Escaping for textarea values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "esc_url": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_url",
        "summary": "Checks and cleans a URL.",
        "description": "<p>A number of characters are removed from the URL. If the URL is for displaying (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter is applied to the returned cleaned URL.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL to be cleaned.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "protocols": {
                "label": "protocols",
                "description": "An array of acceptable protocols. Defaults to return value of wp_allowed_protocols()",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            },
            "_context": {
                "label": "_context",
                "description": "Private. Use esc_url_raw() for database usage.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The cleaned $url after the {@see 'clean_url'} filter is applied.",
        "rank": 0
    },
    "esc_url_raw": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "esc_url_raw",
        "summary": "Performs esc_url() for database usage.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL to be cleaned.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "protocols": {
                "label": "protocols",
                "description": "An array of acceptable protocols.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The cleaned URL.",
        "rank": 0
    },
    "excerpt_remove_blocks": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "excerpt_remove_blocks",
        "summary": "Parses blocks out of a content string, and renders those appropriate for the excerpt.",
        "description": "<p>As the excerpt should be a small string of text relevant to the full post content, this function renders the blocks that are most likely to contain such text.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The content to parse.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The parsed and filtered content.",
        "rank": 0
    },
    "export_date_options": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "export_date_options",
        "summary": "Create the date options fields for exporting a given post type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "export_wp": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "export_wp",
        "summary": "Generates the WXR export file for download.",
        "description": "<p>Default behavior is to export all content, however, note that post content will only be exported for post types with the can_export argument enabled. Any posts with the 'auto-draft' status will be skipped.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments for generating the WXR export file for download. <ul><li><b>'content'<\/b><br\/><i>(string)<\/i> Type of content to export. If set, only the post content of this post type will be exported. Accepts 'all', 'post', 'page', 'attachment', or a defined custom post. If an invalid custom post type is supplied, every post type for which can_export is enabled will be exported instead. If a valid custom post type is supplied but can_export is disabled, then 'posts' will be exported instead. When 'all' is supplied, only post types with can_export enabled will be exported. Default 'all'.<\/li> <li><b>'author'<\/b><br\/><i>(string)<\/i> Author to export content for. Only used when $content is 'post', 'page', or 'attachment'. Accepts false (all) or a specific author ID. Default false (all).<\/li> <li><b>'category'<\/b><br\/><i>(string)<\/i> Category (slug) to export content for. Used only when $content is 'post'. If set, only post content assigned to $category will be exported. Accepts false or a specific category slug. Default is false (all categories).<\/li> <li><b>'start_date'<\/b><br\/><i>(string)<\/i> Start date to export content from. Expected date format is 'Y-m-d'. Used only when $content is 'post', 'page' or 'attachment'. Default false (since the beginning of time).<\/li> <li><b>'end_date'<\/b><br\/><i>(string)<\/i> End date to export content to. Expected date format is 'Y-m-d'. Used only when $content is 'post', 'page' or 'attachment'. Default false (latest publish date).<\/li> <li><b>'status'<\/b><br\/><i>(string)<\/i> Post status to export posts for. Used only when $content is 'post' or 'page'. Accepts false (all statuses except 'auto-draft'), or a specific status, i.e. 'publish', 'pending', 'draft', 'auto-draft', 'future', 'private', 'inherit', or 'trash'. Default false (all statuses except 'auto-draft').<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "extract_from_markers": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "extract_from_markers",
        "summary": "Extracts strings from between the BEGIN and END markers in the .htaccess file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "marker": {
                "label": "marker",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of strings from a file (.htaccess ) from between BEGIN and END markers.",
        "rank": 0
    },
    "feed_content_type": {
        "since": "2.8.0",
        "group": "Feed",
        "type": "efct",
        "name": "feed_content_type",
        "summary": "Return the content type for specified feed type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "feed_links": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "feed_links",
        "summary": "Display the links to the general feeds.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "feed_links_extra": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "feed_links_extra",
        "summary": "Display the links to the extra feeds such as category feeds.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "fetch_feed": {
        "since": "2.8.0",
        "group": "Feed",
        "type": "efct",
        "name": "fetch_feed",
        "summary": "Build SimplePie object based on RSS or Atom feed from URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL of feed to retrieve. If an array of URLs, the feeds are merged using SimplePie's multifeed feature. See also http:\/\/simplepie.org\/wiki\/faq\/typical_multifeed_gotchas",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "SimplePie"
        ],
        "return_description": "WP_Error object on failure or SimplePie object on success",
        "rank": 0
    },
    "fetch_rss": {
        "since": "1.5.0",
        "group": "External",
        "type": "efct",
        "name": "fetch_rss",
        "summary": "Build Magpie object based on RSS from URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL to retrieve feed",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "MagpieRSS"
        ],
        "return_description": "false on failure or MagpieRSS object on success.",
        "rank": 0
    },
    "file_is_displayable_image": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "file_is_displayable_image",
        "summary": "Validate that file is suitable for displaying within a web page.",
        "description": "",
        "inputs": {
            "path": {
                "label": "path",
                "description": "File path to test.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if suitable, false if not suitable.",
        "rank": 0
    },
    "file_is_valid_image": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "file_is_valid_image",
        "summary": "Validate that file is an image.",
        "description": "",
        "inputs": {
            "path": {
                "label": "path",
                "description": "File path to test if valid image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if valid image, false if not valid image.",
        "rank": 0
    },
    "filter_SSL": {
        "since": "2.8.5",
        "group": "Multisite",
        "type": "efct",
        "name": "filter_SSL",
        "summary": "Formats a URL to use https.",
        "description": "<p>Useful as a filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL with https as the scheme",
        "rank": 0
    },
    "filter_default_option": {
        "since": "4.7.0",
        "group": "Option",
        "type": "efct",
        "name": "filter_default_option",
        "summary": "Filter the default value for the option.",
        "description": "<p>For settings which register a default setting in register_setting(), this function is added as a filter to default_option_{$option}.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "default": {
                "label": "default",
                "description": "Existing default value to return.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "passed_default": {
                "label": "passed_default",
                "description": "Was get_option() passed a default value?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Filtered default value.",
        "rank": 0
    },
    "find_core_auto_update": {
        "since": "3.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "find_core_auto_update",
        "summary": "Gets the best available (and enabled) Auto-Update for WordPress Core.",
        "description": "<p>If there's 1.2.3 and 1.3 on offer, it'll choose 1.3 if the installation allows it, else, 1.2.3<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "False on failure, otherwise the core update offering.",
        "rank": 0
    },
    "find_core_update": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "find_core_update",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "version": {
                "label": "version",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "locale": {
                "label": "locale",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "false"
        ],
        "return_description": "",
        "rank": 0
    },
    "find_posts_div": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "find_posts_div",
        "summary": "Outputs the modal window used for attaching media to posts or pages in the media-listing screen.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "found_action": {
                "label": "found_action",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "fix_import_form_size": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "fix_import_form_size",
        "summary": "Get the remaining upload space for this site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Current max size in bytes",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Max size in bytes",
        "rank": 0
    },
    "fix_phpmailer_messageid": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "fix_phpmailer_messageid",
        "summary": "Correct From host on outgoing mail to match the site domain",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "phpmailer": {
                "label": "phpmailer",
                "description": "The PHPMailer instance (passed by reference).",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "floated_admin_avatar": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "floated_admin_avatar",
        "summary": "Add avatars to relevant places in admin, or try to.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "User name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Avatar with Admin name.",
        "rank": 0
    },
    "flush_rewrite_rules": {
        "since": "3.0.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "flush_rewrite_rules",
        "summary": "Remove rewrite rules and then recreate rewrite rules.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hard": {
                "label": "hard",
                "description": "Whether to update .htaccess (hard flush) or just update rewrite_rules transient (soft flush). Default is true (hard).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "force_balance_tags": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "force_balance_tags",
        "summary": "Balances tags of string using a modified stack.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to be balanced.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Balanced text.",
        "rank": 0
    },
    "force_ssl_admin": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "force_ssl_admin",
        "summary": "Whether to force SSL used for the Administration Screens.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "force": {
                "label": "force",
                "description": "Whether to force SSL in admin screens.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if forced, false if not forced.",
        "rank": 0
    },
    "force_ssl_content": {
        "since": "2.8.5",
        "group": "Multisite",
        "type": "efct",
        "name": "force_ssl_content",
        "summary": "Whether to force SSL on content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "force": {
                "label": "force",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if forced, false if not forced.",
        "rank": 0
    },
    "form_option": {
        "since": "1.5.0",
        "group": "Option",
        "type": "efct",
        "name": "form_option",
        "summary": "Print option value after sanitizing for forms.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "format_code_lang": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "format_code_lang",
        "summary": "Returns the language for a language code.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "code": {
                "label": "code",
                "description": "The two-letter language code.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The language corresponding to $code if it exists. If it does not exist,                then the first two letters of $code is returned.",
        "rank": 0
    },
    "format_for_editor": {
        "since": "4.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "format_for_editor",
        "summary": "Formats text for the editor.",
        "description": "<p>Generally the browsers treat everything inside a textarea as text, but it is still a good idea to HTML entity encode &lt;, &gt; and &amp; in the content.<\/p> <p>The filter {@see 'format_for_editor'} is applied here. If $text is empty the filter will be applied to an empty string.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text to be formatted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default_editor": {
                "label": "default_editor",
                "description": "The default editor for the current user. It is usually either 'html' or 'tinymce'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The formatted text after filter is applied.",
        "rank": 0
    },
    "format_to_edit": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "format_to_edit",
        "summary": "Acts on text which is about to be edited.",
        "description": "<p>The $content is run through esc_textarea(), which uses htmlspecialchars() to convert special characters to HTML entities. If $richedit is set to true, it is simply a holder for the {@see 'format_to_edit'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The text about to be edited.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "rich_text": {
                "label": "rich_text",
                "description": "Whether $content should be considered rich text, in which case it would not be passed through esc_textarea().",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The text after the filter (and possibly htmlspecialchars()) has been run.",
        "rank": 0
    },
    "gallery_shortcode": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "gallery_shortcode",
        "summary": "Builds the Gallery shortcode output.",
        "description": "<p>This implements the functionality of the Gallery Shortcode for displaying WordPress images on a post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes of the gallery shortcode. <ul><li><b>'order'<\/b><br\/><i>(string)<\/i> Order of the images in the gallery. Default 'ASC'. Accepts 'ASC', 'DESC'.<\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> The field to use when ordering the images. Default 'menu_order ID'. Accepts any valid SQL ORDERBY statement.<\/li> <li><b>'id'<\/b><br\/><i>(int)<\/i> Post ID.<\/li> <li><b>'itemtag'<\/b><br\/><i>(string)<\/i> HTML tag to use for each image in the gallery. Default 'dl', or 'figure' when the theme registers HTML5 gallery support.<\/li> <li><b>'icontag'<\/b><br\/><i>(string)<\/i> HTML tag to use for each image's icon. Default 'dt', or 'div' when the theme registers HTML5 gallery support.<\/li> <li><b>'captiontag'<\/b><br\/><i>(string)<\/i> HTML tag to use for each image's caption. Default 'dd', or 'figcaption' when the theme registers HTML5 gallery support.<\/li> <li><b>'columns'<\/b><br\/><i>(int)<\/i> Number of columns of images to display. Default 3.<\/li> <li><b>'size'<\/b><br\/><i>(string|array)<\/i> Size of the images to display. Accepts any valid image size, or an array of width and height values in pixels (in that order). Default 'thumbnail'.<\/li> <li><b>'ids'<\/b><br\/><i>(string)<\/i> A comma-separated list of IDs of attachments to display. Default empty.<\/li> <li><b>'include'<\/b><br\/><i>(string)<\/i> A comma-separated list of IDs of attachments to include. Default empty.<\/li> <li><b>'exclude'<\/b><br\/><i>(string)<\/i> A comma-separated list of IDs of attachments to exclude. Default empty.<\/li> <li><b>'link'<\/b><br\/><i>(string)<\/i> What to link each image to. Default empty (links to the attachment page). Accepts 'file', 'none'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content to display gallery.",
        "rank": 0
    },
    "generic_ping": {
        "since": "1.2.0",
        "group": "Comment",
        "type": "efct",
        "name": "generic_ping",
        "summary": "Sends pings to all of the ping site services.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Same as Post ID from parameter",
        "rank": 0
    },
    "get_404_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_404_template",
        "summary": "Retrieve path of 404 template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is '404'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to 404 template file.",
        "rank": 0
    },
    "get_active_blog_for_user": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_active_blog_for_user",
        "summary": "Get one of a user's active blogs",
        "description": "<p>Returns the user's primary blog, if they have one and it is active. If it's inactive, function returns another active blog of the user. If none are found, the user is added as a Subscriber to the Dashboard Blog and that blog is returned.<\/p>",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "The unique ID of the user",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Site",
            "void"
        ],
        "return_description": "The blog object",
        "rank": 0
    },
    "get_adjacent_post": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_adjacent_post",
        "summary": "Retrieves the adjacent post.",
        "description": "<p>Can either be next or previous post.<\/p>",
        "inputs": {
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether post should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "previous": {
                "label": "previous",
                "description": "Whether to retrieve previous post. Default true",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "string",
            "WP_Post"
        ],
        "return_description": "Post object if successful. Null if global $post is not set. Empty string if no                             corresponding post exists.",
        "rank": 0
    },
    "get_adjacent_post_link": {
        "since": "3.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_adjacent_post_link",
        "summary": "Retrieves the adjacent post link.",
        "description": "<p>Can be either next post link or previous.<\/p>",
        "inputs": {
            "format": {
                "label": "format",
                "description": "Link anchor format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "link": {
                "label": "link",
                "description": "Link permalink format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded terms IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "previous": {
                "label": "previous",
                "description": "Whether to display link to previous or next post.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The link URL of the previous or next post in relation to the current post.",
        "rank": 0
    },
    "get_adjacent_post_rel_link": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_adjacent_post_rel_link",
        "summary": "Retrieves the adjacent post relational link.",
        "description": "<p>Can either be next or previous post relational link.<\/p>",
        "inputs": {
            "title": {
                "label": "title",
                "description": "Link title format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "previous": {
                "label": "previous",
                "description": "Whether to display link to previous or next post.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The adjacent post relational link URL.",
        "rank": 0
    },
    "get_admin_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_admin_url",
        "summary": "Retrieves the URL to the admin area for a given site.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID. Default null (current site).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the admin URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Accepts 'http' or 'https', to force those schemes. Default 'admin', which obeys force_ssl_admin() and is_ssl().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Admin URL link with optional path appended.",
        "rank": 0
    },
    "get_all_page_ids": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_all_page_ids",
        "summary": "Get a list of page IDs.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of page IDs.",
        "rank": 0
    },
    "get_all_post_type_supports": {
        "since": "3.4.0",
        "group": "Post",
        "type": "fct",
        "name": "get_all_post_type_supports",
        "summary": "Get all the post type features",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "The post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Post type supports list.",
        "rank": 0
    },
    "get_all_user_settings": {
        "since": "2.7.0",
        "group": "Option",
        "type": "fct",
        "name": "get_all_user_settings",
        "summary": "Retrieve all user interface settings.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "the last saved user settings or empty array.",
        "rank": 0
    },
    "get_alloptions_110": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_alloptions_110",
        "summary": "Retrieve all options as it was for 1.2.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "stdClass",
                "label": "stdClass"
            }
        },
        "return": [
            "stdClass"
        ],
        "return_description": "List of options.",
        "rank": 0
    },
    "get_allowed_http_origins": {
        "since": "3.4.0",
        "group": "HTTP",
        "type": "fct",
        "name": "get_allowed_http_origins",
        "summary": "Retrieve list of allowed HTTP origins.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of origin URLs.",
        "rank": 0
    },
    "get_allowed_mime_types": {
        "since": "2.8.6",
        "group": "WordPress",
        "type": "fct",
        "name": "get_allowed_mime_types",
        "summary": "Retrieve list of allowed mime types and file extensions.",
        "description": "",
        "inputs": {
            "user": {
                "label": "user",
                "description": "User to check. Defaults to current user.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of mime types keyed by the file extension regex corresponding               to those types.",
        "rank": 0
    },
    "get_ancestors": {
        "since": "3.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_ancestors",
        "summary": "Get an array of ancestor IDs for a given object.",
        "description": "",
        "inputs": {
            "object_id": {
                "label": "object_id",
                "description": "The ID of the object. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "The type of object for which we'll be retrieving ancestors. Accepts a post type or a taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "resource_type": {
                "label": "resource_type",
                "description": "Type of resource $object_type is. Accepts 'post_type' or 'taxonomy'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of ancestors from lowest to highest in the hierarchy.",
        "rank": 0
    },
    "get_approved_comments": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_approved_comments",
        "summary": "Retrieve the approved comments for post $post_id.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "The ID of the post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "See WP_Comment_Query::__construct() for information on accepted arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "array"
        ],
        "return_description": "$comments The approved comments, or number of comments if <code>$count<\/code>                             argument is true.",
        "rank": 0
    },
    "get_archive_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_archive_template",
        "summary": "Retrieve path of archive template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'archive'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to archive template file.",
        "rank": 0
    },
    "get_archives_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_archives_link",
        "summary": "Retrieve archive link content based on predefined or custom code.",
        "description": "<p>The format can be one of four styles. The 'link' for head element, 'option' for use in the select element, 'html' for use in list (either ol or ul HTML elements). Custom content is also supported using the before and after parameters.<\/p> <p>The 'link' format uses the &lt;link&gt; HTML element with the <strong>archives<\/strong> relationship. The before and after parameters are not used. The text parameter is used to describe the link.<\/p> <p>The 'option' format uses the option HTML element for use in select element. The value is the url parameter and the before and after parameters are used between the text description.<\/p> <p>The 'html' format, which is the default, uses the li HTML element for use in the list HTML elements. The before parameter is before the link and the after parameter is after the closing link.<\/p> <p>The custom format uses the before parameter before the link ('a' HTML element) and the after parameter after the closing link tag. If the above three values for the format are not used, then custom format is assumed.<\/p>",
        "inputs": {
            "url": {
                "label": "url",
                "description": "URL to archive.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "text": {
                "label": "text",
                "description": "Archive text description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "format": {
                "label": "format",
                "description": "Can be 'link', 'option', 'html', or custom.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'html'",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Content to prepend to the description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Content to append to the description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML link content for archive.",
        "rank": 0
    },
    "get_attached_file": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_attached_file",
        "summary": "Retrieve attached file path based on attachment ID.",
        "description": "<p>By default the path will go through the 'get_attached_file' filter, but passing a true to the $unfiltered argument of get_attached_file() will return the file path unfiltered.<\/p> <p>The function works by getting the single post meta name, named '_wp_attached_file' and returning it. This is a convenience function to prevent looking up the meta name and provide a mechanism for sending the attached filename through a filter.<\/p>",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "unfiltered": {
                "label": "unfiltered",
                "description": "Whether to apply filters.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The file path to where the attached file should be, false otherwise.",
        "rank": 0
    },
    "get_attached_media": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_attached_media",
        "summary": "Retrieves media attached to the passed post.",
        "description": "",
        "inputs": {
            "type": {
                "label": "type",
                "description": "Mime type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Found attachments.",
        "rank": 0
    },
    "get_attachment_fields_to_edit": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_attachment_fields_to_edit",
        "summary": "Retrieves the attachment fields to edit form fields.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_attachment_link": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_attachment_link",
        "summary": "Retrieves the permalink for an attachment.",
        "description": "<p>This can be used in the WordPress Loop or outside of it.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object. Default uses the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": "null",
                "required": false
            },
            "leavename": {
                "label": "leavename",
                "description": "Whether to keep the page name.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The attachment permalink.",
        "rank": 0
    },
    "get_attachment_taxonomies": {
        "since": "2.5.0",
        "group": "Media",
        "type": "fct",
        "name": "get_attachment_taxonomies",
        "summary": "Retrieves taxonomies attached to given the attachment.",
        "description": "",
        "inputs": {
            "attachment": {
                "label": "attachment",
                "description": "Attachment ID, data array, or data object.",
                "type": "int",
                "types": [
                    "int",
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "Output type. 'names' to return an array of taxonomy names, or 'objects' to return an array of taxonomy objects. Default is 'names'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Empty array on failure. List of taxonomies on success.",
        "rank": 0
    },
    "get_attachment_template": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_attachment_template",
        "summary": "Retrieve path of attachment template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>{mime_type}-{sub_type}.php<\/li> <li>{sub_type}.php<\/li> <li>{mime_type}.php<\/li> <li>attachment.php<\/li> <p>An example of this is:<\/p> <li>image-jpeg.php<\/li> <li>jpeg.php<\/li> <li>image.php<\/li> <li>attachment.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'attachment'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to attachment template file.",
        "rank": 0
    },
    "get_author_feed_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_author_feed_link",
        "summary": "Retrieves the feed link for a given author.",
        "description": "<p>Returns a link to the feed for all posts by a given author. A specific feed can be requested or left blank to get the default feed.<\/p>",
        "inputs": {
            "author_id": {
                "label": "author_id",
                "description": "Author ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Link to the feed for the author specified by $author_id.",
        "rank": 0
    },
    "get_author_posts_url": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_author_posts_url",
        "summary": "Retrieve the URL to the author page for the user with the ID provided.",
        "description": "",
        "inputs": {
            "author_id": {
                "label": "author_id",
                "description": "Author ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "author_nicename": {
                "label": "author_nicename",
                "description": "The author's nicename (slug).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The URL to the author's page.",
        "rank": 0
    },
    "get_author_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_author_template",
        "summary": "Retrieve path of author template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>author-{nicename}.php<\/li> <li>author-{id}.php<\/li> <li>author.php<\/li> <p>An example of this is:<\/p> <li>author-john.php<\/li> <li>author-1.php<\/li> <li>author.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'author'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to author template file.",
        "rank": 0
    },
    "get_available_languages": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "fct",
        "name": "get_available_languages",
        "summary": "Get all available languages based on the presence of *.mo files in a given directory.",
        "description": "<p>The default directory is WP_LANG_DIR.<\/p>",
        "inputs": {
            "dir": {
                "label": "dir",
                "description": "A directory to search for language files. Default WP_LANG_DIR.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of language codes or an empty array if no languages are present. Language codes are formed by stripping the .mo extension from the language file names.",
        "rank": 0
    },
    "get_available_post_mime_types": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_available_post_mime_types",
        "summary": "Get all available post MIME types for a given post type.",
        "description": "",
        "inputs": {
            "type": {
                "label": "type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'attachment'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_available_post_statuses": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_available_post_statuses",
        "summary": "Get all the possible statuses for a post_type",
        "description": "",
        "inputs": {
            "type": {
                "label": "type",
                "description": "The post_type you want the statuses for",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "As array of all the statuses for the supplied post type",
        "rank": 0
    },
    "get_avatar": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_avatar",
        "summary": "Retrieve the avatar `` tag for a user, email address, MD5 hash, comment, or post.",
        "description": "",
        "inputs": {
            "id_or_email": {
                "label": "id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Height and width of the avatar image file in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "96",
                "required": false
            },
            "default": {
                "label": "default",
                "description": "URL for the default image or a default type. Accepts '404' (return a 404 instead of a default image), 'retro' (8bit), 'monsterid' (monster), 'wavatar' (cartoon face), 'indenticon' (the &quot;quilt&quot;), 'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF), or 'gravatar_default' (the Gravatar logo). Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "alt": {
                "label": "alt",
                "description": "Alternative text to use in &lt;img&gt; tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Extra arguments to retrieve the avatar. <ul><li><b>'height'<\/b><br\/><i>(int)<\/i> Display height of the avatar in pixels. Defaults to $size.<\/li> <li><b>'width'<\/b><br\/><i>(int)<\/i> Display width of the avatar in pixels. Defaults to $size.<\/li> <li><b>'force_default'<\/b><br\/><i>(bool)<\/i> Whether to always show the default image, never the Gravatar. Default false.<\/li> <li><b>'rating'<\/b><br\/><i>(string)<\/i> What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option.<\/li> <li><b>'scheme'<\/b><br\/><i>(string)<\/i> URL scheme to use. See set_url_scheme() for accepted values. <\/li> <li><b>'class'<\/b><br\/><i>(array|string)<\/i> Array or string of additional classes to add to the &lt;img&gt; element. <\/li> <li><b>'force_display'<\/b><br\/><i>(bool)<\/i> Whether to always show the avatar - ignores the show_avatars option. Default false.<\/li> <li><b>'extra_attr'<\/b><br\/><i>(string)<\/i> HTML attributes to insert in the IMG element. Is not sanitized. Default empty.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "<code>&lt;img&gt;<\/code> tag for the user's avatar. False on failure.",
        "rank": 0
    },
    "get_avatar_data": {
        "since": "4.2.0",
        "group": "Template",
        "type": "fct",
        "name": "get_avatar_data",
        "summary": "Retrieves default data about the avatar.",
        "description": "",
        "inputs": {
            "id_or_email": {
                "label": "id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments to return instead of the default arguments. <ul><li><b>'size'<\/b><br\/><i>(int)<\/i> Height and width of the avatar image file in pixels. Default 96.<\/li> <li><b>'height'<\/b><br\/><i>(int)<\/i> Display height of the avatar in pixels. Defaults to $size.<\/li> <li><b>'width'<\/b><br\/><i>(int)<\/i> Display width of the avatar in pixels. Defaults to $size.<\/li> <li><b>'default'<\/b><br\/><i>(string)<\/i> URL for the default image or a default type. Accepts '404' (return a 404 instead of a default image), 'retro' (8bit), 'monsterid' (monster), 'wavatar' (cartoon face), 'indenticon' (the &quot;quilt&quot;), 'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF), or 'gravatar_default' (the Gravatar logo). Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.<\/li> <li><b>'force_default'<\/b><br\/><i>(bool)<\/i> Whether to always show the default image, never the Gravatar. Default false.<\/li> <li><b>'rating'<\/b><br\/><i>(string)<\/i> What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option.<\/li> <li><b>'scheme'<\/b><br\/><i>(string)<\/i> URL scheme to use. See set_url_scheme() for accepted values. <\/li> <li><b>'processed_args'<\/b><br\/><i>(array)<\/i> When the function returns, the value will be the processed\/sanitized $args plus a &quot;found_avatar&quot; guess. Pass as a reference. <\/li> <li><b>'extra_attr'<\/b><br\/><i>(string)<\/i> HTML attributes to insert in the IMG element. Is not sanitized. Default empty.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$processed_args {     Along with the arguments passed in <code>$args<\/code>, this will contain a couple of extra arguments.     @type bool   $found_avatar True if we were able to find an avatar for this user,                                false or not set if we couldn't.     @type string $url          The URL of the avatar we found. }",
        "rank": 0
    },
    "get_avatar_url": {
        "since": "4.2.0",
        "group": "Template",
        "type": "fct",
        "name": "get_avatar_url",
        "summary": "Retrieves the avatar URL.",
        "description": "",
        "inputs": {
            "id_or_email": {
                "label": "id_or_email",
                "description": "The Gravatar to retrieve a URL for. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments to return instead of the default arguments. <ul><li><b>'size'<\/b><br\/><i>(int)<\/i> Height and width of the avatar in pixels. Default 96.<\/li> <li><b>'default'<\/b><br\/><i>(string)<\/i> URL for the default image or a default type. Accepts '404' (return a 404 instead of a default image), 'retro' (8bit), 'monsterid' (monster), 'wavatar' (cartoon face), 'indenticon' (the &quot;quilt&quot;), 'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF), or 'gravatar_default' (the Gravatar logo). Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.<\/li> <li><b>'force_default'<\/b><br\/><i>(bool)<\/i> Whether to always show the default image, never the Gravatar. Default false.<\/li> <li><b>'rating'<\/b><br\/><i>(string)<\/i> What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option.<\/li> <li><b>'scheme'<\/b><br\/><i>(string)<\/i> URL scheme to use. See set_url_scheme() for accepted values. <\/li> <li><b>'processed_args'<\/b><br\/><i>(array)<\/i> When the function returns, the value will be the processed\/sanitized $args plus a &quot;found_avatar&quot; guess. Pass as a reference. <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The URL of the avatar we found, or false if we couldn't find an avatar.",
        "rank": 0
    },
    "get_background_color": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_background_color",
        "summary": "Retrieve value for custom background color.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_background_image": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_background_image",
        "summary": "Retrieve background image for custom background.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_block_categories": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_block_categories",
        "summary": "Returns all the block categories that will be shown in the block editor.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of block categories.",
        "rank": 0
    },
    "get_block_editor_server_block_settings": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_block_editor_server_block_settings",
        "summary": "Prepares server-registered blocks for the block editor.",
        "description": "<p>Returns an associative array of registered block data keyed by block name. Data includes properties of a block relevant for client registration.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An associative array of registered block data.",
        "rank": 0
    },
    "get_blog_count": {
        "since": "3.7.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_count",
        "summary": "The number of active sites on your installation.",
        "description": "<p>The count is cached and updated twice daily. This is not a live count.<\/p>",
        "inputs": {
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Number of active sites on the network.",
        "rank": 0
    },
    "get_blog_details": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_details",
        "summary": "Retrieve the details for a blog from the blogs table and blog options.",
        "description": "",
        "inputs": {
            "fields": {
                "label": "fields",
                "description": "A blog ID, a blog slug, or an array of fields to query against. If not specified the current blog ID is used.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": "null",
                "required": false
            },
            "get_all": {
                "label": "get_all",
                "description": "Whether to retrieve all details or only the details in the blogs table. Default is true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Site",
            "false"
        ],
        "return_description": "Blog details on success. False on failure.",
        "rank": 0
    },
    "get_blog_id_from_url": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_id_from_url",
        "summary": "Get a blog's numeric ID from its URL.",
        "description": "<p>On a subdirectory installation like example.com\/blog1\/, $domain will be the root 'example.com' and $path the subdirectory '\/blog1\/'. With subdomains like blog1.example.com, $domain is 'blog1.example.com' and $path is '\/'.<\/p>",
        "inputs": {
            "domain": {
                "label": "domain",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Not required for subdomain installations.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'\/'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "0 if no blog found, otherwise the ID of the matching blog",
        "rank": 0
    },
    "get_blog_option": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_option",
        "summary": "Retrieve option value for a given blog id based on name of option.",
        "description": "<p>If the option does not exist or does not have a value, then the return value will be false. This is useful to check whether you need to install an option and is commonly used during installation of plugin options and to test whether upgrading is required.<\/p> <p>If the option was serialized then it will be unserialized when it is returned.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "A blog ID. Can be null to refer to the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to retrieve. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "Default value to return if the option does not exist.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value set for the option.",
        "rank": 0
    },
    "get_blog_permalink": {
        "since": "MU (3.0.0) 1.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_permalink",
        "summary": "Get the permalink for a post on another blog.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the source blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "ID of the desired post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The post's permalink",
        "rank": 0
    },
    "get_blog_post": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_post",
        "summary": "Get a blog post from any site on the network.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "ID of the post you're looking for.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "null"
        ],
        "return_description": "WP_Post on success or null on failure",
        "rank": 0
    },
    "get_blog_status": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blog_status",
        "summary": "Get a blog details field.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "The blog id",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "pref": {
                "label": "pref",
                "description": "A field name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "string",
            "null"
        ],
        "return_description": "$value",
        "rank": 0
    },
    "get_blogaddress_by_id": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blogaddress_by_id",
        "summary": "Get a full blog URL, given a blog id.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Blog ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full URL of the blog if found. Empty string if not.",
        "rank": 0
    },
    "get_blogaddress_by_name": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_blogaddress_by_name",
        "summary": "Get a full blog URL, given a blog name.",
        "description": "",
        "inputs": {
            "blogname": {
                "label": "blogname",
                "description": "The (subdomain or directory) name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_bloginfo": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_bloginfo",
        "summary": "Retrieves information about the current site.",
        "description": "<p>Possible values for $show include:<\/p> <ul> <li>'name' - Site title (set in Settings &gt; General)<\/li> <li>'description' - Site tagline (set in Settings &gt; General)<\/li> <li>'wpurl' - The WordPress address (URL) (set in Settings &gt; General)<\/li> <li>'url' - The Site address (URL) (set in Settings &gt; General)<\/li> <li>'admin_email' - Admin email (set in Settings &gt; General)<\/li> <li>'charset' - The &quot;Encoding for pages and feeds&quot; (set in Settings &gt; Reading)<\/li> <li>'version' - The current WordPress version<\/li> <li>'html_type' - The content-type (default: &quot;text\/html&quot;). Themes and plugins can override the default value using the {@see 'pre_option_html_type'} filter<\/li> <li>'text_direction' - The text direction determined by the site's language. is_rtl() should be used instead<\/li> <li>'language' - Language code for the current site<\/li> <li>'stylesheet_url' - URL to the stylesheet for the active theme. An active child theme will take precedence over this value<\/li> <li>'stylesheet_directory' - Directory path for the active theme. An active child theme will take precedence over this value<\/li> <li>'template_url' \/ 'template_directory' - URL of the active theme's directory. An active child theme will NOT take precedence over this value<\/li> <li>'pingback_url' - The pingback XML-RPC file URL (xmlrpc.php)<\/li> <li>'atom_url' - The Atom feed URL (\/feed\/atom)<\/li> <li>'rdf_url' - The RDF\/RSS 1.0 feed URL (\/feed\/rdf)<\/li> <li>'rss_url' - The RSS 0.92 feed URL (\/feed\/rss)<\/li> <li>'rss2_url' - The RSS 2.0 feed URL (\/feed)<\/li> <li>'comments_atom_url' - The comments Atom feed URL (\/comments\/feed)<\/li> <li>'comments_rss2_url' - The comments RSS 2.0 feed URL (\/comments\/feed)<\/li> <\/ul> <p>Some $show values are deprecated and will be removed in future versions. These options will trigger the _deprecated_argument() function.<\/p> <p>Deprecated arguments include:<\/p> <ul> <li>'siteurl' - Use 'url' instead<\/li> <li>'home' - Use 'url' instead<\/li> <\/ul>",
        "inputs": {
            "show": {
                "label": "show",
                "description": "Site info to retrieve. Default empty (site name).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "How to filter what is retrieved.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Mostly string values, might be empty.",
        "rank": 0
    },
    "get_bloginfo_rss": {
        "since": "1.5.1",
        "group": "Feed",
        "type": "fct",
        "name": "get_bloginfo_rss",
        "summary": "RSS container for the bloginfo function.",
        "description": "<p>You can retrieve anything that you can using the get_bloginfo() function. Everything will be stripped of tags and characters converted, when the values are retrieved for use in the feeds.<\/p>",
        "inputs": {
            "show": {
                "label": "show",
                "description": "See get_bloginfo() for possible values.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_blogs_of_user": {
        "since": "3.0.0",
        "group": "Users",
        "type": "fct",
        "name": "get_blogs_of_user",
        "summary": "Get the sites a user belongs to.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "all": {
                "label": "all",
                "description": "Whether to retrieve all sites, or only sites that are not marked as deleted, archived, or spam.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of the user's sites. An empty array if the user doesn't exist               or belongs to no sites.",
        "rank": 0
    },
    "get_body_class": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_body_class",
        "summary": "Retrieves an array of the class names for the body element.",
        "description": "",
        "inputs": {
            "class": {
                "label": "class",
                "description": "Space-separated string or array of class names to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string[]",
                "label": "string[]"
            }
        },
        "return": [
            "string[]"
        ],
        "return_description": "Array of class names.",
        "rank": 0
    },
    "get_bookmark": {
        "since": "2.1.0",
        "group": "Bookmark",
        "type": "fct",
        "name": "get_bookmark",
        "summary": "Retrieve Bookmark data",
        "description": "",
        "inputs": {
            "bookmark": {
                "label": "bookmark",
                "description": "",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to an stdClass object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "object",
            "null"
        ],
        "return_description": "Type returned depends on $output value.",
        "rank": 0
    },
    "get_bookmark_field": {
        "since": "2.3.0",
        "group": "Bookmark",
        "type": "fct",
        "name": "get_bookmark_field",
        "summary": "Retrieve single bookmark data item or field.",
        "description": "",
        "inputs": {
            "field": {
                "label": "field",
                "description": "The name of the data field to return",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "bookmark": {
                "label": "bookmark",
                "description": "The bookmark ID to get field",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The context of how the field will be used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_bookmarks": {
        "since": "2.1.0",
        "group": "Bookmark",
        "type": "fct",
        "name": "get_bookmarks",
        "summary": "Retrieves the list of bookmarks",
        "description": "<p>Attempts to retrieve from the cache first based on MD5 hash of arguments. If that fails, then the query will be built from the arguments and executed. The results will be stored to the cache.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "String or array of arguments to retrieve bookmarks. <ul><li><b>'orderby'<\/b><br\/><i>(string)<\/i> How to order the links by. Accepts post fields. Default 'name'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Whether to order bookmarks in ascending or descending order. Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.<\/li> <li><b>'limit'<\/b><br\/><i>(int)<\/i> Amount of bookmarks to display. Accepts 1+ or -1 for all. Default -1.<\/li> <li><b>'category'<\/b><br\/><i>(string)<\/i> Comma-separated list of category ids to include links from. <\/li> <li><b>'category_name'<\/b><br\/><i>(string)<\/i> Category to retrieve links for by name. <\/li> <li><b>'hide_invisible'<\/b><br\/><i>(int|bool)<\/i> Whether to show or hide links marked as 'invisible'. Accepts 1|true or 0|false. Default 1|true.<\/li> <li><b>'show_updated'<\/b><br\/><i>(int|bool)<\/i> Whether to display the time the bookmark was last updated. Accepts 1|true or 0|false. Default 0|false.<\/li> <li><b>'include'<\/b><br\/><i>(string)<\/i> Comma-separated list of bookmark IDs to include. <\/li> <li><b>'exclude'<\/b><br\/><i>(string)<\/i> Comma-separated list of bookmark IDs to exclude. <\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of bookmark row objects.",
        "rank": 0
    },
    "get_boundary_post": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_boundary_post",
        "summary": "Retrieves the boundary post.",
        "description": "<p>Boundary being either the first or last post by publish date within the constraints specified by $in_same_term or $excluded_terms.<\/p>",
        "inputs": {
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether returned post should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "start": {
                "label": "start",
                "description": "Whether to retrieve first or last post. Default true",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "array"
        ],
        "return_description": "Array containing the boundary post object if successful, null otherwise.",
        "rank": 0
    },
    "get_calendar": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_calendar",
        "summary": "Display calendar with days that have posts as links.",
        "description": "<p>The calendar is cached, which will be retrieved, if it exists. If there are no posts for the month, then it will not be displayed.<\/p>",
        "inputs": {
            "initial": {
                "label": "initial",
                "description": "Use initial calendar names.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Set to false for return.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when retrieving.",
        "rank": 0
    },
    "get_cancel_comment_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_cancel_comment_reply_link",
        "summary": "Retrieve HTML content for cancel comment reply link.",
        "description": "",
        "inputs": {
            "text": {
                "label": "text",
                "description": "Text to display for cancel reply link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_cat_ID": {
        "since": "1.0.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_cat_ID",
        "summary": "Retrieve the ID of a category from its name.",
        "description": "",
        "inputs": {
            "cat_name": {
                "label": "cat_name",
                "description": "Category name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "0, if failure and ID of category on success.",
        "rank": 0
    },
    "get_cat_name": {
        "since": "1.0.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_cat_name",
        "summary": "Retrieve the name of a category from its ID.",
        "description": "",
        "inputs": {
            "cat_id": {
                "label": "cat_id",
                "description": "Category ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Category name, or an empty string if category doesn't exist.",
        "rank": 0
    },
    "get_categories": {
        "since": "2.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_categories",
        "summary": "Retrieve list of category objects.",
        "description": "<p>If you change the type to 'link' in the arguments, then the link categories will be returned instead. Also all categories will be updated to be backward compatible with pre-2.3 plugins and themes.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Arguments to retrieve categories. See get_terms() for additional options. <ul><li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy to retrieve terms for. In this case, default 'category'.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of categories.",
        "rank": 0
    },
    "get_category": {
        "since": "1.5.1",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_category",
        "summary": "Retrieves category data given a category ID or category object.",
        "description": "<p>If you pass the $category parameter an object, which is assumed to be the category row object retrieved the database. It will cache the category data.<\/p> <p>If you pass $category an integer of the category ID, then that category will be retrieved from the database, if it isn't already cached, and pass it back.<\/p> <p>If you look at get_term(), then both types will be passed through several filters and finally sanitized based on the $filter parameter value.<\/p> <p>The category will converted to maintain backward compatibility.<\/p>",
        "inputs": {
            "category": {
                "label": "category",
                "description": "Category ID or Category row object",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "Default is raw or no WordPress defined filter will applied.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array",
            "WP_Error",
            "null"
        ],
        "return_description": "Category data in type defined by $output parameter.                                    WP_Error if $category is empty, null if it does not exist.",
        "rank": 0
    },
    "get_category_by_path": {
        "since": "2.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_category_by_path",
        "summary": "Retrieve category based on URL containing the category slug.",
        "description": "<p>Breaks the $category_path parameter up to get the category slug.<\/p> <p>Tries to find the child path and will return it. If it doesn't find a match, then it will return the first category matching slug, if $full_match, is set to false. If it does not, then it will return null.<\/p> <p>It is also possible that it will return a WP_Error object on failure. Check for it when using this function.<\/p>",
        "inputs": {
            "category_path": {
                "label": "category_path",
                "description": "URL containing category slugs.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "full_match": {
                "label": "full_match",
                "description": "Whether full path should be matched.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term",
            "array",
            "WP_Error",
            "null"
        ],
        "return_description": "Type is based on $output value.",
        "rank": 0
    },
    "get_category_by_slug": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_category_by_slug",
        "summary": "Retrieve category object by category slug.",
        "description": "",
        "inputs": {
            "slug": {
                "label": "slug",
                "description": "The category slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "Category data object",
        "rank": 0
    },
    "get_category_feed_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_category_feed_link",
        "summary": "Retrieves the feed link for a category.",
        "description": "<p>Returns a link to the feed for all posts in a given category. A specific feed can be requested or left blank to get the default feed.<\/p>",
        "inputs": {
            "cat_id": {
                "label": "cat_id",
                "description": "Category ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Link to the feed for the category specified by $cat_id.",
        "rank": 0
    },
    "get_category_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_category_link",
        "summary": "Retrieve category link URL.",
        "description": "",
        "inputs": {
            "category": {
                "label": "category",
                "description": "Category ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Link on success, empty string if category does not exist.",
        "rank": 0
    },
    "get_category_parents": {
        "since": "1.2.0",
        "group": "Template",
        "type": "fct",
        "name": "get_category_parents",
        "summary": "Retrieve category parents with separator.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Category ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "link": {
                "label": "link",
                "description": "Whether to format with link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "separator": {
                "label": "separator",
                "description": "How to separate categories.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'\/'",
                "required": false
            },
            "nicename": {
                "label": "nicename",
                "description": "Whether to use nice name for display.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "A list of category parents on success, WP_Error on failure.",
        "rank": 0
    },
    "get_category_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_category_template",
        "summary": "Retrieve path of category template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>category-{slug}.php<\/li> <li>category-{id}.php<\/li> <li>category.php<\/li> <p>An example of this is:<\/p> <li>category-news.php<\/li> <li>category-2.php<\/li> <li>category.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'category'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to category template file.",
        "rank": 0
    },
    "get_category_to_edit": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_category_to_edit",
        "summary": "Get category object for given ID and 'edit' filter context.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_children": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_children",
        "summary": "Retrieve all children of the post parent ID.",
        "description": "<p>Normally, without any enhancements, the children would apply to pages. In the context of the inner workings of WordPress, pages, posts, and attachments share the same table, so therefore the functionality could apply to any one of them. It is then noted that while this function does not work on posts, it does not mean that it won't work on posts. It is recommended that you know what context you wish to retrieve the children of.<\/p> <p>Attachments may also be made the child of a post, so if that is an accurate statement (which needs to be verified), it would then be possible to get all of the attachments for a post. Attachments have since changed since version 2.5, so this is most likely inaccurate, but serves generally as an example of what is possible.<\/p> <p>The arguments listed as defaults are for this function and also of the get_posts() function. The arguments are combined with the get_children defaults and are then passed to the get_posts() function, which accepts additional arguments. You can replace the defaults in this function, listed below and the additional arguments listed in the get_posts() function.<\/p> <p>The 'post_parent' is the most important argument and important attention needs to be paid to the $args parameter. If you pass either an object or an integer (number), then just the 'post_parent' is grabbed and everything else is lost. If you don't specify any arguments, then it is assumed that you are in The Loop and the post parent will be grabbed for from the current post.<\/p> <p>The 'post_parent' argument is the ID to get the children. The 'numberposts' is the amount of posts to retrieve that has a default of '-1', which is used to get all of the posts. Giving a number higher than 0 will only retrieve that amount of posts.<\/p> <p>The 'post_type' and 'post_status' arguments can be used to choose what criteria of posts to retrieve. The 'post_type' can be anything, but WordPress post types are 'post', 'pages', and 'attachments'. The 'post_status' argument will accept any post status within the write administration panels.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "User defined arguments for replacing the defaults.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of children, where the type of each element is determined by $output parameter.               Empty array on failure.",
        "rank": 0
    },
    "get_clean_basedomain": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_clean_basedomain",
        "summary": "Get base domain of network.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Base domain.",
        "rank": 0
    },
    "get_cli_args": {
        "since": false,
        "group": "WordPress",
        "type": "fct",
        "name": "get_cli_args",
        "summary": "Returns value of command line params.",
        "description": "<p>Exits when a required param is not set.<\/p>",
        "inputs": {
            "param": {
                "label": "param",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "required": {
                "label": "required",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_column_headers": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_column_headers",
        "summary": "Get the column headers for a screen",
        "description": "",
        "inputs": {
            "screen": {
                "label": "screen",
                "description": "The screen you want the headers for",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Containing the headers in the format id =&gt; UI String",
        "rank": 0
    },
    "get_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comment",
        "summary": "Retrieves comment data given a comment ID or comment object.",
        "description": "<p>If an object is passed then the comment data will be cached and then returned after being passed through a filter. If the comment is empty, then the global comment variable will be used, if it is set.<\/p>",
        "inputs": {
            "comment": {
                "label": "comment",
                "description": "Comment to retrieve.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string",
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Comment object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Comment",
            "array",
            "null"
        ],
        "return_description": "Depends on $output value.",
        "rank": 0
    },
    "get_comment_ID": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_ID",
        "summary": "Retrieve the comment id of the current comment.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The comment ID.",
        "rank": 0
    },
    "get_comment_author": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author",
        "summary": "Retrieve the author of the current comment.",
        "description": "<p>If the comment has an empty comment_author field, then 'Anonymous' person is assumed.<\/p>",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to retrieve the author. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comment author",
        "rank": 0
    },
    "get_comment_author_IP": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_IP",
        "summary": "Retrieve the IP address of the author of the current comment.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to get the author's IP address. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Comment author's IP address.",
        "rank": 0
    },
    "get_comment_author_email": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_email",
        "summary": "Retrieve the email of the author of the current comment.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to get the author's email. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The current comment author's email",
        "rank": 0
    },
    "get_comment_author_email_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_email_link",
        "summary": "Return the html email link to the author of the current comment.",
        "description": "<p>Care should be taken to protect the email address and assure that email harvesters do not capture your commentors' email address. Most assume that their email address will not appear in raw form on the site. Doing so will enable anyone, including those that people don't want to get the email address and use it for their own means good and bad.<\/p>",
        "inputs": {
            "linktext": {
                "label": "linktext",
                "description": "Text to display instead of the comment author's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Text or HTML to display before the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Text or HTML to display after the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment ID or WP_Comment object. Default is the current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML markup for the comment author email link. By default, the email address is obfuscated                via the {@see 'comment_email'} filter with antispambot().",
        "rank": 0
    },
    "get_comment_author_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_link",
        "summary": "Retrieve the HTML link to the URL of the author of the current comment.",
        "description": "<p>Both get_comment_author_url() and get_comment_author() rely on get_comment(), which falls back to the global comment variable if the $comment_ID argument is empty.<\/p>",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to get the author's link. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comment author name or HTML link for author's URL.",
        "rank": 0
    },
    "get_comment_author_rss": {
        "since": "2.0.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_comment_author_rss",
        "summary": "Retrieve the current comment author for use in the feeds.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Comment Author",
        "rank": 0
    },
    "get_comment_author_url": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_url",
        "summary": "Retrieve the url of the author of the current comment.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or the ID of the comment for which to get the author's URL. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Comment author URL.",
        "rank": 0
    },
    "get_comment_author_url_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_author_url_link",
        "summary": "Retrieves the HTML link of the url of the author of the current comment.",
        "description": "<p>$linktext parameter is only used if the URL does not exist for the comment author. If the URL does exist then the URL will be used and the $linktext will be ignored.<\/p> <p>Encapsulate the HTML link between the $before and $after. So it will appear in the order of $before, link, and finally $after.<\/p>",
        "inputs": {
            "linktext": {
                "label": "linktext",
                "description": "The text to display instead of the comment author's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "The text or HTML to display before the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "The text or HTML to display after the email link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment ID or WP_Comment object. Default is the current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTML link between the $before and $after parameters.",
        "rank": 0
    },
    "get_comment_class": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_class",
        "summary": "Returns the classes for the comment div as an array.",
        "description": "",
        "inputs": {
            "class": {
                "label": "class",
                "description": "One or more classes to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of classes.",
        "rank": 0
    },
    "get_comment_count": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comment_count",
        "summary": "The amount of comments in a post or total comments.",
        "description": "<p>A lot like wp_count_comments(), in that they both return comment stats (albeit with different types). The wp_count_comments() actually caches, but this function does not.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Comment amount in post if &gt; 0, else total comments blog wide.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The amount of spam, approved, awaiting moderation, and total comments.",
        "rank": 0
    },
    "get_comment_date": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_date",
        "summary": "Retrieve the comment date of the current comment.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "The format of the date. Default user's setting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to get the date. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comment's date.",
        "rank": 0
    },
    "get_comment_excerpt": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_excerpt",
        "summary": "Retrieve the excerpt of the current comment.",
        "description": "<p>Will cut each word and only output the first 20 words with '&hellip;' at the end. If the word count is less than 20, then no truncating is done and no '&hellip;' will appear.<\/p>",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to get the excerpt. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The maybe truncated comment with 20 words or less.",
        "rank": 0
    },
    "get_comment_guid": {
        "since": "2.5.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_comment_guid",
        "summary": "Retrieve the feed GUID for the current comment.",
        "description": "",
        "inputs": {
            "comment_id": {
                "label": "comment_id",
                "description": "comment object or id. Defaults to global comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "false on failure or guid for comment on success.",
        "rank": 0
    },
    "get_comment_id_fields": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_id_fields",
        "summary": "Retrieve hidden input HTML for replying to comments.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID. Default current post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Hidden input HTML for replying to comments",
        "rank": 0
    },
    "get_comment_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_link",
        "summary": "Retrieve the link to a given comment.",
        "description": "",
        "inputs": {
            "comment": {
                "label": "comment",
                "description": "Comment to retrieve. Default current comment.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "An array of optional arguments to override the defaults. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> Passed to get_page_of_comment().<\/li> <li><b>'page'<\/b><br\/><i>(int)<\/i> Current page of comments, for calculating comment pagination.<\/li> <li><b>'per_page'<\/b><br\/><i>(int)<\/i> Per-page value for comment pagination.<\/li> <li><b>'max_depth'<\/b><br\/><i>(int)<\/i> Passed to get_page_of_comment().<\/li> <li><b>'cpage'<\/b><br\/><i>(int|string)<\/i> Value to use for the comment's &quot;comment-page&quot; or &quot;cpage&quot; value. If provided, this value overrides any value calculated from $page and $per_page.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The permalink to the given comment.",
        "rank": 0
    },
    "get_comment_meta": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comment_meta",
        "summary": "Retrieve comment meta field for a comment.",
        "description": "",
        "inputs": {
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The meta key to retrieve. By default, returns data for all keys.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "Whether to return a single value.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Will be an array if $single is false. Will be value of meta data field if $single  is true.",
        "rank": 0
    },
    "get_comment_pages_count": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comment_pages_count",
        "summary": "Calculate the total number of comment pages.",
        "description": "",
        "inputs": {
            "comments": {
                "label": "comments",
                "description": "Array of WP_Comment objects. Defaults to $wp_query-&gt;comments.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "per_page": {
                "label": "per_page",
                "description": "Comments per page.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "threaded": {
                "label": "threaded",
                "description": "Control over flat or threaded comments.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Number of comment pages.",
        "rank": 0
    },
    "get_comment_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_reply_link",
        "summary": "Retrieve HTML content for reply to comment link.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Override default arguments. <ul><li><b>'add_below'<\/b><br\/><i>(string)<\/i> The first part of the selector used to identify the comment to respond below. The resulting value is passed as the first parameter to addComment.moveForm(), concatenated as $add_below-$comment-&gt;comment_ID. Default 'comment'.<\/li> <li><b>'respond_id'<\/b><br\/><i>(string)<\/i> The selector identifying the responding comment. Passed as the third parameter to addComment.moveForm(), and appended to the link URL as a hash value. Default 'respond'.<\/li> <li><b>'reply_text'<\/b><br\/><i>(string)<\/i> The text of the Reply link. Default 'Reply'.<\/li> <li><b>'login_text'<\/b><br\/><i>(string)<\/i> The text of the link to reply if logged out. Default 'Log in to Reply'.<\/li> <li><b>'max_depth'<\/b><br\/><i>(int)<\/i> The max depth of the comment tree. Default 0.<\/li> <li><b>'depth'<\/b><br\/><i>(int)<\/i> The depth of the new comment. Must be greater than 0 and less than the value of the 'thread_comments_depth' option set in Settings &gt; Discussion. Default 0.<\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> The text or HTML to add before the reply link. <\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> The text or HTML to add after the reply link. <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment being replied to. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object the comment is going to be displayed on. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "void",
            "false",
            "string"
        ],
        "return_description": "Link to show comment form, if successful. False, if comments are closed.",
        "rank": 0
    },
    "get_comment_statuses": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comment_statuses",
        "summary": "Retrieve all of the WordPress supported comment statuses.",
        "description": "<p>Comments have a limited set of valid status values, this provides the comment status values and descriptions.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of comment statuses.",
        "rank": 0
    },
    "get_comment_text": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_text",
        "summary": "Retrieve the text of the current comment.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to get the text. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": true
            },
            "args": {
                "label": "args",
                "description": "An array of arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comment content.",
        "rank": 0
    },
    "get_comment_time": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_time",
        "summary": "Retrieve the comment time of the current comment.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "The format of the time. Default user's settings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "gmt": {
                "label": "gmt",
                "description": "Whether to use the GMT date.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "translate": {
                "label": "translate",
                "description": "Whether to translate the time (for use in feeds).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The formatted time.",
        "rank": 0
    },
    "get_comment_to_edit": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_comment_to_edit",
        "summary": "Returns a WP_Comment object based on comment ID.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "ID of comment to retrieve.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Comment",
            "false"
        ],
        "return_description": "Comment if found. False on failure.",
        "rank": 0
    },
    "get_comment_type": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comment_type",
        "summary": "Retrieve the comment type of the current comment.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "WP_Comment or ID of the comment for which to get the type. Default current comment.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comment type.",
        "rank": 0
    },
    "get_comments": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_comments",
        "summary": "Retrieve a list of comments.",
        "description": "<p>The comment list can be for the blog as a whole or for an individual post.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or string of arguments. See WP_Comment_Query::__construct() for information on accepted arguments.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "array"
        ],
        "return_description": "List of comments or number of found comments if <code>$count<\/code> argument is true.",
        "rank": 0
    },
    "get_comments_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comments_link",
        "summary": "Retrieves the link to the current post comments.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The link to the comments.",
        "rank": 0
    },
    "get_comments_number": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comments_number",
        "summary": "Retrieves the amount of comments a post has.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int"
        ],
        "return_description": "If the post exists, a numeric string representing the number of comments                    the post has, otherwise 0.",
        "rank": 0
    },
    "get_comments_number_text": {
        "since": "4.0.0",
        "group": "Template",
        "type": "efct",
        "name": "get_comments_number_text",
        "summary": "Display the language string for the number of comments the current post has.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "zero": {
                "label": "zero",
                "description": "Text for no comments.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "one": {
                "label": "one",
                "description": "Text for one comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "more": {
                "label": "more",
                "description": "Text for more than one comment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_comments_pagenum_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_comments_pagenum_link",
        "summary": "Retrieves the comments page number link.",
        "description": "",
        "inputs": {
            "pagenum": {
                "label": "pagenum",
                "description": "Page number.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "The maximum number of comment pages. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comments page number link URL.",
        "rank": 0
    },
    "get_compat_media_markup": {
        "since": "3.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_compat_media_markup",
        "summary": "",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_core_checksums": {
        "since": "3.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_core_checksums",
        "summary": "Gets and caches the checksums for the given version of WordPress.",
        "description": "",
        "inputs": {
            "version": {
                "label": "version",
                "description": "Version string to query.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "locale": {
                "label": "locale",
                "description": "Locale to query.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "array"
        ],
        "return_description": "False on failure. An array of checksums on success.",
        "rank": 0
    },
    "get_core_updates": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "get_core_updates",
        "summary": "Get available core updates.",
        "description": "",
        "inputs": {
            "options": {
                "label": "options",
                "description": "Set $options['dismissed'] to true to show dismissed upgrades too, set $options['available'] to false to skip not-dismissed updates.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Array of the update objects on success, false on failure.",
        "rank": 0
    },
    "get_current_blog_id": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_current_blog_id",
        "summary": "Retrieve the current site ID.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Site ID.",
        "rank": 0
    },
    "get_current_network_id": {
        "since": "4.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_current_network_id",
        "summary": "Retrieves the current network ID.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The ID of the current network.",
        "rank": 0
    },
    "get_current_screen": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_current_screen",
        "summary": "Get the current screen object",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Screen",
            "null"
        ],
        "return_description": "Current screen object or null when screen not defined.",
        "rank": 0
    },
    "get_current_site": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_current_site",
        "summary": "Get the current network.",
        "description": "<p>Returns an object containing the 'id', 'domain', 'path', and 'site_name' properties of the network being viewed.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_Network",
                "label": "WP_Network"
            }
        },
        "return": [
            "WP_Network"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_current_user_id": {
        "since": "MU (3.0.0)",
        "group": "Users",
        "type": "fct",
        "name": "get_current_user_id",
        "summary": "Get the current user's ID",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The current user's ID, or 0 if no user is logged in.",
        "rank": 0
    },
    "get_custom_header": {
        "since": "3.4.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_custom_header",
        "summary": "Get the header image data.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_custom_header_markup": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_custom_header_markup",
        "summary": "Retrieve the markup for a custom header.",
        "description": "<p>The container div will always be returned in the Customizer preview.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The markup for a custom header on success.",
        "rank": 0
    },
    "get_custom_logo": {
        "since": "4.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_custom_logo",
        "summary": "Returns a custom logo, linked to home.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog in question. Default is the ID of the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Custom logo markup.",
        "rank": 0
    },
    "get_dashboard_url": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_dashboard_url",
        "summary": "Retrieves the URL to the user's dashboard.",
        "description": "<p>If a user does not belong to any site, the global user dashboard is used. If the user belongs to the current site, the dashboard for the current site is returned. If the user cannot edit the current site, the dashboard to the user's primary site is returned.<\/p>",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID. Defaults to current user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "path relative to the dashboard. Use only paths known to both site and user admins.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Dashboard URL link with optional path appended.",
        "rank": 0
    },
    "get_date_from_gmt": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_date_from_gmt",
        "summary": "Converts a GMT date into the correct format for the blog.",
        "description": "<p>Requires and returns a date in the Y-m-d H:i:s format. If there is a timezone_string available, the returned date is in that timezone, otherwise it simply adds the value of gmt_offset. Return format can be overridden using the $format parameter<\/p>",
        "inputs": {
            "string": {
                "label": "string",
                "description": "The date to be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "format": {
                "label": "format",
                "description": "The format string for the returned date (default is Y-m-d H:i:s)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'Y-m-d H:i:s'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Formatted date relative to the timezone \/ GMT offset.",
        "rank": 0
    },
    "get_date_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_date_template",
        "summary": "Retrieve path of date template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'date'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to date template file.",
        "rank": 0
    },
    "get_day_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_day_link",
        "summary": "Retrieves the permalink for the day archives with year and month.",
        "description": "",
        "inputs": {
            "year": {
                "label": "year",
                "description": "False for current year. Integer of year.",
                "type": "bool",
                "types": [
                    "bool",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "month": {
                "label": "month",
                "description": "False for current month. Integer of month.",
                "type": "bool",
                "types": [
                    "bool",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "day": {
                "label": "day",
                "description": "False for current day. Integer of day.",
                "type": "bool",
                "types": [
                    "bool",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The permalink for the specified day, month, and year archive.",
        "rank": 0
    },
    "get_default_comment_status": {
        "since": "4.3.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_default_comment_status",
        "summary": "Gets the default comment status for a post type.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "comment_type": {
                "label": "comment_type",
                "description": "Comment type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'comment'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Expected return value is 'open' or 'closed'.",
        "rank": 0
    },
    "get_default_feed": {
        "since": "2.5.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_default_feed",
        "summary": "Retrieve the default feed.",
        "description": "<p>The default feed is 'rss2', unless a plugin changes it through the {@see 'default_feed'} filter.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Default feed, or for example 'rss2', 'atom', etc.",
        "rank": 0
    },
    "get_default_link_to_edit": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_default_link_to_edit",
        "summary": "Retrieves the default link for editing.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "stdClass",
                "label": "stdClass"
            }
        },
        "return": [
            "stdClass"
        ],
        "return_description": "Default link object.",
        "rank": 0
    },
    "get_default_post_to_edit": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_default_post_to_edit",
        "summary": "Default post information to use when populating the \"Write Post\" form.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "A post type string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "create_in_db": {
                "label": "create_in_db",
                "description": "Whether to insert the post into database.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "WP_Post",
                "label": "WP_Post"
            }
        },
        "return": [
            "WP_Post"
        ],
        "return_description": "Post object containing all the default post data as attributes",
        "rank": 0
    },
    "get_delete_post_link": {
        "since": "2.9.0",
        "group": "Template",
        "type": "fct",
        "name": "get_delete_post_link",
        "summary": "Retrieves the delete posts link for post.",
        "description": "<p>Can be used within the WordPress loop or outside of it, with any post type.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "force_delete": {
                "label": "force_delete",
                "description": "Whether to bypass trash and force deletion.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The delete post link URL for the given post.",
        "rank": 0
    },
    "get_dirsize": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_dirsize",
        "summary": "Get the size of a directory.",
        "description": "<p>A helper function that is used primarily to check whether a blog has exceeded its allowed upload space.<\/p>",
        "inputs": {
            "directory": {
                "label": "directory",
                "description": "Full path of a directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Size of the directory in MB.",
        "rank": 0
    },
    "get_dropins": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_dropins",
        "summary": "Check the wp-content directory and retrieve all drop-ins with any plugin data.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key is the file path and the value is an array of the plugin data.",
        "rank": 0
    },
    "get_dynamic_block_names": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "fct",
        "name": "get_dynamic_block_names",
        "summary": "Returns an array of the names of all registered dynamic block types.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of dynamic block names.",
        "rank": 0
    },
    "get_edit_bookmark_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_bookmark_link",
        "summary": "Displays the edit bookmark link.",
        "description": "",
        "inputs": {
            "link": {
                "label": "link",
                "description": "Bookmark ID. Default is the id of the current bookmark.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The edit bookmark link URL.",
        "rank": 0
    },
    "get_edit_comment_link": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_comment_link",
        "summary": "Retrieves the edit comment link.",
        "description": "",
        "inputs": {
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The edit comment link URL for the given comment.",
        "rank": 0
    },
    "get_edit_post_link": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_post_link",
        "summary": "Retrieves the edit post link for post.",
        "description": "<p>Can be used within the WordPress loop or outside of it. Can be used with pages, posts, attachments, and revisions.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "How to output the '&amp;' character. Default '&amp;'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "The edit post link for the given post. null if the post type is invalid or does                     not allow an editing UI.",
        "rank": 0
    },
    "get_edit_profile_url": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_profile_url",
        "summary": "Retrieves the URL to the user's profile editor.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID. Defaults to current user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Dashboard URL link with optional path appended.",
        "rank": 0
    },
    "get_edit_tag_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_tag_link",
        "summary": "Retrieves the edit link for a tag.",
        "description": "",
        "inputs": {
            "tag_id": {
                "label": "tag_id",
                "description": "Tag ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_tag'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The edit tag link URL for the given tag.",
        "rank": 0
    },
    "get_edit_term_link": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_term_link",
        "summary": "Retrieves the URL for editing a given term.",
        "description": "",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy. Defaults to the taxonomy of the term identified by $term_id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "The object type. Used to highlight the proper post type menu on the linked page. Defaults to the first object_type associated with the taxonomy.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "The edit term link URL for the given term, or null on failure.",
        "rank": 0
    },
    "get_edit_user_link": {
        "since": "3.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_edit_user_link",
        "summary": "Retrieves the edit user link.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID. Defaults to the current user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL to edit user page or empty string.",
        "rank": 0
    },
    "get_editable_roles": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_editable_roles",
        "summary": "Fetch a filtered list of user roles that the current user is allowed to edit.",
        "description": "<p>Simple function whose main purpose is to allow filtering of the list of roles in the $wp_roles object so that plugins can remove inappropriate ones depending on the situation or user making edits. Specifically because without filtering anyone with the edit_users capability can edit others to be administrators, even if they are only editors or authors. This filter allows admins to delegate user management.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array[]",
                "label": "array[]"
            }
        },
        "return": [
            "array[]"
        ],
        "return_description": "Array of arrays containing role information.",
        "rank": 0
    },
    "get_editor_stylesheets": {
        "since": "4.0.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_editor_stylesheets",
        "summary": "Retrieve any registered editor stylesheets",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "If registered, a list of editor stylesheet URLs.",
        "rank": 0
    },
    "get_embed_template": {
        "since": "4.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_embed_template",
        "summary": "Retrieves an embed template path in the current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>embed-{post_type}-{post_format}.php<\/li> <li>embed-{post_type}.php<\/li> <li>embed.php<\/li> <p>An example of this is:<\/p> <li>embed-post-audio.php<\/li> <li>embed-post.php<\/li> <li>embed.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'embed'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to embed template file.",
        "rank": 0
    },
    "get_enclosed": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_enclosed",
        "summary": "Retrieve enclosures already enclosed for a post.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of enclosures.",
        "rank": 0
    },
    "get_extended": {
        "since": "1.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_extended",
        "summary": "Get extended entry info ().",
        "description": "<p>There should not be any space after the second dash and before the word 'more'. There can be text or space(s) after the word 'more', but won't be referenced.<\/p> <p>The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before the &lt;!--more--&gt;. The 'extended' key has the content after the &lt;!--more--&gt; comment. The 'more_text' key has the custom &quot;Read More&quot; text.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Post before ('main'), after ('extended'), and custom read more ('more_text').",
        "rank": 0
    },
    "get_feed_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_feed_link",
        "summary": "Retrieves the permalink for the feed type.",
        "description": "",
        "inputs": {
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The feed permalink.",
        "rank": 0
    },
    "get_file_data": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_file_data",
        "summary": "Retrieve metadata from a file.",
        "description": "<p>Searches for metadata in the first 8kiB of a file, such as a plugin or theme. Each piece of metadata must be on its own line. Fields can not span multiple lines, the value will get cut at the end of the first line.<\/p> <p>If the file data is not within that first 8kiB, then the author should correct their plugin file and move the data headers to the top.<\/p>",
        "inputs": {
            "file": {
                "label": "file",
                "description": "Absolute path to the file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default_headers": {
                "label": "default_headers",
                "description": "List of headers, in the format array('HeaderKey' =&gt; 'Header Name').",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "If specified adds filter hook &#039;extra_$context_headers&#039;.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of file headers in <code>HeaderKey =&gt; Header Value<\/code> format.",
        "rank": 0
    },
    "get_file_description": {
        "since": "1.5.0",
        "group": "Filesystem",
        "type": "fct",
        "name": "get_file_description",
        "summary": "Get the description for standard WordPress theme files and other various standard WordPress files",
        "description": "",
        "inputs": {
            "file": {
                "label": "file",
                "description": "Filesystem path or filename",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Description of file from $wp_file_descriptions or basename of $file if description doesn't exist.                Appends 'Page Template' to basename of $file if the file is a page template",
        "rank": 0
    },
    "get_filesystem_method": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "fct",
        "name": "get_filesystem_method",
        "summary": "Determines which method to use for reading, writing, modifying, or deleting files on the filesystem.",
        "description": "<p>The priority of the transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets (Via Sockets class, or fsockopen()). Valid values for these are: 'direct', 'ssh2', 'ftpext' or 'ftpsockets'.<\/p> <p>The return value can be overridden by defining the FS_METHOD constant in wp-config.php, or filtering via {@see 'filesystem_method'}.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Connection details.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Full path to the directory that is tested for being writable.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "allow_relaxed_file_ownership": {
                "label": "allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The transport to use, see description for valid return values.",
        "rank": 0
    },
    "get_footer": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "get_footer",
        "summary": "Load footer template.",
        "description": "<p>Includes the footer template for a theme or if a name is specified then a specialised footer will be included.<\/p> <p>For the parameter, if the file is called &quot;footer-special.php&quot; then specify &quot;special&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The name of the specialised footer.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_front_page_template": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_front_page_template",
        "summary": "Retrieve path of front page template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'frontpage'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to front page template file.",
        "rank": 0
    },
    "get_gmt_from_date": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_gmt_from_date",
        "summary": "Returns a date in the GMT equivalent.",
        "description": "<p>Requires and returns a date in the Y-m-d H:i:s format. If there is a timezone_string available, the date is assumed to be in that timezone, otherwise it simply subtracts the value of the 'gmt_offset' option. Return format can be overridden using the $format parameter.<\/p>",
        "inputs": {
            "string": {
                "label": "string",
                "description": "The date to be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "format": {
                "label": "format",
                "description": "The format string for the returned date (default is Y-m-d H:i:s)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'Y-m-d H:i:s'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "GMT version of the date provided.",
        "rank": 0
    },
    "get_header": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "get_header",
        "summary": "Load header template.",
        "description": "<p>Includes the header template for a theme or if a name is specified then a specialised header will be included.<\/p> <p>For the parameter, if the file is called &quot;header-special.php&quot; then specify &quot;special&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The name of the specialised header.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_header_image": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_header_image",
        "summary": "Retrieve header image for custom header.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_header_image_tag": {
        "since": "4.4.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_header_image_tag",
        "summary": "Create image tag markup for a custom header image.",
        "description": "",
        "inputs": {
            "attr": {
                "label": "attr",
                "description": "Additional attributes for the image tag. Can be used to override the default attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML image element markup or empty string on failure.",
        "rank": 0
    },
    "get_header_textcolor": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_header_textcolor",
        "summary": "Retrieves the custom header text color in 3- or 6-digit hexadecimal form.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).",
        "rank": 0
    },
    "get_header_video_settings": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_header_video_settings",
        "summary": "Retrieve header video settings.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_header_video_url": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_header_video_url",
        "summary": "Retrieve header video URL for custom header.",
        "description": "<p>Uses a local video if present, or falls back to an external video.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Header video URL or false if there is no video.",
        "rank": 0
    },
    "get_hidden_columns": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_hidden_columns",
        "summary": "Get a list of hidden columns.",
        "description": "",
        "inputs": {
            "screen": {
                "label": "screen",
                "description": "The screen you want the hidden columns for",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_hidden_meta_boxes": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_hidden_meta_boxes",
        "summary": "Get Hidden Meta Boxes",
        "description": "",
        "inputs": {
            "screen": {
                "label": "screen",
                "description": "Screen identifier",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Hidden Meta Boxes",
        "rank": 0
    },
    "get_home_path": {
        "since": "1.5.0",
        "group": "Filesystem",
        "type": "fct",
        "name": "get_home_path",
        "summary": "Get the absolute filesystem path to the root of the WordPress installation",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full filesystem path to the root of the WordPress installation",
        "rank": 0
    },
    "get_home_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_home_template",
        "summary": "Retrieve path of home template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'home'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to home template file.",
        "rank": 0
    },
    "get_home_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_home_url",
        "summary": "Retrieves the URL for a given site where the front end is accessible.",
        "description": "<p>Returns the 'home' option with the appropriate protocol. The protocol will be 'https' if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID. Default null (current site).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the home URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the home URL context. Accepts 'http', 'https', 'relative', 'rest', or null.",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Home URL link with optional path appended.",
        "rank": 0
    },
    "get_html_split_regex": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_html_split_regex",
        "summary": "Retrieve the regular expression for an HTML element.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The regular expression",
        "rank": 0
    },
    "get_http_origin": {
        "since": "3.4.0",
        "group": "HTTP",
        "type": "fct",
        "name": "get_http_origin",
        "summary": "Get the HTTP Origin of the current request.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL of the origin. Empty string if no origin.",
        "rank": 0
    },
    "get_id_from_blogname": {
        "since": "4.7.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_id_from_blogname",
        "summary": "Retrieves a sites ID given its (subdomain or directory) slug.",
        "description": "",
        "inputs": {
            "slug": {
                "label": "slug",
                "description": "A site's slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "null"
        ],
        "return_description": "The site ID, or null if no site is found for the given slug.",
        "rank": 0
    },
    "get_image_send_to_editor": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_image_send_to_editor",
        "summary": "Retrieves the image HTML to send to the editor.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Image attachment id.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "caption": {
                "label": "caption",
                "description": "Image caption.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Image title attribute.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "align": {
                "label": "align",
                "description": "Image CSS alignment property.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "Image src URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "rel": {
                "label": "rel",
                "description": "Value for rel attribute or whether to add a default value.",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'medium'",
                "required": false
            },
            "alt": {
                "label": "alt",
                "description": "Image alt attribute.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTML output to insert into the editor.",
        "rank": 0
    },
    "get_image_tag": {
        "since": "2.5.0",
        "group": "Media",
        "type": "fct",
        "name": "get_image_tag",
        "summary": "Gets an img tag for an image attachment, scaling it down if requested.",
        "description": "<p>The {@see 'get_image_tag_class'} filter allows for changing the class name for the image without having to use regular expressions on the HTML content. The parameters are: what WordPress will use for the class, the Attachment ID, image align value, and the size the image should be.<\/p> <p>The second filter, {@see 'get_image_tag'}, has the HTML content, which can then be further manipulated by a plugin to change all attribute values and even HTML content.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "alt": {
                "label": "alt",
                "description": "Image Description for the alt attribute.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Image Description for the title attribute.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "align": {
                "label": "align",
                "description": "Part of the class name for aligning the image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Registered image size to retrieve a tag for. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'medium'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML IMG element for given image attachment",
        "rank": 0
    },
    "get_importers": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_importers",
        "summary": "Retrieve list of importers.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_index_template": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_index_template",
        "summary": "Retrieve path of index template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'index'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to index template file.",
        "rank": 0
    },
    "get_inline_data": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "get_inline_data",
        "summary": "Adds hidden fields with the data for use in the inline editor for posts and pages.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_intermediate_image_sizes": {
        "since": "3.0.0",
        "group": "Media",
        "type": "fct",
        "name": "get_intermediate_image_sizes",
        "summary": "Gets the available intermediate image sizes.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Returns a filtered array of image size strings.",
        "rank": 0
    },
    "get_language_attributes": {
        "since": "4.3.0",
        "group": "Template",
        "type": "efct",
        "name": "get_language_attributes",
        "summary": "Gets the language attributes for the html tag.",
        "description": "<p>Builds up a set of html attributes containing the text direction and language information for the page.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "doctype": {
                "label": "doctype",
                "description": "The type of html document. Accepts 'xhtml' or 'html'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'html'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_last_updated": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_last_updated",
        "summary": "Get a list of most recently updated blogs.",
        "description": "",
        "inputs": {
            "deprecated": {
                "label": "deprecated",
                "description": "Not used",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "start": {
                "label": "start",
                "description": "The offset",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "quantity": {
                "label": "quantity",
                "description": "The maximum number of blogs to retrieve. Default is 40.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "40",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The list of blogs",
        "rank": 0
    },
    "get_lastcommentmodified": {
        "since": "1.5.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_lastcommentmodified",
        "summary": "The date the last comment was modified.",
        "description": "",
        "inputs": {
            "timezone": {
                "label": "timezone",
                "description": "Which timezone to use in reference to 'gmt', 'blog', or 'server' locations.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'server'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Last comment modified date on success, false on failure.",
        "rank": 0
    },
    "get_lastpostdate": {
        "since": "0.71",
        "group": "Post",
        "type": "fct",
        "name": "get_lastpostdate",
        "summary": "Retrieve the date that the last post was published.",
        "description": "<p>The server timezone is the default and is the difference between GMT and server time. The 'blog' value is the date when the last post was posted. The 'gmt' is when the last post was posted in GMT formatted date.<\/p>",
        "inputs": {
            "timezone": {
                "label": "timezone",
                "description": "The timezone for the timestamp. Accepts 'server', 'blog', or 'gmt'. 'server' uses the server's internal timezone. 'blog' uses the post_modified field, which proxies to the timezone set for the site. 'gmt' uses the post_modified_gmt field.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'server'",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'any'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The date of the last post.",
        "rank": 0
    },
    "get_lastpostmodified": {
        "since": "1.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_lastpostmodified",
        "summary": "Get the timestamp of the last time any post was modified.",
        "description": "<p>The server timezone is the default and is the difference between GMT and server time. The 'blog' value is just when the last post was modified. The 'gmt' is when the last post was modified in GMT time.<\/p>",
        "inputs": {
            "timezone": {
                "label": "timezone",
                "description": "The timezone for the timestamp. See get_lastpostdate() for information on accepted values.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'server'",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'any'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The timestamp.",
        "rank": 0
    },
    "get_link_to_edit": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_link_to_edit",
        "summary": "Retrieves link data based on its ID.",
        "description": "",
        "inputs": {
            "link": {
                "label": "link",
                "description": "Link ID or object to retrieve.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "Link object for editing.",
        "rank": 0
    },
    "get_locale": {
        "since": "1.5.0",
        "group": "i18n",
        "type": "fct",
        "name": "get_locale",
        "summary": "Retrieves the current locale.",
        "description": "<p>If the locale is set, then it will filter the locale in the {@see 'locale'} filter hook and return the value.<\/p> <p>If the locale is not set already, then the WPLANG constant is used if it is defined. Then it is filtered through the {@see 'locale'} filter hook and the value for the locale global set and the locale is returned.<\/p> <p>The process to get the locale should only be done once, but the locale will always be filtered using the {@see 'locale'} hook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The locale of the blog or from the {@see 'locale'} hook.",
        "rank": 0
    },
    "get_locale_stylesheet_uri": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_locale_stylesheet_uri",
        "summary": "Retrieves the localized stylesheet URI.",
        "description": "<p>The stylesheet directory for the localized stylesheet files are located, by default, in the base theme directory. The name of the locale file will be the locale followed by '.css'. If that does not exist, then the text direction stylesheet will be checked for existence, for example 'ltr.css'.<\/p> <p>The theme may change the location of the stylesheet directory by either using the {@see 'stylesheet_directory_uri'} or {@see 'locale_stylesheet_uri'} filters.<\/p> <p>If you want to change the location of the stylesheet files for the entire WordPress workflow, then change the former. If you just have the locale in a separate folder, then change the latter.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_main_network_id": {
        "since": "4.3.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_main_network_id",
        "summary": "Get the main network ID.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The ID of the main network.",
        "rank": 0
    },
    "get_main_site_id": {
        "since": "4.9.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_main_site_id",
        "summary": "Gets the main site ID.",
        "description": "",
        "inputs": {
            "network_id": {
                "label": "network_id",
                "description": "The ID of the network for which to get the main site. Defaults to the current network.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The ID of the main site.",
        "rank": 0
    },
    "get_media_embedded_in_content": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_media_embedded_in_content",
        "summary": "Check the content blob for an audio, video, object, embed, or iframe tags.",
        "description": "",
        "inputs": {
            "content": {
                "label": "content",
                "description": "A string which might contain media data.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "types": {
                "label": "types",
                "description": "An array of media types: 'audio', 'video', 'object', 'embed', or 'iframe'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of found HTML media embeds.",
        "rank": 0
    },
    "get_media_item": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_media_item",
        "summary": "Retrieve HTML form for modifying the image attachment.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment ID for modification.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Override defaults.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML form for attachment.",
        "rank": 0
    },
    "get_media_items": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_media_items",
        "summary": "Retrieve HTML for media items of post gallery.",
        "description": "<p>The HTML markup retrieved will be created for the progress of SWF Upload component. Will also create link for showing and hiding the form to modify the image attachment.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "Errors for attachment, if any.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_meta_keys": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_meta_keys",
        "summary": "Get a list of previously defined keys.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_meta_sql": {
        "since": "3.2.0",
        "group": "Meta",
        "type": "fct",
        "name": "get_meta_sql",
        "summary": "Given a meta query, generates SQL clauses to be appended to a main query.",
        "description": "",
        "inputs": {
            "meta_query": {
                "label": "meta_query",
                "description": "A meta query.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "type": {
                "label": "type",
                "description": "Type of meta.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "primary_table": {
                "label": "primary_table",
                "description": "Primary database table name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "primary_id_column": {
                "label": "primary_id_column",
                "description": "Primary ID column name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The main query object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Associative array of <code>JOIN<\/code> and <code>WHERE<\/code> SQL.",
        "rank": 0
    },
    "get_metadata": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "fct",
        "name": "get_metadata",
        "summary": "Retrieve metadata for the specified object.",
        "description": "",
        "inputs": {
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object metadata is for",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key. If not specified, retrieve all metadata for the specified object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "If true, return only the first value of the specified meta_key. This parameter has no effect if meta_key is not specified.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Single metadata value, or array of values",
        "rank": 0
    },
    "get_metadata_by_mid": {
        "since": "3.3.0",
        "group": "Meta",
        "type": "fct",
        "name": "get_metadata_by_mid",
        "summary": "Get meta data by meta ID",
        "description": "",
        "inputs": {
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_id": {
                "label": "meta_id",
                "description": "ID for a specific meta row",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "false"
        ],
        "return_description": "Meta object or false.",
        "rank": 0
    },
    "get_month_link": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_month_link",
        "summary": "Retrieves the permalink for the month archives with year.",
        "description": "",
        "inputs": {
            "year": {
                "label": "year",
                "description": "False for current year. Integer of year.",
                "type": "bool",
                "types": [
                    "bool",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "month": {
                "label": "month",
                "description": "False for current month. Integer of month.",
                "type": "bool",
                "types": [
                    "bool",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The permalink for the specified month and year archive.",
        "rank": 0
    },
    "get_most_recent_post_of_user": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_most_recent_post_of_user",
        "summary": "Get a user's most recent post.",
        "description": "<p>Walks through each of a user's blogs to find the post with the most recent post_date_gmt.<\/p>",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Contains the blog_id, post_id, post_date_gmt, and post_gmt_ts",
        "rank": 0
    },
    "get_mu_plugins": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_mu_plugins",
        "summary": "Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.",
        "description": "<p>WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content\/mu-plugins).<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key is the mu-plugin file path and the value is an array of the mu-plugin data.",
        "rank": 0
    },
    "get_nav_menu_locations": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "get_nav_menu_locations",
        "summary": "Retrieves all registered navigation menu locations and the menus assigned to them.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Registered navigation menu locations and the menus assigned them.               If none are registered, an empty array.",
        "rank": 0
    },
    "get_network": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_network",
        "summary": "Retrieves network data given a network ID or network object.",
        "description": "<p>Network data will be cached and returned after being passed through a filter. If the provided network is empty, the current network global will be used.<\/p>",
        "inputs": {
            "network": {
                "label": "network",
                "description": "Network to retrieve. Default is the current network.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Network",
            "null"
        ],
        "return_description": "The network object or null if not found.",
        "rank": 0
    },
    "get_network_by_path": {
        "since": "3.9.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_network_by_path",
        "summary": "Retrieve the closest matching network for a domain and path.",
        "description": "",
        "inputs": {
            "domain": {
                "label": "domain",
                "description": "Domain to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Path to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "segments": {
                "label": "segments",
                "description": "Path segments to use. Defaults to null, or the full path.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Network",
            "false"
        ],
        "return_description": "Network object if successful. False when no network is found.",
        "rank": 0
    },
    "get_network_option": {
        "since": "4.4.0",
        "group": "Option",
        "type": "fct",
        "name": "get_network_option",
        "summary": "Retrieve a network's option value based on the option name.",
        "description": "",
        "inputs": {
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Can be null to default to the current network ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option to retrieve. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "Value to return if the option doesn't exist.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value set for the option.",
        "rank": 0
    },
    "get_networks": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_networks",
        "summary": "Retrieves a list of networks.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or string of arguments. See WP_Network_Query::parse_query() for information on accepted arguments.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "int"
        ],
        "return_description": "List of WP_Network objects, a list of network ids when 'fields' is set to 'ids',                   or the number of networks when 'count' is passed as a query var.",
        "rank": 0
    },
    "get_next_comments_link": {
        "since": "2.7.1",
        "group": "Template",
        "type": "fct",
        "name": "get_next_comments_link",
        "summary": "Retrieves the link to the next comments page.",
        "description": "",
        "inputs": {
            "label": {
                "label": "label",
                "description": "Label for link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "Max page. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML-formatted link for the next page of comments.",
        "rank": 0
    },
    "get_next_post": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_next_post",
        "summary": "Retrieves the next post that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether post should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "string",
            "WP_Post"
        ],
        "return_description": "Post object if successful. Null if global $post is not set. Empty string if no                             corresponding post exists.",
        "rank": 0
    },
    "get_next_post_link": {
        "since": "3.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_next_post_link",
        "summary": "Retrieves the next post link that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "format": {
                "label": "format",
                "description": "Link anchor format. Default '&laquo; %link'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%link &raquo;'",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Link permalink format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The link URL of the next post in relation to the current post.",
        "rank": 0
    },
    "get_next_posts_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_next_posts_link",
        "summary": "Retrieves the next posts page link.",
        "description": "",
        "inputs": {
            "label": {
                "label": "label",
                "description": "Content for link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "Max pages. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML-formatted next posts page link.",
        "rank": 0
    },
    "get_next_posts_page_link": {
        "since": "2.0.10",
        "group": "Template",
        "type": "fct",
        "name": "get_next_posts_page_link",
        "summary": "Retrieves the next posts page link.",
        "description": "<p>Backported from 2.1.3 to 2.0.10.<\/p>",
        "inputs": {
            "max_page": {
                "label": "max_page",
                "description": "Max pages. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The link URL for next posts page.",
        "rank": 0
    },
    "get_num_queries": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_num_queries",
        "summary": "Retrieve the number of database queries during the WordPress execution.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Number of database queries.",
        "rank": 0
    },
    "get_object_subtype": {
        "since": "4.9.8",
        "group": "Meta",
        "type": "fct",
        "name": "get_object_subtype",
        "summary": "Returns the object subtype for a given object ID of a specific type.",
        "description": "",
        "inputs": {
            "object_type": {
                "label": "object_type",
                "description": "Type of object to request metadata for. (e.g. comment, post, term, user)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object to retrieve its subtype.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The object subtype or an empty string if unspecified subtype.",
        "rank": 0
    },
    "get_object_taxonomies": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_object_taxonomies",
        "summary": "Return the names or objects of the taxonomies which are registered for the requested object or object type, such as a post object or post type name.",
        "description": "<p>Example:<\/p> $taxonomies = get_object_taxonomies( 'post' ); <p>This results in:<\/p> Array( 'category', 'post_tag' )",
        "inputs": {
            "object": {
                "label": "object",
                "description": "Name of the type of taxonomy object, or an object (row from posts)",
                "type": "array",
                "types": [
                    "array",
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The type of output to return in the array. Accepts either taxonomy 'names' or 'objects'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The names of all taxonomy of $object_type.",
        "rank": 0
    },
    "get_object_term_cache": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_object_term_cache",
        "summary": "Retrieves the taxonomy relationship to the term object id.",
        "description": "<p>Upstream functions (like get_the_terms() and is_object_in_term()) are responsible for populating the object-term relationship cache. The current function only fetches relationship data that is already in the cache.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Term object ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "array",
            "WP_Error"
        ],
        "return_description": "Array of <code>WP_Term<\/code> objects, if cached.                             False if cache is empty for <code>$taxonomy<\/code> and <code>$id<\/code>.                             WP_Error if get_term() returns an error object for any term.",
        "rank": 0
    },
    "get_objects_in_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_objects_in_term",
        "summary": "Retrieve object_ids of valid taxonomy and term.",
        "description": "<p>The strings of $taxonomies must exist before this function will continue. On failure of finding a valid taxonomy, it will return an WP_Error class, kind of like Exceptions in PHP 5, except you can't catch them. Even so, you can still test for the WP_Error class and get the error message.<\/p> <p>The $terms aren't checked the same as $taxonomies, but still need to exist for $object_ids to be returned.<\/p> <p>It is possible to change the order that object_ids is returned by either using PHP sort family functions or using the database by using $args with either ASC or DESC array. The value should be in the key named 'order'.<\/p>",
        "inputs": {
            "term_ids": {
                "label": "term_ids",
                "description": "Term id or array of term ids of terms that will be used.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomies": {
                "label": "taxonomies",
                "description": "String of taxonomy name or Array of string values of taxonomy names.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Change the order of the object_ids, either ASC or DESC.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "If the taxonomy does not exist, then WP_Error will be returned. On success.  the array can be empty meaning that there are no $object_ids found or it will return the $object_ids found.",
        "rank": 0
    },
    "get_oembed_endpoint_url": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_oembed_endpoint_url",
        "summary": "Retrieves the oEmbed endpoint URL for a given permalink.",
        "description": "<p>Pass an empty string as the first argument to get the endpoint base URL.<\/p>",
        "inputs": {
            "permalink": {
                "label": "permalink",
                "description": "The permalink used for the url query arg.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "The requested response format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'json'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The oEmbed endpoint URL.",
        "rank": 0
    },
    "get_oembed_response_data": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_oembed_response_data",
        "summary": "Retrieves the oEmbed response data for a given post.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post object or ID.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "width": {
                "label": "width",
                "description": "The requested width.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Response data on success, false if post doesn't exist.",
        "rank": 0
    },
    "get_oembed_response_data_for_url": {
        "since": "5.0.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_oembed_response_data_for_url",
        "summary": "Retrieves the oEmbed response data for a given URL.",
        "description": "",
        "inputs": {
            "url": {
                "label": "url",
                "description": "The URL that should be inspected for discovery &lt;link&gt; tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "oEmbed remote get arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "false"
        ],
        "return_description": "oEmbed response data if the URL does belong to the current site. False otherwise.",
        "rank": 0
    },
    "get_oembed_response_data_rich": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_oembed_response_data_rich",
        "summary": "Filters the oEmbed response data to return an iframe embed code.",
        "description": "",
        "inputs": {
            "data": {
                "label": "data",
                "description": "The response data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "The post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "width": {
                "label": "width",
                "description": "The requested width.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "The calculated height.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The modified response data.",
        "rank": 0
    },
    "get_option": {
        "since": "1.5.0",
        "group": "Option",
        "type": "fct",
        "name": "get_option",
        "summary": "Retrieves an option value based on an option name.",
        "description": "<p>If the option does not exist or does not have a value, then the return value will be false. This is useful to check whether you need to install an option and is commonly used during installation of plugin options and to test whether upgrading is required.<\/p> <p>If the option was serialized then it will be unserialized when it is returned.<\/p> <p>Any scalar values will be returned as strings. You may coerce the return type of a given option by registering an {@see 'option_$option'} filter callback.<\/p>",
        "inputs": {
            "option": {
                "label": "option",
                "description": "Name of option to retrieve. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "Default value to return if the option does not exist.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value set for the option.",
        "rank": 0
    },
    "get_page_by_path": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_page_by_path",
        "summary": "Retrieves a page given its path.",
        "description": "",
        "inputs": {
            "page_path": {
                "label": "page_path",
                "description": "Page path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type or array of post types.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'page'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "array",
            "null"
        ],
        "return_description": "WP_Post (or array) on success, or null on failure.",
        "rank": 0
    },
    "get_page_by_title": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_page_by_title",
        "summary": "Retrieve a page given its title.",
        "description": "",
        "inputs": {
            "page_title": {
                "label": "page_title",
                "description": "Page title",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type or array of post types.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'page'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "array",
            "null"
        ],
        "return_description": "WP_Post (or array) on success, or null on failure.",
        "rank": 0
    },
    "get_page_children": {
        "since": "1.5.1",
        "group": "Post",
        "type": "fct",
        "name": "get_page_children",
        "summary": "Identify descendants of a given page ID in a list of page objects.",
        "description": "<p>Descendants are identified from the $pages array passed to the function. No database queries are performed.<\/p>",
        "inputs": {
            "page_id": {
                "label": "page_id",
                "description": "Page ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "pages": {
                "label": "pages",
                "description": "List of page objects from which descendants should be identified.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of page children.",
        "rank": 0
    },
    "get_page_hierarchy": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_page_hierarchy",
        "summary": "Order the pages with children under parents in a flat list.",
        "description": "<p>It uses auxiliary structure to hold parent-children relationships and runs in O(N) complexity<\/p>",
        "inputs": {
            "pages": {
                "label": "pages",
                "description": "Posts array (passed by reference).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "page_id": {
                "label": "page_id",
                "description": "Parent page ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list arranged by hierarchy. Children immediately follow their parents.",
        "rank": 0
    },
    "get_page_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_page_link",
        "summary": "Retrieves the permalink for the current page or page ID.",
        "description": "<p>Respects page_on_front. Use this one.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object. Default uses the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "leavename": {
                "label": "leavename",
                "description": "Whether to keep the page name.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "sample": {
                "label": "sample",
                "description": "Whether it should be treated as a sample permalink.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The page permalink.",
        "rank": 0
    },
    "get_page_of_comment": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "fct",
        "name": "get_page_of_comment",
        "summary": "Calculate what page number a comment will appear on for comment paging.",
        "description": "",
        "inputs": {
            "comment_ID": {
                "label": "comment_ID",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of optional arguments. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> Limit paginated comments to those matching a given type. Accepts 'comment', 'trackback', 'pingback', 'pings' (trackbacks and pingbacks), or 'all'. Default is 'all'.<\/li> <li><b>'per_page'<\/b><br\/><i>(int)<\/i> Per-page count to use when calculating pagination. Defaults to the value of the 'comments_per_page' option.<\/li> <li><b>'max_depth'<\/b><br\/><i>(int|string)<\/i> If greater than 1, comment page will be determined for the top-level parent of $comment_ID. Defaults to the value of the 'thread_comments_depth' option. <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "null"
        ],
        "return_description": "Comment page number or null on error.",
        "rank": 0
    },
    "get_page_statuses": {
        "since": "2.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_page_statuses",
        "summary": "Retrieve all of the WordPress support page statuses.",
        "description": "<p>Pages have a limited set of valid status values, this provides the post_status values and descriptions.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of page statuses.",
        "rank": 0
    },
    "get_page_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_page_template",
        "summary": "Retrieve path of page template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>{Page Template}.php<\/li> <li>page-{page_name}.php<\/li> <li>page-{id}.php<\/li> <li>page.php<\/li> <p>An example of this is:<\/p> <li>page-templates\/full-width.php<\/li> <li>page-about.php<\/li> <li>page-4.php<\/li> <li>page.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'page'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to page template file.",
        "rank": 0
    },
    "get_page_template_slug": {
        "since": "3.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_page_template_slug",
        "summary": "Get the specific template name for a given post.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Page template filename. Returns an empty string when the default page template  is in use. Returns false if the post does not exist.",
        "rank": 0
    },
    "get_page_templates": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_page_templates",
        "summary": "Get the Page Templates available in this theme",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "The post being edited, provided for context.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type to get the templates for.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'page'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key is the template name, value is the filename of the template",
        "rank": 0
    },
    "get_page_uri": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_page_uri",
        "summary": "Build the URI path for a page.",
        "description": "<p>Sub pages will be in the &quot;directory&quot; under the parent page post name.<\/p>",
        "inputs": {
            "page": {
                "label": "page",
                "description": "Page ID or WP_Post object. Default is global $post.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "object",
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Page URI, false on error.",
        "rank": 0
    },
    "get_pagenum_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_pagenum_link",
        "summary": "Retrieves the link for a page number.",
        "description": "",
        "inputs": {
            "pagenum": {
                "label": "pagenum",
                "description": "Page ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "escape": {
                "label": "escape",
                "description": "Whether to escape the URL for display, with esc_url(). Defaults to true. Otherwise, prepares the URL with esc_url_raw().",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The link URL for the given page number.",
        "rank": 0
    },
    "get_pages": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_pages",
        "summary": "Retrieve a list of pages (or hierarchical post type items).",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or string of arguments to retrieve pages. <ul><li><b>'child_of'<\/b><br\/><i>(int)<\/i> Page ID to return child and grandchild pages of. Note: The value of $hierarchical has no bearing on whether $child_of returns hierarchical results. Default 0, or no restriction.<\/li> <li><b>'sort_order'<\/b><br\/><i>(string)<\/i> How to sort retrieved pages. Accepts 'ASC', 'DESC'. Default 'ASC'.<\/li> <li><b>'sort_column'<\/b><br\/><i>(string)<\/i> What columns to sort pages by, comma-separated. Accepts 'post_author', 'post_date', 'post_title', 'post_name', 'post_modified', 'menu_order', 'post_modified_gmt', 'post_parent', 'ID', 'rand', 'comment*count'. 'post*' can be omitted for any values that start with it. Default 'post_title'.<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool)<\/i> Whether to return pages hierarchically. If false in conjunction with $child_of also being false, both arguments will be disregarded. Default true.<\/li> <li><b>'exclude'<\/b><br\/><i>(array)<\/i> Array of page IDs to exclude. <\/li> <li><b>'include'<\/b><br\/><i>(array)<\/i> Array of page IDs to include. Cannot be used with $child_of, $parent, $exclude, $meta_key, $meta_value, or $hierarchical. <\/li> <li><b>'meta_key'<\/b><br\/><i>(string)<\/i> Only include pages with this meta key. <\/li> <li><b>'meta_value'<\/b><br\/><i>(string)<\/i> Only include pages with this meta value. Requires $meta_key. <\/li> <li><b>'authors'<\/b><br\/><i>(string)<\/i> A comma-separated list of author IDs. <\/li> <li><b>'parent'<\/b><br\/><i>(int)<\/i> Page ID to return direct children of. Default -1, or no restriction.<\/li> <li><b>'exclude_tree'<\/b><br\/><i>(string|array)<\/i> Comma-separated string or array of page IDs to exclude. <\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> The number of pages to return. Default 0, or all pages.<\/li> <li><b>'offset'<\/b><br\/><i>(int)<\/i> The number of pages to skip before returning. Requires $number. Default 0.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> The post type to query. Default 'page'.<\/li> <li><b>'post_status'<\/b><br\/><i>(string|array)<\/i> A comma-separated list or array of post statuses to include. Default 'publish'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "List of pages matching defaults or <code>$args<\/code>.",
        "rank": 0
    },
    "get_parent_theme_file_path": {
        "since": "4.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_parent_theme_file_path",
        "summary": "Retrieves the path of a file in the parent theme.",
        "description": "",
        "inputs": {
            "file": {
                "label": "file",
                "description": "File to return the path for in the template directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The path of the file.",
        "rank": 0
    },
    "get_parent_theme_file_uri": {
        "since": "4.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_parent_theme_file_uri",
        "summary": "Retrieves the URL of a file in the parent theme.",
        "description": "",
        "inputs": {
            "file": {
                "label": "file",
                "description": "File to return the URL for in the template directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The URL of the file.",
        "rank": 0
    },
    "get_password_reset_key": {
        "since": "4.4.0",
        "group": "Users",
        "type": "fct",
        "name": "get_password_reset_key",
        "summary": "Creates, stores, then returns a password reset key for user.",
        "description": "",
        "inputs": {
            "user": {
                "label": "user",
                "description": "User to retrieve password reset key for.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "Password reset key on success. WP_Error on error.",
        "rank": 0
    },
    "get_pending_comments_num": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_pending_comments_num",
        "summary": "Get the number of pending comments on a post or posts",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Either a single Post ID or an array of Post IDs",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "array"
        ],
        "return_description": "Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs",
        "rank": 0
    },
    "get_permalink": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_permalink",
        "summary": "Retrieves the full permalink for the current post or post ID.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "leavename": {
                "label": "leavename",
                "description": "Whether to keep post name or page name.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The permalink URL or false if post does not exist.",
        "rank": 0
    },
    "get_plugin_data": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_plugin_data",
        "summary": "Parses the plugin contents to retrieve plugin's metadata.",
        "description": "<p>The metadata of the plugin's data searches for the following in the plugin's header. All plugin data must be on its own line. For plugin description, it must not have any newlines or only parts of the description will be displayed and the same goes for the plugin data. The below is formatted for printing.<\/p> \/* Plugin Name: Name of Plugin Plugin URI: Link to plugin information Description: Plugin Description Author: Plugin author's name Author URI: Link to the author's web site Version: Must be set in the plugin for WordPress 2.3+ Text Domain: Optional. Unique identifier, should be same as the one used in load_plugin_textdomain() Domain Path: Optional. Only useful if the translations are located in a folder above the plugin's base path. For example, if .mo files are located in the locale folder then Domain Path will be \"\/locale\/\" and must have the first slash. Defaults to the base folder the plugin is located in. Network: Optional. Specify \"Network: true\" to require that a plugin is activated across all sites in an installation. This will prevent a plugin from being activated on a single site when Multisite is enabled. * \/ # Remove the space to close comment <p>Some users have issues with opening large files and manipulating the contents for want is usually the first 1kiB or 2kiB. This function stops pulling in the plugin contents when it has all of the required plugin data.<\/p> <p>The first 8kiB of the file will be pulled in and if the plugin data is not within that first 8kiB, then the plugin author should correct their plugin and move the plugin data headers to the top.<\/p> <p>The plugin file is assumed to have permissions to allow for scripts to read the file. This is not checked however and the file is only opened for reading.<\/p>",
        "inputs": {
            "plugin_file": {
                "label": "plugin_file",
                "description": "Absolute path to the main plugin file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "markup": {
                "label": "markup",
                "description": "If the returned data should have HTML markup applied.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "translate": {
                "label": "translate",
                "description": "If the returned data should be translated.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "{     Plugin data. Values will be empty if not supplied by the plugin.     @type string $Name        Name of the plugin. Should be unique.     @type string $Title       Title of the plugin and link to the plugin's site (if set).     @type string $Description Plugin description.     @type string $Author      Author's name.     @type string $AuthorURI   Author's website address (if set).     @type string $Version     Plugin version.     @type string $TextDomain  Plugin textdomain.     @type string $DomainPath  Plugins relative directory path to .mo files.     @type bool   $Network     Whether the plugin can only be activated network-wide. }",
        "rank": 0
    },
    "get_plugin_files": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_plugin_files",
        "summary": "Get a list of a plugin's files.",
        "description": "",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of files relative to the plugin root.",
        "rank": 0
    },
    "get_plugin_page_hook": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_plugin_page_hook",
        "summary": "",
        "description": "",
        "inputs": {
            "plugin_page": {
                "label": "plugin_page",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "parent_page": {
                "label": "parent_page",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_plugin_page_hookname": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "get_plugin_page_hookname",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin_page": {
                "label": "plugin_page",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "parent_page": {
                "label": "parent_page",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_plugin_updates": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_plugin_updates",
        "summary": "",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_plugins": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_plugins",
        "summary": "Check the plugins directory and retrieve all plugin files with plugin data.",
        "description": "<p>WordPress only supports plugin files in the base plugins directory (wp-content\/plugins) and in one directory above the plugins directory (wp-content\/plugins\/my-plugin). The file it looks for has the plugin data and must be found in those two locations. It is recommended to keep your plugin files in their own directories.<\/p> <p>The file with the plugin data is the file that will be included and therefore needs to have the main execution for the plugin. This does not mean everything must be contained in the file and it is recommended that the file be split for maintainability. Keep everything in one file for extreme optimization purposes.<\/p>",
        "inputs": {
            "plugin_folder": {
                "label": "plugin_folder",
                "description": "Relative path to single plugin folder.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key is the plugin file path and the value is an array of the plugin data.",
        "rank": 0
    },
    "get_post": {
        "since": "1.5.1",
        "group": "Post",
        "type": "fct",
        "name": "get_post",
        "summary": "Retrieves post data given a post ID or post object.",
        "description": "<p>See sanitize_post() for optional $filter values. Also, the parameter $post, must be given as a variable, since it is passed by reference.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "Type of filter to apply. Accepts 'raw', 'edit', 'db', or 'display'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "array",
            "null"
        ],
        "return_description": "Type corresponding to $output on success or null on failure.                            When $output is OBJECT, a <code>WP_Post<\/code> instance is returned.",
        "rank": 0
    },
    "get_post_ancestors": {
        "since": "2.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_ancestors",
        "summary": "Retrieve ancestors of a post.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Ancestor IDs or empty array if none are found.",
        "rank": 0
    },
    "get_post_class": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_class",
        "summary": "Retrieves an array of the class names for the post container element.",
        "description": "<p>The class names are many. If the post is a sticky, then the 'sticky' class name. The class 'hentry' is always added to each post. If the post has a post thumbnail, 'has-post-thumbnail' is added as a class. For each taxonomy that the post belongs to, a class will be added of the format '{$taxonomy}-{$slug}' - eg 'category-foo' or 'my_custom_taxonomy-bar'.<\/p> <p>The 'post_tag' taxonomy is a special case; the class has the 'tag-' prefix instead of 'post_tag-'. All class names are passed through the filter, {@see 'post_class'}, with the list of class names, followed by $class parameter value, with the post ID as the last parameter.<\/p>",
        "inputs": {
            "class": {
                "label": "class",
                "description": "Space-separated string or array of class names to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string[]",
                "label": "string[]"
            }
        },
        "return": [
            "string[]"
        ],
        "return_description": "Array of class names.",
        "rank": 0
    },
    "get_post_comments_feed_link": {
        "since": "2.2.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_comments_feed_link",
        "summary": "Retrieves the permalink for the post comments feed.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The permalink for the comments feed for the given post.",
        "rank": 0
    },
    "get_post_custom": {
        "since": "1.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_custom",
        "summary": "Retrieve post meta fields, based on post ID.",
        "description": "<p>The post meta fields are retrieved from the cache where possible, so the function is optimized to be called more than once.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Post meta for the given post.",
        "rank": 0
    },
    "get_post_custom_keys": {
        "since": "1.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_custom_keys",
        "summary": "Retrieve meta field names for a post.",
        "description": "<p>If there are no meta fields, then nothing (null) will be returned.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "void"
        ],
        "return_description": "Array of the keys, if retrieved.",
        "rank": 0
    },
    "get_post_custom_values": {
        "since": "1.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_custom_values",
        "summary": "Retrieve values for a custom post field.",
        "description": "<p>The parameters must not be considered optional. All of the post meta fields will be retrieved and only the meta field key values returned.<\/p>",
        "inputs": {
            "key": {
                "label": "key",
                "description": "Meta field key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "null"
        ],
        "return_description": "Meta field values.",
        "rank": 0
    },
    "get_post_embed_html": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_post_embed_html",
        "summary": "Retrieves the embed code for a specific post.",
        "description": "",
        "inputs": {
            "width": {
                "label": "width",
                "description": "The width for the response.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "The height for the response.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post ID or object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Embed code on success, false if post doesn't exist.",
        "rank": 0
    },
    "get_post_embed_url": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "fct",
        "name": "get_post_embed_url",
        "summary": "Retrieves the URL to embed a specific post in an iframe.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object. Defaults to the current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The post embed URL on success, false if the post doesn't exist.",
        "rank": 0
    },
    "get_post_field": {
        "since": "2.3.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_field",
        "summary": "Retrieve data from a post field based on Post ID.",
        "description": "<p>Examples of the post field will be, 'post_type', 'post_status', 'post_content', etc and based off of the post object property or key names.<\/p> <p>The context values are based off of the taxonomy filter functions and supported values are found within those functions.<\/p>",
        "inputs": {
            "field": {
                "label": "field",
                "description": "Post field name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "How to filter the field. Accepts 'raw', 'edit', 'db', or 'display'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The value of the post field on success, empty string on failure.",
        "rank": 0
    },
    "get_post_format": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_format",
        "summary": "Retrieve the format slug for a post",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Optional, default is the current post from the loop.",
                "type": "int",
                "types": [
                    "int",
                    "object",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The format if successful. False otherwise.",
        "rank": 0
    },
    "get_post_format_link": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_format_link",
        "summary": "Returns a link to a post format index.",
        "description": "",
        "inputs": {
            "format": {
                "label": "format",
                "description": "The post format slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error",
            "false"
        ],
        "return_description": "The post format term link.",
        "rank": 0
    },
    "get_post_format_slugs": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_format_slugs",
        "summary": "Retrieves the array of post format slugs.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The array of post format slugs as both keys and values.",
        "rank": 0
    },
    "get_post_format_string": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_format_string",
        "summary": "Returns a pretty, translated version of a post format slug",
        "description": "",
        "inputs": {
            "slug": {
                "label": "slug",
                "description": "A post format slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The translated post format name.",
        "rank": 0
    },
    "get_post_format_strings": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_format_strings",
        "summary": "Returns an array of post format slugs to their translated and pretty display versions",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The array of translated post format names.",
        "rank": 0
    },
    "get_post_galleries": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_post_galleries",
        "summary": "Retrieves galleries from the passed post's content.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "html": {
                "label": "html",
                "description": "Whether to return HTML or data in the array.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of arrays, each containing gallery data and srcs parsed               from the expanded shortcode.",
        "rank": 0
    },
    "get_post_galleries_images": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_post_galleries_images",
        "summary": "Retrieve the image srcs from galleries from a post's content, if present",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of lists, each containing image srcs parsed.               from an expanded shortcode",
        "rank": 0
    },
    "get_post_gallery": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_post_gallery",
        "summary": "Check a specified post's content for gallery and, if present, return the first",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "html": {
                "label": "html",
                "description": "Whether to return HTML or data. Default is true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Gallery data and srcs parsed from the expanded shortcode.",
        "rank": 0
    },
    "get_post_gallery_images": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "get_post_gallery_images",
        "summary": "Checks a post's content for galleries and return the image srcs for the first found gallery",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of a gallery's image srcs in order.",
        "rank": 0
    },
    "get_post_meta": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_meta",
        "summary": "Retrieves a post meta field for the given post ID.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The meta key to retrieve. By default, returns data for all keys.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "If true, returns only the first value for the specified meta key. This parameter has no effect if $key is not specified.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Will be an array if $single is false. Will be value of the meta               field if $single is true.",
        "rank": 0
    },
    "get_post_meta_by_id": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_post_meta_by_id",
        "summary": "Get post meta data by meta ID.",
        "description": "",
        "inputs": {
            "mid": {
                "label": "mid",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_post_mime_type": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_mime_type",
        "summary": "Retrieve the mime type of an attachment based on the ID.",
        "description": "<p>This function can be used with any post type, but it makes more sense with attachments.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The mime type on success, false on failure.",
        "rank": 0
    },
    "get_post_mime_types": {
        "since": "2.9.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_mime_types",
        "summary": "Get default post mime types.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of post mime types.",
        "rank": 0
    },
    "get_post_modified_time": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_modified_time",
        "summary": "Retrieve the time at which the post was last modified.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "Format to use for retrieving the time the post was modified. Either 'G', 'U', or php date format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'U'",
                "required": false
            },
            "gmt": {
                "label": "gmt",
                "description": "Whether to retrieve the GMT time.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "WP_Post object or ID. Default is global $post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "translate": {
                "label": "translate",
                "description": "Whether to translate the time string.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "false"
        ],
        "return_description": "Formatted date string or Unix timestamp if <code>$d<\/code> is 'U' or 'G'. False on failure.",
        "rank": 0
    },
    "get_post_permalink": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_permalink",
        "summary": "Retrieves the permalink for a post of a custom post type.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "leavename": {
                "label": "leavename",
                "description": "defaults to false. Whether to keep post name.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "sample": {
                "label": "sample",
                "description": "defaults to false. Is it a sample permalink.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "The post permalink.",
        "rank": 0
    },
    "get_post_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_reply_link",
        "summary": "Retrieve HTML content for reply to post link.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Override default arguments. <ul><li><b>'add_below'<\/b><br\/><i>(string)<\/i> The first part of the selector used to identify the comment to respond below. The resulting value is passed as the first parameter to addComment.moveForm(), concatenated as $add_below-$comment-&gt;comment_ID. Default is 'post'.<\/li> <li><b>'respond_id'<\/b><br\/><i>(string)<\/i> The selector identifying the responding comment. Passed as the third parameter to addComment.moveForm(), and appended to the link URL as a hash value. Default 'respond'.<\/li> <li><b>'reply_text'<\/b><br\/><i>(string)<\/i> Text of the Reply link. Default is 'Leave a Comment'.<\/li> <li><b>'login_text'<\/b><br\/><i>(string)<\/i> Text of the link to reply if logged out. Default is 'Log in to leave a Comment'.<\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> Text or HTML to add before the reply link. <\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> Text or HTML to add after the reply link. <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object the comment is going to be displayed on. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "null",
            "string"
        ],
        "return_description": "Link to show comment form, if successful. False, if comments are closed.",
        "rank": 0
    },
    "get_post_stati": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_stati",
        "summary": "Get a list of post statuses.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or string of post status arguments to compare against properties of the global $wp_post_statuses objects.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The type of output to return, either 'names' or 'objects'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. 'or' means only one element from the array needs to match; 'and' means all elements must match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'and'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of post status names or objects.",
        "rank": 0
    },
    "get_post_status": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_status",
        "summary": "Retrieve the post status based on the post ID.",
        "description": "<p>If the post ID is of an attachment, then the parent post status will be given instead.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post..",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Post status on success, false on failure.",
        "rank": 0
    },
    "get_post_status_object": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_status_object",
        "summary": "Retrieve a post status object by name.",
        "description": "",
        "inputs": {
            "post_status": {
                "label": "post_status",
                "description": "The name of a registered post status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "null"
        ],
        "return_description": "A post status object.",
        "rank": 0
    },
    "get_post_statuses": {
        "since": "2.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_statuses",
        "summary": "Retrieve all of the WordPress supported post statuses.",
        "description": "<p>Posts have a limited set of valid status values, this provides the post_status values and descriptions.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of post statuses.",
        "rank": 0
    },
    "get_post_taxonomies": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_post_taxonomies",
        "summary": "Retrieve all taxonomies of a post with just the names.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of all taxonomy names for the given post.",
        "rank": 0
    },
    "get_post_thumbnail_id": {
        "since": "2.9.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_thumbnail_id",
        "summary": "Retrieve post thumbnail ID.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int"
        ],
        "return_description": "Post thumbnail ID or empty string.",
        "rank": 0
    },
    "get_post_time": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_time",
        "summary": "Retrieve the time at which the post was written.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "Format to use for retrieving the time the post was written. Either 'G', 'U', or php date format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'U'",
                "required": false
            },
            "gmt": {
                "label": "gmt",
                "description": "Whether to retrieve the GMT time.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "WP_Post object or ID. Default is global $post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "translate": {
                "label": "translate",
                "description": "Whether to translate the time string.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "false"
        ],
        "return_description": "Formatted date string or Unix timestamp if <code>$d<\/code> is 'U' or 'G'. False on failure.",
        "rank": 0
    },
    "get_post_type": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_type",
        "summary": "Retrieves the post type of the current post or of a given post.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Post type on success, false on failure.",
        "rank": 0
    },
    "get_post_type_archive_feed_link": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_type_archive_feed_link",
        "summary": "Retrieves the permalink for a post type archive feed.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Post type",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The post type feed permalink.",
        "rank": 0
    },
    "get_post_type_archive_link": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_type_archive_link",
        "summary": "Retrieves the permalink for a post type archive.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The post type archive permalink.",
        "rank": 0
    },
    "get_post_type_archive_template": {
        "since": "3.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_post_type_archive_template",
        "summary": "Retrieve path of post type archive template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'archive'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to archive template file.",
        "rank": 0
    },
    "get_post_type_capabilities": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_type_capabilities",
        "summary": "Build an object with all post type capabilities out of a post type object",
        "description": "<p>Post type capabilities use the 'capability_type' argument as a base, if the capability is not set in the 'capabilities' argument array or if the 'capabilities' argument is not supplied.<\/p> <p>The capability_type argument can optionally be registered as an array, with the first value being singular and the second plural, e.g. array('story, 'stories') Otherwise, an 's' will be added to the value for the plural form. After registration, capability_type will always be a string of the singular value.<\/p> <p>By default, seven keys are accepted as part of the capabilities array:<\/p> <ul> <li> <p>edit_post, read_post, and delete_post are meta capabilities, which are then generally mapped to corresponding primitive capabilities depending on the context, which would be the post being edited\/read\/deleted and the user or role being checked. Thus these capabilities would generally not be granted directly to users or roles.<\/p> <\/li> <li> <p>edit_posts - Controls whether objects of this post type can be edited.<\/p> <\/li> <li> <p>edit_others_posts - Controls whether objects of this type owned by other users can be edited. If the post type does not support an author, then this will behave like edit_posts.<\/p> <\/li> <li> <p>publish_posts - Controls publishing objects of this post type.<\/p> <\/li> <li> <p>read_private_posts - Controls whether private objects can be read.<\/p> <\/li> <\/ul> <p>These four primitive capabilities are checked in core in various locations. There are also seven other primitive capabilities which are not referenced directly in core, except in map_meta_cap(), which takes the three aforementioned meta capabilities and translates them into one or more primitive capabilities that must then be checked against the user or role, depending on the context.<\/p> <ul> <li>read - Controls whether objects of this post type can be read.<\/li> <li>delete_posts - Controls whether objects of this post type can be deleted.<\/li> <li>delete_private_posts - Controls whether private objects can be deleted.<\/li> <li>delete_published_posts - Controls whether published objects can be deleted.<\/li> <li>delete_others_posts - Controls whether objects owned by other users can be can be deleted. If the post type does not support an author, then this will behave like delete_posts.<\/li> <li>edit_private_posts - Controls whether private objects can be edited.<\/li> <li>edit_published_posts - Controls whether published objects can be edited.<\/li> <\/ul> <p>These additional capabilities are only used in map_meta_cap(). Thus, they are only assigned by default if the post type is registered with the 'map_meta_cap' argument set to true (default is false).<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Post type registration arguments.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "Object with all the capabilities as member variables.",
        "rank": 0
    },
    "get_post_type_object": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_type_object",
        "summary": "Retrieves a post type object by name.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "The name of a registered post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post_Type",
            "null"
        ],
        "return_description": "WP_Post_Type object if it exists, null otherwise.",
        "rank": 0
    },
    "get_post_types": {
        "since": "2.9.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_types",
        "summary": "Get a list of all registered post type objects.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "An array of key =&gt; value arguments to match against the post type objects.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The type of output to return. Accepts post type 'names' or 'objects'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. 'or' means only one element from the array needs to match; 'and' means all elements must match; 'not' means no elements may match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'and'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string[]",
            "WP_Post_Type[]"
        ],
        "return_description": "An array of post type names or objects.",
        "rank": 0
    },
    "get_post_types_by_support": {
        "since": "4.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_post_types_by_support",
        "summary": "Retrieves a list of post type names that support a specific feature.",
        "description": "",
        "inputs": {
            "feature": {
                "label": "feature",
                "description": "Single feature or an array of features the post types should support.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. 'or' means only one element from the array needs to match; 'and' means all elements must match; 'not' means no elements may match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'and'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of post type names.",
        "rank": 0
    },
    "get_posts": {
        "since": "1.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_posts",
        "summary": "Retrieves an array of the latest posts, or posts matching the given criteria.",
        "description": "<p>The defaults are as follows:<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Arguments to retrieve posts. See WP_Query::parse_query() for all available arguments. <ul><li><b>'numberposts'<\/b><br\/><i>(int)<\/i> Total number of posts to retrieve. Is an alias of $posts_per_page in WP_Query. Accepts -1 for all. Default 5.<\/li> <li><b>'category'<\/b><br\/><i>(int|string)<\/i> Category ID or comma-separated list of IDs (this or any children). Is an alias of $cat in WP_Query. Default 0.<\/li> <li><b>'include'<\/b><br\/><i>(array)<\/i> An array of post IDs to retrieve, sticky posts will be included. Is an alias of $post__in in WP_Query. Default empty array.<\/li> <li><b>'exclude'<\/b><br\/><i>(array)<\/i> An array of post IDs not to retrieve. Default empty array.<\/li> <li><b>'suppress_filters'<\/b><br\/><i>(bool)<\/i> Whether to suppress filters. Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post[]",
            "int[]"
        ],
        "return_description": "Array of post objects or post IDs.",
        "rank": 0
    },
    "get_posts_by_author_sql": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "get_posts_by_author_sql",
        "summary": "Retrieve the post SQL based on capability, author, and type.",
        "description": "",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Single post type or an array of post types.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "full": {
                "label": "full",
                "description": "Returns a full WHERE statement instead of just an 'andalso' term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "post_author": {
                "label": "post_author",
                "description": "Query posts having a single author ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "public_only": {
                "label": "public_only",
                "description": "Only return public posts. Skips cap checks for $current_user.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "SQL WHERE code that can be added to a query.",
        "rank": 0
    },
    "get_posts_nav_link": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_posts_nav_link",
        "summary": "Retrieves the post pages link navigation for previous and next pages.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Arguments to build the post pages link navigation. <ul><li><b>'sep'<\/b><br\/><i>(string)<\/i> Separator character. Default '&#8212;'.<\/li> <li><b>'prelabel'<\/b><br\/><i>(string)<\/i> Link text to display for the previous page link. Default '&laquo; Previous Page'.<\/li> <li><b>'nxtlabel'<\/b><br\/><i>(string)<\/i> Link text to display for the next page link. Default 'Next Page &raquo;'.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The posts link navigation.",
        "rank": 0
    },
    "get_preferred_from_update_core": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "get_preferred_from_update_core",
        "summary": "Selects the first update version from the update_core option.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array",
            "false"
        ],
        "return_description": "The response from the API on success, false on failure.",
        "rank": 0
    },
    "get_preview_post_link": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_preview_post_link",
        "summary": "Retrieves the URL used for the post preview.",
        "description": "<p>Allows additional query args to be appended.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "query_args": {
                "label": "query_args",
                "description": "Array of additional query args to be appended to the link.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "preview_link": {
                "label": "preview_link",
                "description": "Base preview link to be used if it should differ from the post permalink.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "URL used for the post preview, or null if the post does not exist.",
        "rank": 0
    },
    "get_previous_comments_link": {
        "since": "2.7.1",
        "group": "Template",
        "type": "fct",
        "name": "get_previous_comments_link",
        "summary": "Retrieves the link to the previous comments page.",
        "description": "",
        "inputs": {
            "label": {
                "label": "label",
                "description": "Label for comments link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML-formatted link for the previous page of comments.",
        "rank": 0
    },
    "get_previous_post": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_previous_post",
        "summary": "Retrieves the previous post that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether post should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "string",
            "WP_Post"
        ],
        "return_description": "Post object if successful. Null if global $post is not set. Empty string if no                             corresponding post exists.",
        "rank": 0
    },
    "get_previous_post_link": {
        "since": "3.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_previous_post_link",
        "summary": "Retrieves the previous post link that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "format": {
                "label": "format",
                "description": "Link anchor format. Default '&laquo; %link'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'&laquo; %link'",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Link permalink format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The link URL of the previous post in relation to the current post.",
        "rank": 0
    },
    "get_previous_posts_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_previous_posts_link",
        "summary": "Retrieves the previous posts page link.",
        "description": "",
        "inputs": {
            "label": {
                "label": "label",
                "description": "Previous page link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML-formatted previous page link.",
        "rank": 0
    },
    "get_previous_posts_page_link": {
        "since": "2.0.10",
        "group": "Template",
        "type": "fct",
        "name": "get_previous_posts_page_link",
        "summary": "Retrieves the previous posts page link.",
        "description": "<p>Will only return string, if not on a single page or post.<\/p> <p>Backported to 2.0.10 from 2.1.3.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The link for the previous posts page.",
        "rank": 0
    },
    "get_privacy_policy_url": {
        "since": "4.9.6",
        "group": "Template",
        "type": "fct",
        "name": "get_privacy_policy_url",
        "summary": "Retrieves the URL to the privacy policy page.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The URL to the privacy policy page. Empty string if it doesn't exist.",
        "rank": 0
    },
    "get_private_posts_cap_sql": {
        "since": "2.2.0",
        "group": "Post",
        "type": "fct",
        "name": "get_private_posts_cap_sql",
        "summary": "Retrieve the private post SQL based on capability.",
        "description": "<p>This function provides a standardized way to appropriately select on the post_status of a post type. The function will return a piece of SQL code that can be added to a WHERE clause; this SQL is constructed to allow all published posts, and all private posts to which the user has access.<\/p>",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Single post type or an array of post types. Currently only supports 'post' or 'page'.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "SQL code that can be added to a where clause.",
        "rank": 0
    },
    "get_pung": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_pung",
        "summary": "Retrieve URLs already pinged for a post.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "string[]"
        ],
        "return_description": "Array of URLs already pinged for the given post, false if the post is not found.",
        "rank": 0
    },
    "get_queried_object": {
        "since": "3.1.0",
        "group": "Query",
        "type": "fct",
        "name": "get_queried_object",
        "summary": "Retrieve the currently-queried object.",
        "description": "<p>Wrapper for WP_Query::get_queried_object().<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "Queried object.",
        "rank": 0
    },
    "get_queried_object_id": {
        "since": "3.1.0",
        "group": "Query",
        "type": "fct",
        "name": "get_queried_object_id",
        "summary": "Retrieve ID of the current queried object.",
        "description": "<p>Wrapper for WP_Query::get_queried_object_id().<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "ID of the queried object.",
        "rank": 0
    },
    "get_query_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_query_template",
        "summary": "Retrieve path to a template",
        "description": "<p>Used to quickly retrieve the path of a template without including the file extension. It will also check the parent theme, if the file exists, with the use of locate<em>template(). Allows for more generic template location without the use of the other get<\/em>*_template() functions.<\/p>",
        "inputs": {
            "type": {
                "label": "type",
                "description": "Filename without extension.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "templates": {
                "label": "templates",
                "description": "An optional list of template candidates",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to template file.",
        "rank": 0
    },
    "get_query_var": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "get_query_var",
        "summary": "Retrieve variable in the WP_Query class.",
        "description": "",
        "inputs": {
            "var": {
                "label": "var",
                "description": "The variable key to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "Value to return if the query variable is not set.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Contents of the query variable.",
        "rank": 0
    },
    "get_random_header_image": {
        "since": "3.2.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_random_header_image",
        "summary": "Get random header image url from registered images in theme.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Path to header image",
        "rank": 0
    },
    "get_raw_theme_root": {
        "since": "3.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_raw_theme_root",
        "summary": "Get the raw theme root relative to the content directory with no filters applied.",
        "description": "",
        "inputs": {
            "stylesheet_or_template": {
                "label": "stylesheet_or_template",
                "description": "The stylesheet or template name of the theme",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "skip_cache": {
                "label": "skip_cache",
                "description": "Whether to skip the cache. Defaults to false, meaning the cache is used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Theme root",
        "rank": 0
    },
    "get_registered_meta_keys": {
        "since": "4.6.0",
        "group": "Meta",
        "type": "fct",
        "name": "get_registered_meta_keys",
        "summary": "Retrieves a list of registered meta keys for an object type.",
        "description": "",
        "inputs": {
            "object_type": {
                "label": "object_type",
                "description": "The type of object. Post, comment, user, term.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_subtype": {
                "label": "object_subtype",
                "description": "The subtype of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of registered meta keys.",
        "rank": 0
    },
    "get_registered_metadata": {
        "since": "4.6.0",
        "group": "Meta",
        "type": "fct",
        "name": "get_registered_metadata",
        "summary": "Retrieves registered metadata for a specified object.",
        "description": "<p>The results include both meta that is registered specifically for the object's subtype and meta that is registered for the entire object type.<\/p>",
        "inputs": {
            "object_type": {
                "label": "object_type",
                "description": "Type of object to request metadata for. (e.g. comment, post, term, user)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object the metadata is for.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Registered metadata key. If not specified, retrieve all registered metadata for the specified object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "A single value or array of values for a key if specified. An array of all registered keys               and values for an object ID if not. False if a given $meta_key is not registered.",
        "rank": 0
    },
    "get_registered_nav_menus": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "get_registered_nav_menus",
        "summary": "Retrieves all registered navigation menu locations in a theme.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Registered navigation menu locations. If none are registered, an empty array.",
        "rank": 0
    },
    "get_registered_settings": {
        "since": "4.7.0",
        "group": "Option",
        "type": "fct",
        "name": "get_registered_settings",
        "summary": "Retrieves an array of registered settings.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of registered settings, keyed by option name.",
        "rank": 0
    },
    "get_rest_url": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "fct",
        "name": "get_rest_url",
        "summary": "Retrieves the URL to a REST endpoint on a site.",
        "description": "<p>Note: The returned URL is NOT escaped.<\/p>",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Blog ID. Default of null returns URL for current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "REST route.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'\/'",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Sanitization scheme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'rest'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full URL to the endpoint.",
        "rank": 0
    },
    "get_role": {
        "since": "2.0.0",
        "group": "Users",
        "type": "fct",
        "name": "get_role",
        "summary": "Retrieve role object.",
        "description": "",
        "inputs": {
            "role": {
                "label": "role",
                "description": "Role name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Role",
            "null"
        ],
        "return_description": "WP_Role object if found, null if the role does not exist.",
        "rank": 0
    },
    "get_rss": {
        "since": "1.5.0",
        "group": "External",
        "type": "fct",
        "name": "get_rss",
        "summary": "Display RSS items in HTML list items.",
        "description": "<p>You have to specify which HTML list you want, either ordered or unordered before using the function. You also have to specify how many items you wish to display. You can't display all of them like you can with wp_rss() function.<\/p>",
        "inputs": {
            "url": {
                "label": "url",
                "description": "URL of feed to display. Will not auto sense feed URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "num_items": {
                "label": "num_items",
                "description": "Number of items to display, default is all.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "5",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False on failure.",
        "rank": 0
    },
    "get_sample_permalink": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_sample_permalink",
        "summary": "Get a sample permalink based off of the post name.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Title to override the post's current title when generating the post name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Name to override the post name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array containing the sample permalink with placeholder for the post name, and the post name.",
        "rank": 0
    },
    "get_sample_permalink_html": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_sample_permalink_html",
        "summary": "Returns the HTML of the sample permalink slug editor.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "new_title": {
                "label": "new_title",
                "description": "New title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "new_slug": {
                "label": "new_slug",
                "description": "New slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTML of the sample permalink slug editor.",
        "rank": 0
    },
    "get_search_comments_feed_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_comments_feed_link",
        "summary": "Retrieves the permalink for the search results comments feed.",
        "description": "",
        "inputs": {
            "search_query": {
                "label": "search_query",
                "description": "Search query.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The comments feed search results permalink.",
        "rank": 0
    },
    "get_search_feed_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_feed_link",
        "summary": "Retrieves the permalink for the search results feed.",
        "description": "",
        "inputs": {
            "search_query": {
                "label": "search_query",
                "description": "Search query.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The search results feed permalink.",
        "rank": 0
    },
    "get_search_form": {
        "since": "2.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_form",
        "summary": "Display search form.",
        "description": "<p>Will first attempt to locate the searchform.php file in either the child or the parent, then load it. If it doesn't exist, then the default search form will be displayed. The default search form is HTML, which will be displayed. There is a filter applied to the search form HTML in order to edit or replace it. The filter is {@see 'get_search_form'}.<\/p> <p>This function is primarily used by themes which want to hardcode the search form into the sidebar and also by the search widget in WordPress.<\/p> <p>There is also an action that is called whenever the function is run called, {@see 'pre_get_search_form'}. This can be useful for outputting JavaScript that the search relies on or various formatting that applies to the beginning of the search. To give a few examples of what it can be used for.<\/p>",
        "inputs": {
            "echo": {
                "label": "echo",
                "description": "Default to echo and not return the form.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when $echo is false.",
        "rank": 0
    },
    "get_search_link": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_link",
        "summary": "Retrieves the permalink for a search.",
        "description": "",
        "inputs": {
            "query": {
                "label": "query",
                "description": "The query string to use. If empty the current query is used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The search permalink.",
        "rank": 0
    },
    "get_search_query": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_query",
        "summary": "Retrieves the contents of the search WordPress query variable.",
        "description": "<p>The search query string is passed through esc_attr() to ensure that it is safe for placing in an html attribute.<\/p>",
        "inputs": {
            "escaped": {
                "label": "escaped",
                "description": "Whether the result is escaped. Only use when you are later escaping it. Do not use unescaped.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_search_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_search_template",
        "summary": "Retrieve path of search template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'search'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to search template file.",
        "rank": 0
    },
    "get_settings_errors": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_settings_errors",
        "summary": "Fetch settings errors registered by add_settings_error().",
        "description": "<p>Checks the $wp_settings_errors array for any errors declared during the current pageload and returns them.<\/p> <p>If changes were just submitted ($_GET['settings-updated']) and settings errors were saved to the 'settings_errors' transient then those errors will be returned instead. This is used to pass errors back across pageloads.<\/p> <p>Use the $sanitize argument to manually re-sanitize the option before returning errors. This is useful if you have errors or notices you want to show even when the user hasn't submitted data (i.e. when they first load an options page, or in the {@see 'admin_notices'} action hook).<\/p>",
        "inputs": {
            "setting": {
                "label": "setting",
                "description": "slug title of a specific setting whose errors you want.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "sanitize": {
                "label": "sanitize",
                "description": "Whether to re-sanitize the setting value before returning errors.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of settings errors.",
        "rank": 0
    },
    "get_shortcode_atts_regex": {
        "since": "4.4.0",
        "group": "Shortcodes",
        "type": "fct",
        "name": "get_shortcode_atts_regex",
        "summary": "Retrieve the shortcode attributes regex.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The shortcode attribute regular expression",
        "rank": 0
    },
    "get_shortcode_regex": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "fct",
        "name": "get_shortcode_regex",
        "summary": "Retrieve the shortcode regular expression for searching.",
        "description": "<p>The regular expression combines the shortcode tags in the regular expression in a regex class.<\/p> <p>The regular expression contains 6 different sub matches to help with parsing.<\/p> <p>1 - An extra [ to allow for escaping shortcodes with double [[]] 2 - The shortcode name 3 - The shortcode argument list 4 - The self closing \/ 5 - The content of a shortcode when it wraps some content. 6 - An extra ] to allow for escaping shortcodes with double [[]]<\/p>",
        "inputs": {
            "tagnames": {
                "label": "tagnames",
                "description": "List of shortcodes to find. Defaults to all registered shortcodes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The shortcode search regular expression",
        "rank": 0
    },
    "get_sidebar": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "get_sidebar",
        "summary": "Load sidebar template.",
        "description": "<p>Includes the sidebar template for a theme or if a name is specified then a specialised sidebar will be included.<\/p> <p>For the parameter, if the file is called &quot;sidebar-special.php&quot; then specify &quot;special&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The name of the specialised sidebar.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_single_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_single_template",
        "summary": "Retrieve path of single template in current or parent template. Applies to single Posts, single Attachments, and single custom post types.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>{Post Type Template}.php<\/li> <li>single-{post_type}-{post_name}.php<\/li> <li>single-{post_type}.php<\/li> <li>single.php<\/li> <p>An example of this is:<\/p> <li>templates\/full-width.php<\/li> <li>single-post-hello-world.php<\/li> <li>single-post.php<\/li> <li>single.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'single'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to single template file.",
        "rank": 0
    },
    "get_singular_template": {
        "since": "4.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_singular_template",
        "summary": "Retrieves the path of the singular template in current or parent template.",
        "description": "<p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'singular'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to singular template file",
        "rank": 0
    },
    "get_site": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_site",
        "summary": "Retrieves site data given a site ID or site object.",
        "description": "<p>Site data will be cached and returned after being passed through a filter. If the provided site is empty, the current site global will be used.<\/p>",
        "inputs": {
            "site": {
                "label": "site",
                "description": "Site to retrieve. Default is the current site.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Site",
            "null"
        ],
        "return_description": "The site object or null if not found.",
        "rank": 0
    },
    "get_site_by_path": {
        "since": "3.9.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_site_by_path",
        "summary": "Retrieves the closest matching site object by its domain and path.",
        "description": "<p>This will not necessarily return an exact match for a domain and path. Instead, it breaks the domain and path into pieces that are then used to match the closest possibility from a query.<\/p> <p>The intent of this method is to match a site object during bootstrap for a requested site address<\/p>",
        "inputs": {
            "domain": {
                "label": "domain",
                "description": "Domain to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Path to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "segments": {
                "label": "segments",
                "description": "Path segments to use. Defaults to null, or the full path.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Site",
            "false"
        ],
        "return_description": "Site object if successful. False when no site is found.",
        "rank": 0
    },
    "get_site_icon_url": {
        "since": "4.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_site_icon_url",
        "summary": "Returns the Site Icon URL.",
        "description": "",
        "inputs": {
            "size": {
                "label": "size",
                "description": "Size of the site icon. Default 512 (pixels).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "512",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Fallback url if no site icon is found.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog to get the site icon for. Default current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Site Icon URL.",
        "rank": 0
    },
    "get_site_meta": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_site_meta",
        "summary": "Retrieves metadata for a site.",
        "description": "",
        "inputs": {
            "site_id": {
                "label": "site_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The meta key to retrieve. By default, returns data for all keys.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "Whether to return a single value.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Will be an array if $single is false. Will be value of meta data               field if $single is true.",
        "rank": 0
    },
    "get_site_option": {
        "since": "2.8.0",
        "group": "Option",
        "type": "fct",
        "name": "get_site_option",
        "summary": "Retrieve an option value for the current network based on name of option.",
        "description": "",
        "inputs": {
            "option": {
                "label": "option",
                "description": "Name of option to retrieve. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "value to return if option doesn't exist.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Whether to use cache. Multisite only. Always set to true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value set for the option.",
        "rank": 0
    },
    "get_site_screen_help_sidebar_content": {
        "since": "4.9.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_site_screen_help_sidebar_content",
        "summary": "Returns the content for the help sidebar on the Edit Site screens.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Help sidebar content.",
        "rank": 0
    },
    "get_site_screen_help_tab_args": {
        "since": "4.9.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_site_screen_help_tab_args",
        "summary": "Returns the arguments for the help tab on the Edit Site screens.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Help tab arguments.",
        "rank": 0
    },
    "get_site_transient": {
        "since": "2.9.0",
        "group": "Option",
        "type": "fct",
        "name": "get_site_transient",
        "summary": "Get the value of a site transient.",
        "description": "<p>If the transient does not exist, does not have a value, or has expired, then the return value will be false.<\/p>",
        "inputs": {
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value of transient.",
        "rank": 0
    },
    "get_site_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_site_url",
        "summary": "Retrieves the URL for a given site where WordPress application files (e.g. wp-blog-header.php or the wp-admin\/ folder) are accessible.",
        "description": "<p>Returns the 'site_url' option with the appropriate protocol, 'https' if is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID. Default null (current site).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the site URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the site URL context. Accepts 'http', 'https', 'login', 'login_post', 'admin', or 'relative'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Site URL link with optional path appended.",
        "rank": 0
    },
    "get_sites": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_sites",
        "summary": "Retrieves a list of sites matching requested arguments.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or query string of site query parameters. <ul><li><b>'site__in'<\/b><br\/><i>(array)<\/i> Array of site IDs to include. <\/li> <li><b>'site__not_in'<\/b><br\/><i>(array)<\/i> Array of site IDs to exclude. <\/li> <li><b>'count'<\/b><br\/><i>(bool)<\/i> Whether to return a site count (true) or array of site objects. Default false.<\/li> <li><b>'date_query'<\/b><br\/><i>(array)<\/i> Date query clauses to limit sites by. See WP_Date_Query. Default null.<\/li> <li><b>'fields'<\/b><br\/><i>(string)<\/i> Site fields to return. Accepts 'ids' (returns an array of site IDs) or empty (returns an array of complete site objects). <\/li> <li><b>'ID'<\/b><br\/><i>(int)<\/i> A site ID to only return that site. <\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> Maximum number of sites to retrieve. Default 100.<\/li> <li><b>'offset'<\/b><br\/><i>(int)<\/i> Number of sites to offset the query. Used to build LIMIT clause. Default 0.<\/li> <li><b>'no_found_rows'<\/b><br\/><i>(bool)<\/i> Whether to disable the SQL_CALC_FOUND_ROWS query. Default true.<\/li> <li><b>'orderby'<\/b><br\/><i>(string|array)<\/i> Site status or array of statuses. Accepts 'id', 'domain', 'path', 'network_id', 'last_updated', 'registered', 'domain_length', 'path_length', 'site__in' and 'network__in'. Also accepts false, an empty array, or 'none' to disable ORDER BY clause. Default 'id'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> How to order retrieved sites. Accepts 'ASC', 'DESC'. Default 'ASC'.<\/li> <li><b>'network_id'<\/b><br\/><i>(int)<\/i> Limit results to those affiliated with a given network ID. If 0, include all networks. Default 0.<\/li> <li><b>'network__in'<\/b><br\/><i>(array)<\/i> Array of network IDs to include affiliated sites for. <\/li> <li><b>'network__not_in'<\/b><br\/><i>(array)<\/i> Array of network IDs to exclude affiliated sites for. <\/li> <li><b>'domain'<\/b><br\/><i>(string)<\/i> Limit results to those affiliated with a given domain. <\/li> <li><b>'domain__in'<\/b><br\/><i>(array)<\/i> Array of domains to include affiliated sites for. <\/li> <li><b>'domain__not_in'<\/b><br\/><i>(array)<\/i> Array of domains to exclude affiliated sites for. <\/li> <li><b>'path'<\/b><br\/><i>(string)<\/i> Limit results to those affiliated with a given path. <\/li> <li><b>'path__in'<\/b><br\/><i>(array)<\/i> Array of paths to include affiliated sites for. <\/li> <li><b>'path__not_in'<\/b><br\/><i>(array)<\/i> Array of paths to exclude affiliated sites for. <\/li> <li><b>'public'<\/b><br\/><i>(int)<\/i> Limit results to public sites. Accepts '1' or '0'. <\/li> <li><b>'archived'<\/b><br\/><i>(int)<\/i> Limit results to archived sites. Accepts '1' or '0'. <\/li> <li><b>'mature'<\/b><br\/><i>(int)<\/i> Limit results to mature sites. Accepts '1' or '0'. <\/li> <li><b>'spam'<\/b><br\/><i>(int)<\/i> Limit results to spam sites. Accepts '1' or '0'. <\/li> <li><b>'deleted'<\/b><br\/><i>(int)<\/i> Limit results to deleted sites. Accepts '1' or '0'. <\/li> <li><b>'lang_id'<\/b><br\/><i>(int)<\/i> Limit results to a language ID. <\/li> <li><b>'lang__in'<\/b><br\/><i>(array)<\/i> Array of language IDs to include affiliated sites for. <\/li> <li><b>'lang__not_in'<\/b><br\/><i>(array)<\/i> Array of language IDs to exclude affiliated sites for. <\/li> <li><b>'search'<\/b><br\/><i>(string)<\/i> Search term(s) to retrieve matching sites for. <\/li> <li><b>'search_columns'<\/b><br\/><i>(array)<\/i> Array of column names to be searched. Accepts 'domain' and 'path'. <\/li> <li><b>'update_site_cache'<\/b><br\/><i>(bool)<\/i> Whether to prime the cache for found sites. Default true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "int"
        ],
        "return_description": "List of WP_Site objects, a list of site ids when 'fields' is set to 'ids',                   or the number of sites when 'count' is passed as a query var.",
        "rank": 0
    },
    "get_sitestats": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_sitestats",
        "summary": "Gets the network's site and user counts.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Site and user count for the network.",
        "rank": 0
    },
    "get_space_allowed": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "get_space_allowed",
        "summary": "Returns the upload quota for the current blog.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Quota in megabytes",
        "rank": 0
    },
    "get_space_used": {
        "since": "3.5.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_space_used",
        "summary": "Returns the space used by the current blog.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Used space in megabytes",
        "rank": 0
    },
    "get_status_header_desc": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_status_header_desc",
        "summary": "Retrieve the description for the HTTP status.",
        "description": "",
        "inputs": {
            "code": {
                "label": "code",
                "description": "HTTP status code.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Empty string if not found, or description if found.",
        "rank": 0
    },
    "get_stylesheet": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_stylesheet",
        "summary": "Retrieve name of the current stylesheet.",
        "description": "<p>The theme name that the administrator has currently set the front end theme as.<\/p> <p>For all intents and purposes, the template name and the stylesheet name are going to be the same for most cases.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Stylesheet name.",
        "rank": 0
    },
    "get_stylesheet_directory": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_stylesheet_directory",
        "summary": "Retrieve stylesheet directory path for current theme.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Path to current theme directory.",
        "rank": 0
    },
    "get_stylesheet_directory_uri": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_stylesheet_directory_uri",
        "summary": "Retrieve stylesheet directory URI.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_stylesheet_uri": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_stylesheet_uri",
        "summary": "Retrieves the URI of current theme stylesheet.",
        "description": "<p>The stylesheet file name is 'style.css' which is appended to the stylesheet directory URI path. See get_stylesheet_directory_uri().<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_subdirectory_reserved_names": {
        "since": "4.4.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_subdirectory_reserved_names",
        "summary": "Retrieves a list of reserved site on a sub-directory Multisite installation.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$names Array of reserved subdirectory names.",
        "rank": 0
    },
    "get_submit_button": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_submit_button",
        "summary": "Returns a submit button, with provided text and appropriate class",
        "description": "",
        "inputs": {
            "text": {
                "label": "text",
                "description": "The text of the button. Default 'Save Changes'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "The type and CSS class(es) of the button. Core values include 'primary', 'small', and 'large'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'primary large'",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The HTML name of the submit button. Defaults to &quot;submit&quot;. If no id attribute is given in $other_attributes below, $name will be used as the button's id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'submit'",
                "required": false
            },
            "wrap": {
                "label": "wrap",
                "description": "True if the output button should be wrapped in a paragraph tag, false otherwise.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "other_attributes": {
                "label": "other_attributes",
                "description": "Other attributes that should be output with the button, mapping attributes to their values, such as array( 'tabindex' =&gt; '1' ). These attributes will be output as attribute=&quot;value&quot;, such as tabindex=&quot;1&quot;. Other attributes can also be provided as a string such as tabindex=&quot;1&quot;, though the array format is typically cleaner.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Submit button HTML.",
        "rank": 0
    },
    "get_super_admins": {
        "since": "3.0.0",
        "group": "Users",
        "type": "fct",
        "name": "get_super_admins",
        "summary": "Retrieve a list of super admins.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of super admin logins",
        "rank": 0
    },
    "get_tag": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_tag",
        "summary": "Retrieve post tag by tag ID or tag object.",
        "description": "<p>If you pass the $tag parameter an object, which is assumed to be the tag row object retrieved the database. It will cache the tag data.<\/p> <p>If you pass $tag an integer of the tag ID, then that tag will be retrieved from the database, if it isn't already cached, and pass it back.<\/p> <p>If you look at get_term(), then both types will be passed through several filters and finally sanitized based on the $filter parameter value.<\/p>",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "A tag ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "Default is raw or no WordPress defined filter will applied.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term",
            "array",
            "WP_Error",
            "null"
        ],
        "return_description": "Tag data in type defined by $output parameter. WP_Error if $tag is empty, null if it does not exist.",
        "rank": 0
    },
    "get_tag_feed_link": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_tag_feed_link",
        "summary": "Retrieves the permalink for a tag feed.",
        "description": "",
        "inputs": {
            "tag_id": {
                "label": "tag_id",
                "description": "Tag ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The feed permalink for the given tag.",
        "rank": 0
    },
    "get_tag_link": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_tag_link",
        "summary": "Retrieve the link to the tag.",
        "description": "",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "Tag ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Link on success, empty string if tag does not exist.",
        "rank": 0
    },
    "get_tag_regex": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_tag_regex",
        "summary": "Return RegEx body to liberally match an opening HTML tag.",
        "description": "<p>Matches an opening HTML tag that:<\/p> <li>Is self-closing or<\/li> <li>Has no body but has a closing tag of the same name or<\/li> <li>Contains a body and a closing tag of the same name<\/li> <p>Note: this RegEx does not balance inner tags and does not attempt to produce valid HTML<\/p>",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "An HTML tag name. Example: 'video'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Tag RegEx.",
        "rank": 0
    },
    "get_tag_template": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_tag_template",
        "summary": "Retrieve path of tag template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>tag-{slug}.php<\/li> <li>tag-{id}.php<\/li> <li>tag.php<\/li> <p>An example of this is:<\/p> <li>tag-wordpress.php<\/li> <li>tag-3.php<\/li> <li>tag.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'tag'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to tag template file.",
        "rank": 0
    },
    "get_tags": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_tags",
        "summary": "Retrieves all post tags.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Tag arguments to use when retrieving tags.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term[]",
            "int"
        ],
        "return_description": "$tags Array of 'post_tag' term objects, or a count thereof.",
        "rank": 0
    },
    "get_tags_to_edit": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_tags_to_edit",
        "summary": "Get comma-separated list of tags available to edit.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy for which to retrieve terms.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_tag'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_tax_sql": {
        "since": "3.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_tax_sql",
        "summary": "Given a taxonomy query, generates SQL to be appended to a main query.",
        "description": "",
        "inputs": {
            "tax_query": {
                "label": "tax_query",
                "description": "A compact tax query",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "primary_table": {
                "label": "primary_table",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "primary_id_column": {
                "label": "primary_id_column",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_taxonomies": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_taxonomies",
        "summary": "Retrieves a list of registered taxonomy names or objects.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "An array of key =&gt; value arguments to match against the taxonomy objects.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The type of output to return in the array. Accepts either taxonomy 'names' or 'objects'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. Accepts 'and' or 'or'. 'or' means only one element from the array needs to match; 'and' means all elements must match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'and'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string[]",
            "WP_Taxonomy[]"
        ],
        "return_description": "An array of taxonomy names or objects.",
        "rank": 0
    },
    "get_taxonomies_for_attachments": {
        "since": "3.5.0",
        "group": "Media",
        "type": "fct",
        "name": "get_taxonomies_for_attachments",
        "summary": "Retrieves all of the taxonomies that are registered for attachments.",
        "description": "<p>Handles mime-type-specific taxonomies such as attachment:image and attachment:video.<\/p>",
        "inputs": {
            "output": {
                "label": "output",
                "description": "The type of taxonomy output to return. Accepts 'names' or 'objects'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'names'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string[]",
            "WP_Taxonomy[]"
        ],
        "return_description": "Array of names or objects of registered taxonomies for attachments.",
        "rank": 0
    },
    "get_taxonomy": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_taxonomy",
        "summary": "Retrieves the taxonomy object of $taxonomy.",
        "description": "<p>The get_taxonomy function will first check that the parameter string given is a taxonomy object and if it is, it will return it.<\/p>",
        "inputs": {
            "taxonomy": {
                "label": "taxonomy",
                "description": "Name of taxonomy object to return.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Taxonomy",
            "false"
        ],
        "return_description": "The Taxonomy Object or false if $taxonomy doesn't exist.",
        "rank": 0
    },
    "get_taxonomy_labels": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_taxonomy_labels",
        "summary": "Builds an object with all taxonomy labels out of a taxonomy object.",
        "description": "",
        "inputs": {
            "tax": {
                "label": "tax",
                "description": "Taxonomy object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "{     Taxonomy labels object. The first default value is for non-hierarchical taxonomies     (like tags) and the second one is for hierarchical taxonomies (like categories).     @type string $name                       General name for the taxonomy, usually plural. The same                                              as and overridden by <code>$tax-&gt;label<\/code>. Default 'Tags'\/'Categories'.     @type string $singular_name              Name for one object of this taxonomy. Default 'Tag'\/'Category'.     @type string $search_items               Default 'Search Tags'\/'Search Categories'.     @type string $popular_items              This label is only used for non-hierarchical taxonomies.                                              Default 'Popular Tags'.     @type string $all_items                  Default 'All Tags'\/'All Categories'.     @type string $parent_item                This label is only used for hierarchical taxonomies. Default                                              'Parent Category'.     @type string $parent_item_colon          The same as <code>parent_item<\/code>, but with colon <code>:<\/code> in the end.     @type string $edit_item                  Default 'Edit Tag'\/'Edit Category'.     @type string $view_item                  Default 'View Tag'\/'View Category'.     @type string $update_item                Default 'Update Tag'\/'Update Category'.     @type string $add_new_item               Default 'Add New Tag'\/'Add New Category'.     @type string $new_item_name              Default 'New Tag Name'\/'New Category Name'.     @type string $separate_items_with_commas This label is only used for non-hierarchical taxonomies. Default                                              'Separate tags with commas', used in the meta box.     @type string $add_or_remove_items        This label is only used for non-hierarchical taxonomies. Default                                              'Add or remove tags', used in the meta box when JavaScript                                              is disabled.     @type string $choose_from_most_used      This label is only used on non-hierarchical taxonomies. Default                                              'Choose from the most used tags', used in the meta box.     @type string $not_found                  Default 'No tags found'\/'No categories found', used in                                              the meta box and taxonomy list table.     @type string $no_terms                   Default 'No tags'\/'No categories', used in the posts and media                                              list tables.     @type string $items_list_navigation      Label for the table pagination hidden heading.     @type string $items_list                 Label for the table hidden heading.     @type string $most_used                  Title for the Most Used tab. Default 'Most Used'.     @type string $back_to_items              Label displayed after a term has been updated. }",
        "rank": 0
    },
    "get_taxonomy_template": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_taxonomy_template",
        "summary": "Retrieve path of custom taxonomy term template in current or parent template.",
        "description": "<p>The hierarchy for this template looks like:<\/p> <li>taxonomy-{taxonomy_slug}-{term_slug}.php<\/li> <li>taxonomy-{taxonomy_slug}.php<\/li> <li>taxonomy.php<\/li> <p>An example of this is:<\/p> <li>taxonomy-location-texas.php<\/li> <li>taxonomy-location.php<\/li> <li>taxonomy.php<\/li> <p>The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'} and {@see '$type_template'} dynamic hooks, where $type is 'taxonomy'.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full path to custom taxonomy term template file.",
        "rank": 0
    },
    "get_temp_dir": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_temp_dir",
        "summary": "Determine a writable directory for temporary files.",
        "description": "<p>Function's preference is the return value of sys_get_temp_dir(), followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR, before finally defaulting to \/tmp\/<\/p> <p>In the event that this function does not find a writable location, It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Writable temporary directory.",
        "rank": 0
    },
    "get_template": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_template",
        "summary": "Retrieve name of the current theme.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Template name.",
        "rank": 0
    },
    "get_template_directory": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_template_directory",
        "summary": "Retrieve current theme directory.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Template directory path.",
        "rank": 0
    },
    "get_template_directory_uri": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_template_directory_uri",
        "summary": "Retrieve theme directory URI.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Template directory URI.",
        "rank": 0
    },
    "get_template_part": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "get_template_part",
        "summary": "Loads a template part into a template.",
        "description": "<p>Provides a simple mechanism for child themes to overload reusable sections of code in the theme.<\/p> <p>Includes the named template part for a theme or if a name is specified then a specialised part will be included. If the theme contains no {slug}.php file then no template will be included.<\/p> <p>The template is included using require, not require_once, so you may include the same template part multiple times.<\/p> <p>For the $name parameter, if the file is called &quot;{slug}-special.php&quot; then specify &quot;special&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "slug": {
                "label": "slug",
                "description": "The slug name for the generic template.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "The name of the specialised template.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "get_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term",
        "summary": "Get all Term data from database by Term ID.",
        "description": "<p>The usage of the get_term function is to apply filters to a term object. It is possible to get a term object from the database before applying the filters.<\/p> <p>$term ID must be part of $taxonomy, to get from the database. Failure, might be able to be captured by the hooks. Failure would be the same value as $wpdb returns for the get_row method.<\/p> <p>There are two hooks, one is specifically for each term, named 'get<em>term', and the second is for the taxonomy name, 'term<\/em>$taxonomy'. Both hooks gets the term object, and the taxonomy name as parameters. Both hooks are expected to return a Term object.<\/p> <p>{@see 'get_term'} hook - Takes two parameters the term Object and the taxonomy name. Must return term object. Used in get_term() as a catch-all filter for every $term.<\/p> <p>{@see 'get_$taxonomy'} hook - Takes two parameters the term Object and the taxonomy name. Must return term object. $taxonomy will be the taxonomy name, so for example, if 'category', it would be 'get_category' as the filter name. Useful for custom taxonomies or plugging into default taxonomies.<\/p>",
        "inputs": {
            "term": {
                "label": "term",
                "description": "If integer, term data will be fetched from the database, or from the cache if available. If stdClass object (as in the results of a database query), will apply filters and return a WP_Term object corresponding to the $term data. If WP_Term, will return $term.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name that $term is part of.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "default is raw or no WordPress defined filter will applied.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Term",
            "WP_Error",
            "null"
        ],
        "return_description": "Object of the type specified by <code>$output<\/code> on success. When <code>$output<\/code> is 'OBJECT',                                     a WP_Term instance is returned. If taxonomy does not exist, a WP_Error is                                     returned. Returns null for miscellaneous failure.",
        "rank": 0
    },
    "get_term_by": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_by",
        "summary": "Get all Term data from database by Term field and data.",
        "description": "<p>Warning: $value is not escaped for 'name' $field. You must do it yourself, if required.<\/p> <p>The default $field is 'id', therefore it is possible to also use null for field, but not recommended that you do so.<\/p> <p>If $value does not exist, the return value will be false. If $taxonomy exists and $field and $value combinations exist, the Term will be returned.<\/p> <p>This function will always return the first term that matches the $field- $value-$taxonomy combination specified in the parameters. If your query is likely to match more than one term (as is likely to be the case when $field is 'name', for example), consider using get_terms() instead; that way, you will get all matching terms, and can provide your own logic for deciding which one was intended.<\/p>",
        "inputs": {
            "field": {
                "label": "field",
                "description": "Either 'slug', 'name', 'id' (term_id), or 'term_taxonomy_id'",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Search for this term value",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name. Optional, if $field is 'term_taxonomy_id'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "default is raw or no WordPress defined filter will applied.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term",
            "array",
            "false"
        ],
        "return_description": "WP_Term instance (or array) on success. Will return false if <code>$taxonomy<\/code> does not exist                             or <code>$term<\/code> was not found.",
        "rank": 0
    },
    "get_term_children": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_children",
        "summary": "Merge all term children into a single array of their IDs.",
        "description": "<p>This recursive function will merge all of the children of $term into the same array of term IDs. Only useful for taxonomies which are hierarchical.<\/p> <p>Will return an empty array if $term does not exist in $taxonomy.<\/p>",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "ID of Term to get children.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy Name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "List of Term IDs. WP_Error returned if <code>$taxonomy<\/code> does not exist.",
        "rank": 0
    },
    "get_term_feed_link": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_term_feed_link",
        "summary": "Retrieves the feed link for a term.",
        "description": "<p>Returns a link to the feed for all posts in a given term. A specific feed can be requested or left blank to get the default feed.<\/p>",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy of $term_id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Link to the feed for the term specified by $term_id and $taxonomy.",
        "rank": 0
    },
    "get_term_field": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_field",
        "summary": "Get sanitized Term field.",
        "description": "<p>The function is for contextual reasons and for simplicity of usage.<\/p>",
        "inputs": {
            "field": {
                "label": "field",
                "description": "Term field to fetch.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "term": {
                "label": "term",
                "description": "Term ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy Name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "default is display. Look at sanitize_term_field() for available options.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "null",
            "WP_Error"
        ],
        "return_description": "Will return an empty string if $term is not an object or if $field is not set in $term.",
        "rank": 0
    },
    "get_term_link": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_link",
        "summary": "Generate a permalink for a taxonomy term archive.",
        "description": "",
        "inputs": {
            "term": {
                "label": "term",
                "description": "The term object, ID, or slug whose link will be retrieved.",
                "type": "object",
                "types": [
                    "object",
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "HTML link to taxonomy term archive on success, WP_Error if term does not exist.",
        "rank": 0
    },
    "get_term_meta": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_meta",
        "summary": "Retrieves metadata for a term.",
        "description": "",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The meta key to retrieve. If no key is provided, fetches all metadata for the term.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "Whether to return a single value. If false, an array of all values matching the $term_id\/$key pair will be returned. Default: false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "If <code>$single<\/code> is false, an array of metadata values. If <code>$single<\/code> is true, a single metadata value.",
        "rank": 0
    },
    "get_term_parents_list": {
        "since": "4.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_term_parents_list",
        "summary": "Retrieve term parents with separator.",
        "description": "",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of optional arguments. <ul><li><b>'format'<\/b><br\/><i>(string)<\/i> Use term names or slugs for display. Accepts 'name' or 'slug'. Default 'name'.<\/li> <li><b>'separator'<\/b><br\/><i>(string)<\/i> Separator for between the terms. Default '\/'.<\/li> <li><b>'link'<\/b><br\/><i>(bool)<\/i> Whether to format as a link. Default true.<\/li> <li><b>'inclusive'<\/b><br\/><i>(bool)<\/i> Include the term to get the parents for. Default true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "A list of term parents on success, WP_Error or empty string on failure.",
        "rank": 0
    },
    "get_term_to_edit": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_term_to_edit",
        "summary": "Sanitizes Term for editing.",
        "description": "<p>Return value is sanitize_term() and usage is for sanitizing the term for editing. Function is for contextual and simplicity.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Term ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "null",
            "WP_Error"
        ],
        "return_description": "Will return empty string if $term is not an object.",
        "rank": 0
    },
    "get_terms": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_terms",
        "summary": "Retrieve the terms in a given taxonomy or list of taxonomies.",
        "description": "<p>You can fully inject any customizations to the query before it is sent, as well as control the output with a filter.<\/p> <p>The {@see 'get_terms'} filter will be called when the cache has the term and will pass the found term along with the array of $taxonomies and array of $args. This filter is also called before the array of terms is passed and will pass the array of terms, along with the $taxonomies and $args.<\/p> <p>The {@see 'list_terms_exclusions'} filter passes the compiled exclusions along with the $args.<\/p> <p>The {@see 'get_terms_orderby'} filter passes the ORDER BY clause for the query along with the $args array.<\/p> <p>Prior to 4.5.0, the first parameter of get_terms() was a taxonomy or list of taxonomies:<\/p> $terms = get_terms( 'post_tag', array( 'hide_empty' =&gt; false, ) ); <p>Since 4.5.0, taxonomies should be passed via the 'taxonomy' argument in the $args array:<\/p> $terms = get_terms( array( 'taxonomy' =&gt; 'post_tag', 'hide_empty' =&gt; false, ) );",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array or string of arguments. See WP_Term_Query::__construct() for information on accepted arguments.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Argument array, when using the legacy function parameter format. If present, this parameter will be interpreted as $args, and the first function parameter will be parsed as a taxonomy or array of taxonomies.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "int",
            "WP_Error"
        ],
        "return_description": "List of WP_Term instances and their children. Will return WP_Error, if any of $taxonomies                            do not exist.",
        "rank": 0
    },
    "get_terms_to_edit": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_terms_to_edit",
        "summary": "Get comma-separated list of terms available to edit for the given post ID.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy for which to retrieve terms.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_tag'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_the_ID": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_ID",
        "summary": "Retrieve the ID of the current item in the WordPress Loop.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "The ID of the current item in the WordPress Loop. False if $post is not set.",
        "rank": 0
    },
    "get_the_archive_description": {
        "since": "4.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_archive_description",
        "summary": "Retrieves the description for an author, post type, or term archive.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Archive description.",
        "rank": 0
    },
    "get_the_archive_title": {
        "since": "4.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_archive_title",
        "summary": "Retrieve the archive title based on the queried object.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Archive title.",
        "rank": 0
    },
    "get_the_author": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_author",
        "summary": "Retrieve the author of the current post.",
        "description": "",
        "inputs": {
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "The author's display name.",
        "rank": 0
    },
    "get_the_author_link": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_author_link",
        "summary": "Retrieve either author's link or author's name.",
        "description": "<p>If the author has a home page set, return an HTML link, otherwise just return the author's name.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "An HTML link if the author's url exist in user meta,                     else the result of get_the_author().",
        "rank": 0
    },
    "get_the_author_meta": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_author_meta",
        "summary": "Retrieves the requested data of the author of the current post.",
        "description": "<p>Valid values for the $field parameter include:<\/p> <ul> <li>admin_color<\/li> <li>aim<\/li> <li>comment_shortcuts<\/li> <li>description<\/li> <li>display_name<\/li> <li>first_name<\/li> <li>ID<\/li> <li>jabber<\/li> <li>last_name<\/li> <li>nickname<\/li> <li>plugins_last_view<\/li> <li>plugins_per_page<\/li> <li>rich_editing<\/li> <li>syntax_highlighting<\/li> <li>user_activation_key<\/li> <li>user_description<\/li> <li>user_email<\/li> <li>user_firstname<\/li> <li>user_lastname<\/li> <li>user_level<\/li> <li>user_login<\/li> <li>user_nicename<\/li> <li>user_pass<\/li> <li>user_registered<\/li> <li>user_status<\/li> <li>user_url<\/li> <li>yim<\/li> <\/ul>",
        "inputs": {
            "field": {
                "label": "field",
                "description": "The user field to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The author's field from the current author's DB object, otherwise an empty string.",
        "rank": 0
    },
    "get_the_author_posts": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_author_posts",
        "summary": "Retrieve the number of posts by the author of the current post.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The number of posts by the author.",
        "rank": 0
    },
    "get_the_author_posts_link": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_author_posts_link",
        "summary": "Retrieves an HTML link to the author page of the current post's author.",
        "description": "<p>Returns an HTML-formatted link using get_author_posts_url().<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "An HTML link to the author page, or an empty string if $authordata isn't defined.",
        "rank": 0
    },
    "get_the_category": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_the_category",
        "summary": "Retrieve post categories.",
        "description": "<p>This tag may be used outside The Loop by passing a post id as the parameter.<\/p> <p>Note: This function only returns results from the default &quot;category&quot; taxonomy. For custom taxonomies use get_the_terms().<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "default to current post ID. The post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "WP_Term[]",
                "label": "WP_Term[]"
            }
        },
        "return": [
            "WP_Term[]"
        ],
        "return_description": "Array of WP_Term objects, one for each category assigned to the post.",
        "rank": 0
    },
    "get_the_category_by_ID": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_the_category_by_ID",
        "summary": "Retrieve category name based on category ID.",
        "description": "",
        "inputs": {
            "cat_ID": {
                "label": "cat_ID",
                "description": "Category ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "Category name on success, WP_Error on failure.",
        "rank": 0
    },
    "get_the_category_list": {
        "since": "1.5.1",
        "group": "Template",
        "type": "fct",
        "name": "get_the_category_list",
        "summary": "Retrieve category list for a post in either HTML list or custom format.",
        "description": "",
        "inputs": {
            "separator": {
                "label": "separator",
                "description": "Separator between the categories. By default, the links are placed in an unordered list. An empty string will result in the default behavior.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "parents": {
                "label": "parents",
                "description": "How to display the parents.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID to retrieve categories.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_the_category_rss": {
        "since": "2.1.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_the_category_rss",
        "summary": "Retrieve all of the post categories, formatted for use in feeds.",
        "description": "<p>All of the categories for the current post in the feed loop, will be retrieved and have feed markup added, so that they can easily be added to the RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.<\/p>",
        "inputs": {
            "type": {
                "label": "type",
                "description": "default is the type returned by get_default_feed().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "All of the post categories for displaying in the feed.",
        "rank": 0
    },
    "get_the_comments_navigation": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_comments_navigation",
        "summary": "Retrieves navigation to next\/previous set of comments, when applicable.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default comments navigation arguments. <ul><li><b>'prev_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the previous comments link. Default 'Older comments'.<\/li> <li><b>'next_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the next comments link. Default 'Newer comments'.<\/li> <li><b>'screen_reader_text'<\/b><br\/><i>(string)<\/i> Screen reader text for nav element. Default 'Comments navigation'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for comments links.",
        "rank": 0
    },
    "get_the_comments_pagination": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_comments_pagination",
        "summary": "Retrieves a paginated navigation to next\/previous set of comments, when applicable.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default pagination arguments. <ul><li><b>'screen_reader_text'<\/b><br\/><i>(string)<\/i> Screen reader text for nav element. Default 'Comments navigation'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for pagination links.",
        "rank": 0
    },
    "get_the_content": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_the_content",
        "summary": "Retrieve the post content.",
        "description": "",
        "inputs": {
            "more_link_text": {
                "label": "more_link_text",
                "description": "Content for when there is more text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "strip_teaser": {
                "label": "strip_teaser",
                "description": "Strip teaser content before the more text. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_the_content_feed": {
        "since": "2.9.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_the_content_feed",
        "summary": "Retrieve the post content for feeds.",
        "description": "",
        "inputs": {
            "feed_type": {
                "label": "feed_type",
                "description": "The type of feed. rss2 | atom | rss | rdf",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The filtered content.",
        "rank": 0
    },
    "get_the_date": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_date",
        "summary": "Retrieve the date on which the post was written.",
        "description": "<p>Unlike the_date() this function will always return the date. Modify output with the {@see 'get_the_date'} filter.<\/p>",
        "inputs": {
            "d": {
                "label": "d",
                "description": "PHP date format defaults to the date_format option if not specified.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "Date the current post was written. False on failure.",
        "rank": 0
    },
    "get_the_excerpt": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_the_excerpt",
        "summary": "Retrieves the post excerpt.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Post excerpt.",
        "rank": 0
    },
    "get_the_generator": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_generator",
        "summary": "Creates the generator XML or Comment for RSS, ATOM, etc.",
        "description": "<p>Returns the correct generator type for the requested output format. Allows for a plugin to filter generators on an individual basis using the {@see 'get_the<em>generator<\/em>$type'} filter.<\/p>",
        "inputs": {
            "type": {
                "label": "type",
                "description": "The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The HTML content for the generator.",
        "rank": 0
    },
    "get_the_guid": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_guid",
        "summary": "Retrieve the Post Global Unique Identifier (guid).",
        "description": "<p>The guid will appear to be a link, but should not be used as an link to the post. The reason you should not use it as a link, is because of moving the blog across domains.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_the_modified_author": {
        "since": "2.8.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_modified_author",
        "summary": "Retrieve the author who last edited the current post.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The author's display name.",
        "rank": 0
    },
    "get_the_modified_date": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_modified_date",
        "summary": "Retrieve the date on which the post was last modified.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "PHP date format defaults to the date_format option if not specified.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "Date the current post was modified. False on failure.",
        "rank": 0
    },
    "get_the_modified_time": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_modified_time",
        "summary": "Retrieve the time at which the post was last modified.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "Format to use for retrieving the time the post was modified. Either 'G', 'U', or php date format defaults to the value specified in the time_format option.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "Formatted date string or Unix timestamp. False on failure.",
        "rank": 0
    },
    "get_the_password_form": {
        "since": "1.0.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_password_form",
        "summary": "Retrieve protected post password form content.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content for password form for password protected post.",
        "rank": 0
    },
    "get_the_permalink": {
        "since": "3.9.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_permalink",
        "summary": "Retrieves the full permalink for the current post or post ID.",
        "description": "<p>This function is an alias for get_permalink().<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "leavename": {
                "label": "leavename",
                "description": "Whether to keep post name or page name.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The permalink URL or false if post does not exist.",
        "rank": 0
    },
    "get_the_post_navigation": {
        "since": "4.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_post_navigation",
        "summary": "Retrieves the navigation to next\/previous post, when applicable.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default post navigation arguments. <ul><li><b>'prev_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the previous post link. Default '%title'.<\/li> <li><b>'next_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the next post link. Default '%title'.<\/li> <li><b>'in_same_term'<\/b><br\/><i>(bool)<\/i> Whether link should be in a same taxonomy term. Default false.<\/li> <li><b>'excluded_terms'<\/b><br\/><i>(array|string)<\/i> Array or comma-separated list of excluded term IDs. <\/li> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy, if $in_same_term is true. Default 'category'.<\/li> <li><b>'screen_reader_text'<\/b><br\/><i>(string)<\/i> Screen reader text for nav element. Default 'Post navigation'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for post links.",
        "rank": 0
    },
    "get_the_post_thumbnail": {
        "since": "2.9.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_post_thumbnail",
        "summary": "Retrieve the post thumbnail.",
        "description": "<p>When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size is registered, which differs from the 'thumbnail' image size managed via the Settings &gt; Media screen.<\/p> <p>When using the_post_thumbnail() or related functions, the 'post-thumbnail' image size is used by default, though a different size can be specified instead as needed.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post-thumbnail'",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Query string or array of attributes.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The post thumbnail image tag.",
        "rank": 0
    },
    "get_the_post_thumbnail_caption": {
        "since": "4.6.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_post_thumbnail_caption",
        "summary": "Returns the post thumbnail caption.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Post thumbnail caption.",
        "rank": 0
    },
    "get_the_post_thumbnail_url": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_post_thumbnail_url",
        "summary": "Return the post thumbnail URL.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Registered image size to retrieve the source for or a flat array of height and width dimensions.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post-thumbnail'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Post thumbnail URL or false if no URL is available.",
        "rank": 0
    },
    "get_the_post_type_description": {
        "since": "4.9.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_post_type_description",
        "summary": "Retrieves the description for a post type archive.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The post type description.",
        "rank": 0
    },
    "get_the_posts_navigation": {
        "since": "4.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_posts_navigation",
        "summary": "Returns the navigation to next\/previous set of posts, when applicable.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default posts navigation arguments. <ul><li><b>'prev_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the previous posts link. Default 'Older posts'.<\/li> <li><b>'next_text'<\/b><br\/><i>(string)<\/i> Anchor text to display in the next posts link. Default 'Newer posts'.<\/li> <li><b>'screen_reader_text'<\/b><br\/><i>(string)<\/i> Screen reader text for nav element. Default 'Posts navigation'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for posts links.",
        "rank": 0
    },
    "get_the_posts_pagination": {
        "since": "4.1.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_posts_pagination",
        "summary": "Retrieves a paginated navigation to next\/previous set of posts, when applicable.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default pagination arguments, see paginate_links(). <ul><li><b>'screen_reader_text'<\/b><br\/><i>(string)<\/i> Screen reader text for navigation element. Default 'Posts navigation'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for pagination links.",
        "rank": 0
    },
    "get_the_privacy_policy_link": {
        "since": "4.9.6",
        "group": "Template",
        "type": "fct",
        "name": "get_the_privacy_policy_link",
        "summary": "Returns the privacy policy link with formatting, when applicable.",
        "description": "",
        "inputs": {
            "before": {
                "label": "before",
                "description": "Display before privacy policy link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after privacy policy link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Markup for the link and surrounding elements. Empty string if it                doesn't exist.",
        "rank": 0
    },
    "get_the_tag_list": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_tag_list",
        "summary": "Retrieve the tags for a post formatted as a string.",
        "description": "",
        "inputs": {
            "before": {
                "label": "before",
                "description": "Before tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "Between tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "After tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Post ID. Defaults to the current post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false",
            "WP_Error"
        ],
        "return_description": "A list of tags on success, false if there are no terms, WP_Error on failure.",
        "rank": 0
    },
    "get_the_tags": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_tags",
        "summary": "Retrieve the tags for a post.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of tag objects on success, false on failure.",
        "rank": 0
    },
    "get_the_taxonomies": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "get_the_taxonomies",
        "summary": "Retrieve all taxonomies associated with a post.",
        "description": "<p>This function can be used within the loop. It will also return an array of the taxonomies with links to the taxonomy and name.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments about how to format the list of taxonomies. <ul><li><b>'template'<\/b><br\/><i>(string)<\/i> Template for displaying a taxonomy label and list of terms. Default is &quot;Label: Terms.&quot;<\/li> <li><b>'term_template'<\/b><br\/><i>(string)<\/i> Template for displaying a single term in the list. Default is the term name linked to its archive.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of taxonomies.",
        "rank": 0
    },
    "get_the_term_list": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_term_list",
        "summary": "Retrieve a post's terms as a list with specified format.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "before": {
                "label": "before",
                "description": "Before list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "Separate items using this.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "After list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false",
            "WP_Error"
        ],
        "return_description": "A list of terms on success, false if there are no terms, WP_Error on failure.",
        "rank": 0
    },
    "get_the_terms": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_terms",
        "summary": "Retrieve the terms of the taxonomy that are attached to the post.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term[]",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of WP_Term objects on success, false if there are no terms                                  or the post does not exist, WP_Error on failure.",
        "rank": 0
    },
    "get_the_time": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_the_time",
        "summary": "Retrieve the time at which the post was written.",
        "description": "",
        "inputs": {
            "d": {
                "label": "d",
                "description": "Format to use for retrieving the time the post was written. Either 'G', 'U', or php date format defaults to the value specified in the time_format option.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "WP_Post object or ID. Default is global $post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "false"
        ],
        "return_description": "Formatted date string or Unix timestamp if <code>$d<\/code> is 'U' or 'G'. False on failure.",
        "rank": 0
    },
    "get_the_title": {
        "since": "0.71",
        "group": "Template",
        "type": "fct",
        "name": "get_the_title",
        "summary": "Retrieve post title.",
        "description": "<p>If the post is protected and the visitor is not an admin, then &quot;Protected&quot; will be displayed before the post title. If the post is private, then &quot;Private&quot; will be located before the post title.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_the_title_rss": {
        "since": "2.0.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_the_title_rss",
        "summary": "Retrieve the current post title for the feed.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Current post title.",
        "rank": 0
    },
    "get_theme_feature_list": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_theme_feature_list",
        "summary": "Retrieve list of WordPress theme features (aka theme tags).",
        "description": "",
        "inputs": {
            "api": {
                "label": "api",
                "description": "Whether try to fetch tags from the WordPress.org API. Defaults to true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of features keyed by category with translations keyed by slug.",
        "rank": 0
    },
    "get_theme_file_path": {
        "since": "4.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_theme_file_path",
        "summary": "Retrieves the path of a file in the theme.",
        "description": "<p>Searches in the stylesheet directory before the template directory so themes which inherit from a parent theme can just override one file.<\/p>",
        "inputs": {
            "file": {
                "label": "file",
                "description": "File to search for in the stylesheet directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The path of the file.",
        "rank": 0
    },
    "get_theme_file_uri": {
        "since": "4.7.0",
        "group": "Template",
        "type": "fct",
        "name": "get_theme_file_uri",
        "summary": "Retrieves the URL of a file in the theme.",
        "description": "<p>Searches in the stylesheet directory before the template directory so themes which inherit from a parent theme can just override one file.<\/p>",
        "inputs": {
            "file": {
                "label": "file",
                "description": "File to search for in the stylesheet directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The URL of the file.",
        "rank": 0
    },
    "get_theme_mod": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_mod",
        "summary": "Retrieve theme modification value for the current theme.",
        "description": "<p>If the modification name does not exist, then the $default will be passed through {@link https:\/\/secure.php.net\/sprintf sprintf()} PHP function with the first string the template directory URI and the second string the stylesheet directory URI.<\/p>",
        "inputs": {
            "name": {
                "label": "name",
                "description": "Theme modification name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_theme_mods": {
        "since": "3.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_mods",
        "summary": "Retrieve all theme modifications.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "void"
        ],
        "return_description": "Theme modifications.",
        "rank": 0
    },
    "get_theme_root": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_root",
        "summary": "Retrieve path to themes directory.",
        "description": "<p>Does not have trailing slash.<\/p>",
        "inputs": {
            "stylesheet_or_template": {
                "label": "stylesheet_or_template",
                "description": "The stylesheet or template name of the theme",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Theme path.",
        "rank": 0
    },
    "get_theme_root_uri": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_root_uri",
        "summary": "Retrieve URI for themes directory.",
        "description": "<p>Does not have trailing slash.<\/p>",
        "inputs": {
            "stylesheet_or_template": {
                "label": "stylesheet_or_template",
                "description": "The stylesheet or template name of the theme. Default is to leverage the main theme root.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "theme_root": {
                "label": "theme_root",
                "description": "The theme root for which calculations will be based, preventing the need for a get_raw_theme_root() call.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Themes URI.",
        "rank": 0
    },
    "get_theme_roots": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_roots",
        "summary": "Retrieve theme roots.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "string"
        ],
        "return_description": "An array of theme roots keyed by template\/stylesheet or a single theme root if all themes have the same root.",
        "rank": 0
    },
    "get_theme_starter_content": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_starter_content",
        "summary": "Expand a theme's starter content configuration using core-provided data.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of starter content.",
        "rank": 0
    },
    "get_theme_support": {
        "since": "3.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_theme_support",
        "summary": "Gets the theme support arguments passed when registering that support",
        "description": "",
        "inputs": {
            "feature": {
                "label": "feature",
                "description": "the feature to check",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The array of extra arguments or the value for the registered feature.",
        "rank": 0
    },
    "get_theme_update_available": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_theme_update_available",
        "summary": "Retrieve the update link if there is a theme update available.",
        "description": "<p>Will return a link if there is an update available.<\/p>",
        "inputs": {
            "theme": {
                "label": "theme",
                "description": "WP_Theme object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "HTML for the update link, or false if invalid info was passed.",
        "rank": 0
    },
    "get_theme_updates": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "get_theme_updates",
        "summary": "",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_to_ping": {
        "since": "1.5.0",
        "group": "Post",
        "type": "fct",
        "name": "get_to_ping",
        "summary": "Retrieve URLs that need to be pinged.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post Object or ID",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_trackback_url": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_trackback_url",
        "summary": "Retrieve The current post's trackback URL.",
        "description": "<p>There is a check to see if permalink's have been enabled and if so, will retrieve the pretty path. If permalinks weren't enabled, the ID of the current post is used and appended to the correct page to go to.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The trackback URL after being filtered.",
        "rank": 0
    },
    "get_transient": {
        "since": "2.8.0",
        "group": "Option",
        "type": "fct",
        "name": "get_transient",
        "summary": "Get the value of a transient.",
        "description": "<p>If the transient does not exist, does not have a value, or has expired, then the return value will be false.<\/p>",
        "inputs": {
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Value of transient.",
        "rank": 0
    },
    "get_translations_for_domain": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "fct",
        "name": "get_translations_for_domain",
        "summary": "Return the Translations instance for a text domain.",
        "description": "<p>If there isn't one, returns empty Translations instance.<\/p>",
        "inputs": {
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "Translations",
            "NOOP_Translations"
        ],
        "return_description": "A Translations instance.",
        "rank": 0
    },
    "get_upload_iframe_src": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "get_upload_iframe_src",
        "summary": "",
        "description": "",
        "inputs": {
            "type": {
                "label": "type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "tab": {
                "label": "tab",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_upload_space_available": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_upload_space_available",
        "summary": "Determines if there is any upload space left in the current blog's quota.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "of upload space available in bytes",
        "rank": 0
    },
    "get_uploaded_header_images": {
        "since": "3.2.0",
        "group": "Theme",
        "type": "fct",
        "name": "get_uploaded_header_images",
        "summary": "Get the header images uploaded for the current theme.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_url_in_content": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_url_in_content",
        "summary": "Extract and return the first URL from passed content.",
        "description": "",
        "inputs": {
            "content": {
                "label": "content",
                "description": "A string which might contain a URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The found URL.",
        "rank": 0
    },
    "get_user_by": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "get_user_by",
        "summary": "Retrieve user info by a given field",
        "description": "",
        "inputs": {
            "field": {
                "label": "field",
                "description": "The field to retrieve the user with. id | ID | slug | email | login.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "A value for $field. A user ID, slug, email address, or login name.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "false"
        ],
        "return_description": "WP_User object on success, false on failure.",
        "rank": 0
    },
    "get_user_count": {
        "since": "4.8.0",
        "group": "Multisite",
        "type": "fct",
        "name": "get_user_count",
        "summary": "The number of active users in your installation.",
        "description": "<p>The count is cached and updated twice daily. This is not a live count.<\/p>",
        "inputs": {
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Number of active users on the network.",
        "rank": 0
    },
    "get_user_locale": {
        "since": "4.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "get_user_locale",
        "summary": "Retrieves the locale of a user.",
        "description": "<p>If the user has a locale set to a non-empty string then it will be returned. Otherwise it returns the locale of get_locale().<\/p>",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User's ID or a WP_User object. Defaults to current user.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The locale of the user.",
        "rank": 0
    },
    "get_user_meta": {
        "since": "3.0.0",
        "group": "Users",
        "type": "fct",
        "name": "get_user_meta",
        "summary": "Retrieve user meta field for a user.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The meta key to retrieve. By default, returns data for all keys.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "single": {
                "label": "single",
                "description": "Whether to return a single value.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Will be an array if $single is false. Will be value of meta data field if $single is true.",
        "rank": 0
    },
    "get_user_option": {
        "since": "2.0.0",
        "group": "Users",
        "type": "fct",
        "name": "get_user_option",
        "summary": "Retrieve user option that can be either per Site or per Network.",
        "description": "<p>If the user ID is not given, then the current user will be used instead. If the user ID is given, then the user data will be retrieved. The filter for the result, will also pass the original option name and finally the user data object as the third parameter.<\/p> <p>The option will first check for the per site name and then the per Network name.<\/p>",
        "inputs": {
            "option": {
                "label": "option",
                "description": "User option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user": {
                "label": "user",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Use get_option() to check for an option in the options table.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "User option value on success, false on failure.",
        "rank": 0
    },
    "get_user_setting": {
        "since": "2.7.0",
        "group": "Option",
        "type": "fct",
        "name": "get_user_setting",
        "summary": "Retrieve user interface setting value based on setting name.",
        "description": "",
        "inputs": {
            "name": {
                "label": "name",
                "description": "The name of the setting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "default value to return when $name is not set.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "the last saved user setting or the default value\/false if it doesn't exist.",
        "rank": 0
    },
    "get_user_to_edit": {
        "since": "2.0.5",
        "group": "Administration",
        "type": "fct",
        "name": "get_user_to_edit",
        "summary": "Retrieve user data and filter it.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "bool"
        ],
        "return_description": "WP_User object on success, false on failure.",
        "rank": 0
    },
    "get_userdata": {
        "since": "0.71",
        "group": "WordPress",
        "type": "fct",
        "name": "get_userdata",
        "summary": "Retrieve user info by user ID.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "false"
        ],
        "return_description": "WP_User object on success, false on failure.",
        "rank": 0
    },
    "get_users": {
        "since": "3.1.0",
        "group": "Users",
        "type": "fct",
        "name": "get_users",
        "summary": "Retrieve list of users matching criteria.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Arguments to retrieve users. See WP_User_Query::prepare_query(). for more information on accepted arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of users.",
        "rank": 0
    },
    "get_users_drafts": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "get_users_drafts",
        "summary": "Retrieve the user's drafts.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "get_weekstartend": {
        "since": "0.71",
        "group": "WordPress",
        "type": "fct",
        "name": "get_weekstartend",
        "summary": "Get the week start and end from the datetime or date string from MySQL.",
        "description": "",
        "inputs": {
            "mysqlstring": {
                "label": "mysqlstring",
                "description": "Date or datetime field type from MySQL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "start_of_week": {
                "label": "start_of_week",
                "description": "Start of the week as an integer.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Keys are 'start' and 'end'.",
        "rank": 0
    },
    "get_wp_title_rss": {
        "since": "2.2.0",
        "group": "Feed",
        "type": "fct",
        "name": "get_wp_title_rss",
        "summary": "Retrieve the blog title for the feed title.",
        "description": "",
        "inputs": {
            "deprecated": {
                "label": "deprecated",
                "description": "Unused..",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'&#8211;'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The document title.",
        "rank": 0
    },
    "get_year_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "fct",
        "name": "get_year_link",
        "summary": "Retrieves the permalink for the year archives.",
        "description": "",
        "inputs": {
            "year": {
                "label": "year",
                "description": "False for current year or year for permalink.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The permalink for the specified year archive.",
        "rank": 0
    },
    "global_terms": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "global_terms",
        "summary": "Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_id": {
                "label": "term_id",
                "description": "An ID for a term on the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "An ID from the global terms table mapped from $term_id.",
        "rank": 0
    },
    "global_terms_enabled": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "global_terms_enabled",
        "summary": "Determine whether global terms are enabled.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if multisite and global terms enabled.",
        "rank": 0
    },
    "got_mod_rewrite": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "got_mod_rewrite",
        "summary": "Returns whether the server is running Apache with the mod_rewrite module loaded.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "got_url_rewrite": {
        "since": "3.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "got_url_rewrite",
        "summary": "Returns whether the server supports URL rewriting.",
        "description": "<p>Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the server supports URL rewriting.",
        "rank": 0
    },
    "grant_super_admin": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "grant_super_admin",
        "summary": "Grants Super Admin privileges.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "ID of the user to be granted Super Admin privileges.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure. This can fail when the user is              already a super admin or when the <code>$super_admins<\/code> global is defined.",
        "rank": 0
    },
    "has_action": {
        "since": "2.5.0",
        "group": "Plugin",
        "type": "fct",
        "name": "has_action",
        "summary": "Check if any action has been registered for a hook.",
        "description": "",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "The name of the action hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_check": {
                "label": "function_to_check",
                "description": "The callback to check for.",
                "type": "callable",
                "types": [
                    "callable",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int"
        ],
        "return_description": "If $function_to_check is omitted, returns boolean for whether the hook has                  anything registered. When checking a specific function, the priority of that                  hook is returned, or false if the function is not attached. When using the                  $function_to_check argument, this function may return a non-boolean value                  that evaluates to false (e.g.) 0, so use the === operator for testing the                  return value.",
        "rank": 0
    },
    "has_block": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "fct",
        "name": "has_block",
        "summary": "Determine whether a $post or a string contains a specific block type.",
        "description": "<p>This test optimizes for performance rather than strict accuracy, detecting the block type exists but not validating its structure. For strict accuracy, you should use the block parser on post content.<\/p>",
        "inputs": {
            "block_type": {
                "label": "block_type",
                "description": "Full Block type to look for.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post content, post ID, or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post content contains the specified block.",
        "rank": 0
    },
    "has_blocks": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "fct",
        "name": "has_blocks",
        "summary": "Determine whether a post or content string has blocks.",
        "description": "<p>This test optimizes for performance rather than strict accuracy, detecting the pattern of a block but not validating its structure. For strict accuracy, you should use the block parser on post content.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post content, post ID, or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post has blocks.",
        "rank": 0
    },
    "has_category": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "has_category",
        "summary": "Check if the current post has any of given category.",
        "description": "",
        "inputs": {
            "category": {
                "label": "category",
                "description": "The category name\/term_id\/slug or array of them to check for.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post to check instead of the current post.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the current post has any of the given categories (or any category, if no category specified).",
        "rank": 0
    },
    "has_custom_header": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "has_custom_header",
        "summary": "Check whether a custom header is set or not.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if a custom header is set. False if not.",
        "rank": 0
    },
    "has_custom_logo": {
        "since": "4.5.0",
        "group": "Template",
        "type": "fct",
        "name": "has_custom_logo",
        "summary": "Determines whether the site has a custom logo.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog in question. Default is the ID of the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the site has a custom logo or not.",
        "rank": 0
    },
    "has_excerpt": {
        "since": "2.3.0",
        "group": "Template",
        "type": "fct",
        "name": "has_excerpt",
        "summary": "Determines whether the post has a custom excerpt.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the post has a custom excerpt, false otherwise.",
        "rank": 0
    },
    "has_filter": {
        "since": "2.5.0",
        "group": "Plugin",
        "type": "fct",
        "name": "has_filter",
        "summary": "Check if any filter has been registered for a hook.",
        "description": "",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "The name of the filter hook.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_check": {
                "label": "function_to_check",
                "description": "The callback to check for.",
                "type": "callable",
                "types": [
                    "callable",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "If $function_to_check is omitted, returns boolean for whether the hook has                   anything registered. When checking a specific function, the priority of that                   hook is returned, or false if the function is not attached. When using the                   $function_to_check argument, this function may return a non-boolean value                   that evaluates to false (e.g.) 0, so use the === operator for testing the                   return value.",
        "rank": 0
    },
    "has_header_image": {
        "since": "4.2.0",
        "group": "Theme",
        "type": "fct",
        "name": "has_header_image",
        "summary": "Check whether a header image is set or not.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether a header image is set or not.",
        "rank": 0
    },
    "has_header_video": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "has_header_video",
        "summary": "Check whether a header video is set or not.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether a header video is set or not.",
        "rank": 0
    },
    "has_image_size": {
        "since": "3.9.0",
        "group": "Media",
        "type": "fct",
        "name": "has_image_size",
        "summary": "Check if an image size exists.",
        "description": "",
        "inputs": {
            "name": {
                "label": "name",
                "description": "The image size to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the image size exists, false if not.",
        "rank": 0
    },
    "has_meta": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "has_meta",
        "summary": "Get meta data for the given post ID.",
        "description": "",
        "inputs": {
            "postid": {
                "label": "postid",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "has_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "has_nav_menu",
        "summary": "Determines whether a registered nav menu location has a menu assigned to it.",
        "description": "",
        "inputs": {
            "location": {
                "label": "location",
                "description": "Menu location identifier.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether location has a menu.",
        "rank": 0
    },
    "has_post_format": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "has_post_format",
        "summary": "Check if a post has any of the given formats, or any format.",
        "description": "",
        "inputs": {
            "format": {
                "label": "format",
                "description": "The format or formats to check.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post to check. If not supplied, defaults to the current post if used in the loop.",
                "type": "object",
                "types": [
                    "object",
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the post has any of the given formats (or any format, if no format specified), false otherwise.",
        "rank": 0
    },
    "has_post_thumbnail": {
        "since": "2.9.0",
        "group": "Template",
        "type": "fct",
        "name": "has_post_thumbnail",
        "summary": "Determines whether a post has an image attached.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post has an image attached.",
        "rank": 0
    },
    "has_shortcode": {
        "since": "3.6.0",
        "group": "Shortcodes",
        "type": "fct",
        "name": "has_shortcode",
        "summary": "Whether the passed content contains the specified shortcode",
        "description": "",
        "inputs": {
            "content": {
                "label": "content",
                "description": "Content to search for shortcodes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "tag": {
                "label": "tag",
                "description": "Shortcode tag to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the passed content contains the given shortcode.",
        "rank": 0
    },
    "has_site_icon": {
        "since": "4.3.0",
        "group": "Template",
        "type": "fct",
        "name": "has_site_icon",
        "summary": "Whether the site has a Site Icon.",
        "description": "",
        "inputs": {
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog in question. Default current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the site has a site icon or not.",
        "rank": 0
    },
    "has_tag": {
        "since": "2.6.0",
        "group": "Template",
        "type": "fct",
        "name": "has_tag",
        "summary": "Checks if the current post has any of given tags.",
        "description": "<p>The given tags are checked against the post's tags' term_ids, names and slugs. Tags given as integers will only be checked against the post's tags' term_ids. If no tags are given, determines if post has any tags.<\/p> <p>Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) Prior to v2.7, this function could only be used in the WordPress Loop. As of 2.7, the function can be used anywhere if it is provided a post ID or post object.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "The tag name\/term_id\/slug or array of them to check for.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post to check instead of the current post. (since 2.7.0)",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the current post has any of the given tags (or any tag, if no tag specified).",
        "rank": 0
    },
    "has_term": {
        "since": "3.1.0",
        "group": "Template",
        "type": "fct",
        "name": "has_term",
        "summary": "Check if the current post has any of given terms.",
        "description": "<p>The given terms are checked against the post's terms' term_ids, names and slugs. Terms given as integers will only be checked against the post's terms' term_ids. If no terms are given, determines if post has any terms.<\/p>",
        "inputs": {
            "term": {
                "label": "term",
                "description": "The term name\/term_id\/slug or array of them to check for.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post to check instead of the current post.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the current post has any of the given tags (or any tag, if no tag specified).",
        "rank": 0
    },
    "has_term_meta": {
        "since": "4.9.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "has_term_meta",
        "summary": "Get all meta data, including meta IDs, for the given term ID.",
        "description": "",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Array with meta data, or false when the meta table is not installed.",
        "rank": 0
    },
    "hash_equals": {
        "since": "3.9.2",
        "group": "PHP",
        "type": "efct",
        "name": "hash_equals",
        "summary": "Timing attack safe string comparison",
        "description": "<p>Compares two strings using the same time whether they're equal or not.<\/p> <p>This function was added in PHP 5.6.<\/p> <p>Note: It can leak the length of a string when arguments of differing length are supplied.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "a": {
                "label": "a",
                "description": "Expected string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "b": {
                "label": "b",
                "description": "Actual, user supplied, string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether strings are equal.",
        "rank": 0
    },
    "have_comments": {
        "since": "2.2.0",
        "group": "Query",
        "type": "fct",
        "name": "have_comments",
        "summary": "Whether there are comments to loop over.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "have_posts": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "have_posts",
        "summary": "Whether current WordPress query has results to loop over.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "heartbeat_autosave": {
        "since": "3.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "heartbeat_autosave",
        "summary": "Autosave with heartbeat",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The $_POST data sent.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The Heartbeat response.",
        "rank": 0
    },
    "home_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "home_url",
        "summary": "Retrieves the URL for the current site where the front end is accessible.",
        "description": "<p>Returns the 'home' option with the appropriate protocol. The protocol will be 'https' if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the home URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the home URL context. Accepts 'http', 'https', 'relative', 'rest', or null.",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Home URL link with optional path appended.",
        "rank": 0
    },
    "htmlentities2": {
        "since": "1.2.2",
        "group": "WordPress",
        "type": "efct",
        "name": "htmlentities2",
        "summary": "Convert entities, while preserving already-encoded entities.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "myHTML": {
                "label": "myHTML",
                "description": "The text to be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted text.",
        "rank": 0
    },
    "human_readable_duration": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "human_readable_duration",
        "summary": "Convert a duration to human readable format.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "duration": {
                "label": "duration",
                "description": "Duration will be in string format (HH:ii:ss) OR (ii:ss), with a possible prepended negative sign (-).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "A human readable duration string, false on failure.",
        "rank": 0
    },
    "human_time_diff": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "human_time_diff",
        "summary": "Determines the difference between two timestamps.",
        "description": "<p>The difference is returned in a human readable format such as &quot;1 hour&quot;, &quot;5 mins&quot;, &quot;2 days&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "from": {
                "label": "from",
                "description": "Unix timestamp from which the difference begins.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "to": {
                "label": "to",
                "description": "Unix timestamp to end the time difference. Default becomes time() if not set.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Human readable time difference.",
        "rank": 0
    },
    "iframe_header": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "iframe_header",
        "summary": "Generic Iframe header for use with Thickbox",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Title of the Iframe page.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "iis7_add_rewrite_rule": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "iis7_add_rewrite_rule",
        "summary": "Add WordPress rewrite rule to the IIS 7+ configuration file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "The file path to the configuration file",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "rewrite_rule": {
                "label": "rewrite_rule",
                "description": "The XML fragment with URL Rewrite rule",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "iis7_delete_rewrite_rule": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "iis7_delete_rewrite_rule",
        "summary": "Delete WordPress rewrite rule from web.config file if it exists there",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "Name of the configuration file",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "iis7_rewrite_rule_exists": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "iis7_rewrite_rule_exists",
        "summary": "Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "The file path to the configuration file",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "iis7_save_url_rewrite_rules": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "fct",
        "name": "iis7_save_url_rewrite_rules",
        "summary": "Updates the IIS web.config file with the current rules if it is writable.",
        "description": "<p>If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True on write success, false on failure. Null in multisite.",
        "rank": 0
    },
    "iis7_supports_permalinks": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "iis7_supports_permalinks",
        "summary": "Check if IIS 7+ supports pretty permalinks.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether IIS7 supports permalinks.",
        "rank": 0
    },
    "image_add_caption": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_add_caption",
        "summary": "Adds image shortcode with caption to editor",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "html": {
                "label": "html",
                "description": "The image HTML markup to send.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "id": {
                "label": "id",
                "description": "Image attachment ID.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "caption": {
                "label": "caption",
                "description": "Image caption.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Image title attribute (not used).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "align": {
                "label": "align",
                "description": "Image CSS alignment property.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "Image source URL (not used).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size (thumbnail, medium, large, full, or added with add_image_size()) (not used).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "alt": {
                "label": "alt",
                "description": "Image alt attribute (not used).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The image HTML markup with caption shortcode.",
        "rank": 0
    },
    "image_align_input_fields": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_align_input_fields",
        "summary": "Retrieve HTML for the image alignment radio buttons with the specified one checked.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "checked": {
                "label": "checked",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "image_attachment_fields_to_edit": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_attachment_fields_to_edit",
        "summary": "Retrieves the image attachment fields to edit form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "form_fields": {
                "label": "form_fields",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "image_attachment_fields_to_save": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_attachment_fields_to_save",
        "summary": "Filters input from media_upload_form_handler() and assigns a default post_title from the file name if none supplied.",
        "description": "<p>Illustrates the use of the {@see 'attachment_fields_to_save'} filter which can be used to add default values to any field before saving to DB.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The WP_Post attachment object converted to an array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attachment": {
                "label": "attachment",
                "description": "An array of attachment metadata.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Filtered attachment post object.",
        "rank": 0
    },
    "image_constrain_size_for_editor": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_constrain_size_for_editor",
        "summary": "Scale down the default size of an image.",
        "description": "<p>This is so that the image is a better fit for the editor and theme.<\/p> <p>The $size parameter accepts either an array or a string. The supported string values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at 128 width and 96 height in pixels. Also supported for the string value is 'medium', 'medium_large' and 'full'. The 'full' isn't actually supported, but any value other than the supported will result in the content_width size or 500 if that is not set.<\/p> <p>Finally, there is a filter named {@see 'editor_max_image_size'}, that will be called on the calculated array for width and height, respectively. The second parameter will be the value that was in the $size parameter. The returned type for the hook is an array with the width as the first element and the height as the second element.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "width": {
                "label": "width",
                "description": "Width of the image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "Height of the image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'medium'",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Could be 'display' (like in a theme) or 'edit' (like inserting into an editor).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Width and height of what the result image should resize to.",
        "rank": 0
    },
    "image_downsize": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_downsize",
        "summary": "Scale an image to fit a particular size (such as 'thumb' or 'medium').",
        "description": "<p>Array with image url, width, height, and whether is intermediate size, in that order is returned on success is returned. $is_intermediate is true if $url is a resized image, false if it is the original.<\/p> <p>The URL might be the original image, or it might be a resized version. This function won't create a new resized copy, it will just return an already resized one if it exists.<\/p> <p>A plugin may use the {@see 'image_downsize'} filter to hook into and offer image resizing services for images. The hook must return an array with the same elements that are returned in the function. The first element being the URL to the new image that was resized.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Attachment ID for image.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size to scale to. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'medium'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "Array containing the image URL, width, height, and boolean for whether                     the image is an intermediate size. False on failure.",
        "rank": 0
    },
    "image_edit_apply_changes": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_edit_apply_changes",
        "summary": "Performs group of changes on Editor specified.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "image": {
                "label": "image",
                "description": "WP_Image_Editor instance.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "changes": {
                "label": "changes",
                "description": "Array of change operations.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_Image_Editor",
                "label": "WP_Image_Editor"
            }
        },
        "return": [
            "WP_Image_Editor"
        ],
        "return_description": "WP_Image_Editor instance with changes applied.",
        "rank": 0
    },
    "image_get_intermediate_size": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_get_intermediate_size",
        "summary": "Retrieves the image's intermediate size (resized) path, width, and height.",
        "description": "<p>The $size parameter can be an array with the width and height respectively. If the size matches the 'sizes' metadata array for width and height, then it will be used. If there is no direct match, then the nearest image size larger than the specified size will be used. If nothing is found, then the function will break out and return false.<\/p> <p>The metadata 'sizes' is used for compatible sizes that can be used for the parameter $size value.<\/p> <p>The url path will be given, when the $size parameter is a string.<\/p> <p>If you are passing an array for the $size, you should consider using add_image_size() so that a cropped version is generated. It's much more efficient than having to find the closest-sized image and then having the browser scale down the image.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'thumbnail'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "$data {     Array of file relative path, width, and height on success. Additionally includes absolute     path and URL if registered size is passed to $size parameter. False on failure.     @type string $file   Image's path relative to uploads directory     @type int    $width  Width of image     @type int    $height Height of image     @type string $path   Image's absolute filesystem path.     @type string $url    Image's URL. }",
        "rank": 0
    },
    "image_hwstring": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_hwstring",
        "summary": "Retrieve width and height attributes using given width and height values.",
        "description": "<p>Both attributes are required in the sense that both parameters must have a value, but are optional in that if you set them to false or null, then they will not be added to the returned string.<\/p> <p>You can set the value using a string, but it will only take numeric values. If you wish to put 'px' after the numbers, then it will be stripped out of the return.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "width": {
                "label": "width",
                "description": "Image width in pixels.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "Image height in pixels.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML attributes for width and, or height.",
        "rank": 0
    },
    "image_link_input_fields": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_link_input_fields",
        "summary": "Retrieve HTML for the Link URL buttons with the default link type as specified.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "url_type": {
                "label": "url_type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "image_make_intermediate_size": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_make_intermediate_size",
        "summary": "Resizes an image to make a thumbnail or intermediate size.",
        "description": "<p>The returned array has the file size, the image width, and image height. The {@see 'image_make_intermediate_size'} filter can be used to hook in and change the values of the returned array. The only parameter is the resized file path.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "File path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "width": {
                "label": "width",
                "description": "Image width.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "Image height.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "crop": {
                "label": "crop",
                "description": "Whether to crop image to specified width and height or resize.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "False, if no image was created. Metadata array on success.",
        "rank": 0
    },
    "image_media_send_to_editor": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_media_send_to_editor",
        "summary": "Retrieves the media element HTML to send to the editor.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "html": {
                "label": "html",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "attachment": {
                "label": "attachment",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "image_resize_dimensions": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "image_resize_dimensions",
        "summary": "Retrieves calculated resize dimensions for use in WP_Image_Editor.",
        "description": "<p>Calculates dimensions and coordinates for a resized image that fits within a specified width and height.<\/p> <p>Cropping behavior is dependent on the value of $crop:<\/p> <li>If false (default), images will not be cropped.<\/li> <li>If an array in the form of array( x_crop_position, y_crop_position ): <ul> <li>x_crop_position accepts 'left' 'center', or 'right'.<\/li> <li>y_crop_position accepts 'top', 'center', or 'bottom'. Images will be cropped to the specified dimensions within the defined crop area.<\/li> <\/ul><\/li> <li>If true, images will be cropped to the specified dimensions using center positions.<\/li> ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "orig_w": {
                "label": "orig_w",
                "description": "Original width in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "orig_h": {
                "label": "orig_h",
                "description": "Original height in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "dest_w": {
                "label": "dest_w",
                "description": "New width in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "dest_h": {
                "label": "dest_h",
                "description": "New height in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "crop": {
                "label": "crop",
                "description": "Whether to crop image to specified width and height or resize. An array can specify positioning of the crop area.",
                "type": "bool",
                "types": [
                    "bool",
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "False on failure. Returned array matches parameters for <code>imagecopyresampled()<\/code>.",
        "rank": 0
    },
    "image_size_input_fields": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "image_size_input_fields",
        "summary": "Retrieve HTML for the size radio buttons with the specified one checked.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "check": {
                "label": "check",
                "description": "",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "img_caption_shortcode": {
        "since": "2.6.0",
        "group": "Media",
        "type": "efct",
        "name": "img_caption_shortcode",
        "summary": "Builds the Caption shortcode output.",
        "description": "<p>Allows a plugin to replace the content that would otherwise be returned. The filter is {@see 'img_caption_shortcode'} and passes an empty string, the attr parameter and the content parameter values.<\/p> <p>The supported attributes for the shortcode are 'id', 'caption_id', 'align', 'width', 'caption', and 'class'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes of the caption shortcode. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> ID of the image and caption container element, i.e. &lt;figure&gt; or &lt;div&gt;.<\/li> <li><b>'caption_id'<\/b><br\/><i>(string)<\/i> ID of the caption element, i.e. &lt;figcaption&gt; or &lt;p&gt;.<\/li> <li><b>'align'<\/b><br\/><i>(string)<\/i> Class name that aligns the caption. Default 'alignnone'. Accepts 'alignleft', 'aligncenter', alignright', 'alignnone'.<\/li> <li><b>'width'<\/b><br\/><i>(int)<\/i> The width of the caption, in pixels.<\/li> <li><b>'caption'<\/b><br\/><i>(string)<\/i> The caption text.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> Additional class name(s) added to the caption container.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "content": {
                "label": "content",
                "description": "Shortcode content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content to display the caption.",
        "rank": 0
    },
    "in_category": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "in_category",
        "summary": "Checks if the current post is within any of the given categories.",
        "description": "<p>The given categories are checked against the post's categories' term_ids, names and slugs. Categories given as integers will only be checked against the post's categories' term_ids.<\/p> <p>Prior to v2.5 of WordPress, category names were not supported. Prior to v2.7, category slugs were not supported. Prior to v2.7, only one category could be compared: in_category( $single_category ). Prior to v2.7, this function could only be used in the WordPress Loop. As of 2.7, the function can be used anywhere if it is provided a post ID or post object.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "category": {
                "label": "category",
                "description": "Category ID, name or slug, or array of said.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post to check instead of the current post. (since 2.7.0)",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the current post is in any of the given categories.",
        "rank": 0
    },
    "in_the_loop": {
        "since": "2.0.0",
        "group": "Query",
        "type": "fct",
        "name": "in_the_loop",
        "summary": "Determines whether the caller is in the Loop.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if caller is within loop, false if loop hasn't started or ended.",
        "rank": 0
    },
    "includes_url": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "includes_url",
        "summary": "Retrieves the URL to the includes directory.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the includes URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the includes URL context. Accepts 'http', 'https', or 'relative'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Includes URL link with optional path appended.",
        "rank": 0
    },
    "insert_with_markers": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "insert_with_markers",
        "summary": "Inserts an array of strings into a file (.htaccess ), placing it between BEGIN and END markers.",
        "description": "<p>Replaces existing marked info. Retains surrounding data. Creates file if none exists.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "Filename to alter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "marker": {
                "label": "marker",
                "description": "The marker to alter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "insertion": {
                "label": "insertion",
                "description": "The new content to insert.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on write success, false on failure.",
        "rank": 0
    },
    "install_plugin_install_status": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "install_plugin_install_status",
        "summary": "Determine the status we can perform on a plugin.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "api": {
                "label": "api",
                "description": "Data about the plugin retrieved from the API.",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "loop": {
                "label": "loop",
                "description": "Disable further loops.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "{     Plugin installation status data.     @type string $status  Status of a plugin. Could be one of 'install', 'update_available', 'latest_installed' or 'newer_installed'.     @type string $url     Plugin installation URL.     @type string $version The most recent version of the plugin.     @type string $file    Plugin filename relative to the plugins directory. }",
        "rank": 0
    },
    "install_popular_tags": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "install_popular_tags",
        "summary": "Retrieve popular WordPress plugin tags.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "install_search_form": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "install_search_form",
        "summary": "Displays a search form for searching plugins.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "install_theme_search_form": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "install_theme_search_form",
        "summary": "Display search form for searching themes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type_selector": {
                "label": "type_selector",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "is_404": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_404",
        "summary": "Determines whether the query has resulted in a 404 (returns no results).",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_active_sidebar": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "fct",
        "name": "is_active_sidebar",
        "summary": "Determines whether a sidebar is in use.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "index": {
                "label": "index",
                "description": "Sidebar name, id or number to check.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "true if the sidebar is in use, false otherwise.",
        "rank": 0
    },
    "is_active_widget": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "fct",
        "name": "is_active_widget",
        "summary": "Determines whether a given widget is displayed on the front end.",
        "description": "<p>Either $callback or $id_base can be used $id_base is the first argument when extending WP_Widget class Without the optional $widget_id parameter, returns the ID of the first sidebar in which the first instance of the widget with the given callback or $id_base is found. With the $widget_id parameter, returns the ID of the sidebar where the widget with that callback\/$id_base AND that ID is found.<\/p> <p>NOTE: $widget_id and $id_base are the same for single widgets. To be effective this function has to run after widgets have initialized, at action {@see 'init'} or later.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "callback": {
                "label": "callback",
                "description": "Widget callback to check.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "Widget ID. Optional, but needed for checking.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "id_base": {
                "label": "id_base",
                "description": "The base ID of a widget created by extending WP_Widget.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "skip_inactive": {
                "label": "skip_inactive",
                "description": "Whether to check in 'wp_inactive_widgets'.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False if widget is not active or id of sidebar in which the widget is active.",
        "rank": 0
    },
    "is_admin": {
        "since": "1.5.1",
        "group": "WordPress",
        "type": "fct",
        "name": "is_admin",
        "summary": "Determines whether the current request is for an administrative interface page.",
        "description": "<p>Does not check if the user is an administrator; use current_user_can() for checking roles and capabilities.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if inside WordPress administration interface, false otherwise.",
        "rank": 0
    },
    "is_admin_bar_showing": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "fct",
        "name": "is_admin_bar_showing",
        "summary": "Determines whether the admin bar should be showing.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the admin bar should be showing.",
        "rank": 0
    },
    "is_allowed_http_origin": {
        "since": "3.4.0",
        "group": "HTTP",
        "type": "fct",
        "name": "is_allowed_http_origin",
        "summary": "Determines if the HTTP origin is an authorized one.",
        "description": "",
        "inputs": {
            "origin": {
                "label": "origin",
                "description": "Origin URL. If not provided, the value of get_http_origin() is used.",
                "type": "null",
                "types": [
                    "null",
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Origin URL if allowed, empty string if not.",
        "rank": 0
    },
    "is_archive": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_archive",
        "summary": "Determines whether the query is for an existing archive page.",
        "description": "<p>Month, Year, Category, Author, Post Type archive...<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_archived": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "is_archived",
        "summary": "Check if a particular blog is archived.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "The blog id",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Whether the blog is archived or not",
        "rank": 0
    },
    "is_attachment": {
        "since": "2.0.0",
        "group": "Query",
        "type": "fct",
        "name": "is_attachment",
        "summary": "Determines whether the query is for an existing attachment page.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "attachment": {
                "label": "attachment",
                "description": "Attachment ID, title, slug, or array of such.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array",
                    "object"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_author": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_author",
        "summary": "Determines whether the query is for an existing author archive page.",
        "description": "<p>If the $author parameter is specified, this function will additionally check if the query is for one of the authors specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "author": {
                "label": "author",
                "description": "User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_avatar_comment_type": {
        "since": "5.1.0",
        "group": "Template",
        "type": "fct",
        "name": "is_avatar_comment_type",
        "summary": "Check if this comment type allows avatars to be retrieved.",
        "description": "",
        "inputs": {
            "comment_type": {
                "label": "comment_type",
                "description": "Comment type to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the comment type is allowed for retrieving avatars.",
        "rank": 0
    },
    "is_blog_admin": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_blog_admin",
        "summary": "Whether the current request is for a site's admininstrative interface.",
        "description": "<p>e.g. \/wp-admin\/<\/p> <p>Does not check if the user is an administrator; use current_user_can() for checking roles and capabilities.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if inside WordPress blog administration pages.",
        "rank": 0
    },
    "is_blog_installed": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_blog_installed",
        "summary": "Determines whether WordPress is already installed.",
        "description": "<p>The cache will be checked first. If you have a cache plugin, which saves the cache values, then this will work. If you use the default WordPress cache, and the database goes away, then you might have problems.<\/p> <p>Checks for the 'siteurl' option for whether WordPress is installed.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the site is already installed.",
        "rank": 0
    },
    "is_category": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_category",
        "summary": "Determines whether the query is for an existing category archive page.",
        "description": "<p>If the $category parameter is specified, this function will additionally check if the query is for one of the categories specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "category": {
                "label": "category",
                "description": "Category ID, name, slug, or array of Category IDs, names, and slugs.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_child_theme": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "fct",
        "name": "is_child_theme",
        "summary": "Whether a child theme is in use.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "true if a child theme is in use, false otherwise.",
        "rank": 0
    },
    "is_comment_feed": {
        "since": "3.0.0",
        "group": "Query",
        "type": "fct",
        "name": "is_comment_feed",
        "summary": "Is the query for a comments feed?",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_countable": {
        "since": "4.9.6",
        "group": "PHP",
        "type": "fct",
        "name": "is_countable",
        "summary": "Polyfill for is_countable() function added in PHP 7.3.",
        "description": "<p>Verify that the content of a variable is an array or an object implementing the Countable interface.<\/p>",
        "inputs": {
            "var": {
                "label": "var",
                "description": "The value to check.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if <code>$var<\/code> is countable, false otherwise.",
        "rank": 0
    },
    "is_customize_preview": {
        "since": "4.0.0",
        "group": "Theme",
        "type": "fct",
        "name": "is_customize_preview",
        "summary": "Whether the site is being previewed in the Customizer.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the site is being previewed in the Customizer, false otherwise.",
        "rank": 0
    },
    "is_date": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_date",
        "summary": "Determines whether the query is for an existing date archive.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_day": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_day",
        "summary": "Determines whether the query is for an existing day archive.",
        "description": "<p>A conditional check to test whether the page is a date-based archive page displaying posts for the current day.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_dynamic_sidebar": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "fct",
        "name": "is_dynamic_sidebar",
        "summary": "Determines whether the dynamic sidebar is enabled and used by the theme.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if using widgets. False, if not using widgets.",
        "rank": 0
    },
    "is_email": {
        "since": "0.71",
        "group": "WordPress",
        "type": "fct",
        "name": "is_email",
        "summary": "Verifies that an email is valid.",
        "description": "<p>Does not grok i18n domains. Not RFC compliant.<\/p>",
        "inputs": {
            "email": {
                "label": "email",
                "description": "Email address to verify.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "Either false or the valid email address.",
        "rank": 0
    },
    "is_email_address_unsafe": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "is_email_address_unsafe",
        "summary": "Checks an email address against a list of banned domains.",
        "description": "<p>This function checks against the Banned Email Domains list at wp-admin\/network\/settings.php. The check is only run on self-registrations; user creation at wp-admin\/network\/users.php bypasses this check.<\/p>",
        "inputs": {
            "user_email": {
                "label": "user_email",
                "description": "The email provided by the user at registration.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Returns true when the email address is banned.",
        "rank": 0
    },
    "is_embed": {
        "since": "4.4.0",
        "group": "Query",
        "type": "fct",
        "name": "is_embed",
        "summary": "Is the query for an embedded post?",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether we're in an embedded post or not.",
        "rank": 0
    },
    "is_feed": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_feed",
        "summary": "Determines whether the query is for a feed.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "feeds": {
                "label": "feeds",
                "description": "feed types to check.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_front_page": {
        "since": "2.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_front_page",
        "summary": "Determines whether the query is for the front page of the site.",
        "description": "<p>This is for what is displayed at your site's main URL.<\/p> <p>Depends on the site's &quot;Front page displays&quot; Reading Settings 'show_on_front' and 'page_on_front'.<\/p> <p>If you set a static page for the front page of your site, this function will return true when viewing that page.<\/p> <p>Otherwise the same as @see is_home()<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if front of site.",
        "rank": 0
    },
    "is_header_video_active": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "is_header_video_active",
        "summary": "Checks whether the custom header video is eligible to show on the current page.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the custom header video should be shown. False if not.",
        "rank": 0
    },
    "is_home": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_home",
        "summary": "Determines whether the query is for the blog homepage.",
        "description": "<p>The blog homepage is the page that shows the time-based blog content of the site.<\/p> <p>is_home() is dependent on the site's &quot;Front page displays&quot; Reading Settings 'show_on_front' and 'page_for_posts'.<\/p> <p>If a static page is set for the front page of the site, this function will return true only on the page you set as the &quot;Posts page&quot;.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if blog view homepage, otherwise false.",
        "rank": 0
    },
    "is_iterable": {
        "since": "4.9.6",
        "group": "PHP",
        "type": "fct",
        "name": "is_iterable",
        "summary": "Polyfill for is_iterable() function added in PHP 7.1.",
        "description": "<p>Verify that the content of a variable is an array or an object implementing the Traversable interface.<\/p>",
        "inputs": {
            "var": {
                "label": "var",
                "description": "The value to check.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if <code>$var<\/code> is iterable, false otherwise.",
        "rank": 0
    },
    "is_lighttpd_before_150": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_lighttpd_before_150",
        "summary": "Is the server running earlier than 1.5.0 version of lighttpd?",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the server is running lighttpd &lt; 1.5.0.",
        "rank": 0
    },
    "is_local_attachment": {
        "since": "2.0.0",
        "group": "Post",
        "type": "fct",
        "name": "is_local_attachment",
        "summary": "Determines whether an attachment URI is local and really an attachment.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "url": {
                "label": "url",
                "description": "URL to check",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "is_locale_switched": {
        "since": "4.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "is_locale_switched",
        "summary": "Whether switch_to_locale() is in effect.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the locale has been switched, false otherwise.",
        "rank": 0
    },
    "is_main_network": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_main_network",
        "summary": "Determine whether a network is the main network of the Multisite installation.",
        "description": "",
        "inputs": {
            "network_id": {
                "label": "network_id",
                "description": "Network ID to test. Defaults to current network.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if $network_id is the main network, or if not running Multisite.",
        "rank": 0
    },
    "is_main_query": {
        "since": "3.3.0",
        "group": "Query",
        "type": "fct",
        "name": "is_main_query",
        "summary": "Determines whether the query is the main query.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_main_site": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_main_site",
        "summary": "Determine whether a site is the main site of the current network.",
        "description": "",
        "inputs": {
            "site_id": {
                "label": "site_id",
                "description": "Site ID to test. Defaults to current site.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "Network ID of the network to check for. Defaults to current network.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if $site_id is the main site of the network, or if not              running Multisite.",
        "rank": 0
    },
    "is_month": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_month",
        "summary": "Determines whether the query is for an existing month archive.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_multi_author": {
        "since": "3.2.0",
        "group": "Template",
        "type": "fct",
        "name": "is_multi_author",
        "summary": "Determines whether this site has more than one author.",
        "description": "<p>Checks to see if more than one author has published posts.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether or not we have more than one author",
        "rank": 0
    },
    "is_multisite": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_multisite",
        "summary": "If Multisite is enabled.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if Multisite is enabled, false otherwise.",
        "rank": 0
    },
    "is_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "is_nav_menu",
        "summary": "Check if the given ID is a navigation menu.",
        "description": "<p>Returns true if it is; false otherwise.<\/p>",
        "inputs": {
            "menu": {
                "label": "menu",
                "description": "Menu ID, slug, name, or object of menu to check.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the menu exists.",
        "rank": 0
    },
    "is_nav_menu_item": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "is_nav_menu_item",
        "summary": "Determines whether the given ID is a nav menu item.",
        "description": "",
        "inputs": {
            "menu_item_id": {
                "label": "menu_item_id",
                "description": "The ID of the potential nav menu item.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the given ID is that of a nav menu item.",
        "rank": 0
    },
    "is_network_admin": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_network_admin",
        "summary": "Whether the current request is for the network administrative interface.",
        "description": "<p>e.g. \/wp-admin\/network\/<\/p> <p>Does not check if the user is an administrator; use current_user_can() for checking roles and capabilities.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if inside WordPress network administration pages.",
        "rank": 0
    },
    "is_network_only_plugin": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "is_network_only_plugin",
        "summary": "Checks for \"Network: true\" in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled.",
        "description": "<p>Checks for &quot;Site Wide Only: true&quot; for backward compatibility.<\/p>",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if plugin is network only, false otherwise.",
        "rank": 0
    },
    "is_new_day": {
        "since": "0.71",
        "group": "WordPress",
        "type": "fct",
        "name": "is_new_day",
        "summary": "Determines whether the publish date of the current post in the loop is different from the publish date of the previous post in the loop.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "1 when new day, 0 if not a new day.",
        "rank": 0
    },
    "is_object_in_taxonomy": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "is_object_in_taxonomy",
        "summary": "Determine if the given object type is associated with the given taxonomy.",
        "description": "",
        "inputs": {
            "object_type": {
                "label": "object_type",
                "description": "Object type string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Single taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if object is associated with the taxonomy, otherwise false.",
        "rank": 0
    },
    "is_object_in_term": {
        "since": "2.7.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "is_object_in_term",
        "summary": "Determine if the given object is associated with any of the given terms.",
        "description": "<p>The given terms are checked against the object's terms' term_ids, names and slugs. Terms given as integers will only be checked against the object's terms' term_ids. If no terms are given, determines if object is associated with any terms in the given taxonomy.<\/p>",
        "inputs": {
            "object_id": {
                "label": "object_id",
                "description": "ID of the object (post ID, link ID, ...).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Single taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "terms": {
                "label": "terms",
                "description": "Term term_id, name, slug or array of said.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "WP_Error on input error.",
        "rank": 0
    },
    "is_page": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_page",
        "summary": "Determines whether the query is for an existing single page.",
        "description": "<p>If the $page parameter is specified, this function will additionally check if the query is for one of the pages specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "page": {
                "label": "page",
                "description": "Page ID, title, slug, or array of such.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the query is for an existing single page.",
        "rank": 0
    },
    "is_page_template": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "is_page_template",
        "summary": "Determines whether currently in a page template.",
        "description": "<p>This template tag allows you to determine if you are in a page template. You can optionally provide a template name or array of template names and then the check will be specific to that template.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "template": {
                "label": "template",
                "description": "The specific template name or array of templates to match.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "is_paged": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_paged",
        "summary": "Determines whether the query is for paged results and not for the first page.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_plugin_active": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "is_plugin_active",
        "summary": "Determines whether a plugin is active.",
        "description": "<p>Only plugins installed in the plugins\/ folder can be active.<\/p> <p>Plugins in the mu-plugins\/ folder can't be &quot;activated,&quot; so this function will return false for those plugins.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if in the active plugins list. False, not in the list.",
        "rank": 0
    },
    "is_plugin_active_for_network": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "is_plugin_active_for_network",
        "summary": "Determines whether the plugin is active for the entire network.",
        "description": "<p>Only plugins installed in the plugins\/ folder can be active.<\/p> <p>Plugins in the mu-plugins\/ folder can't be &quot;activated,&quot; so this function will return false for those plugins.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if active for the network, otherwise false.",
        "rank": 0
    },
    "is_plugin_inactive": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "is_plugin_inactive",
        "summary": "Determines whether the plugin is inactive.",
        "description": "<p>Reverse of is_plugin_active(). Used as a callback.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if inactive. False if active.",
        "rank": 0
    },
    "is_post_type_archive": {
        "since": "3.1.0",
        "group": "Query",
        "type": "fct",
        "name": "is_post_type_archive",
        "summary": "Determines whether the query is for an existing post type archive page.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post_types": {
                "label": "post_types",
                "description": "Post type or array of posts types to check against.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_post_type_hierarchical": {
        "since": "3.0.0",
        "group": "Post",
        "type": "fct",
        "name": "is_post_type_hierarchical",
        "summary": "Whether the post type is hierarchical.",
        "description": "<p>A false return value might also mean that the post type does not exist.<\/p>",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Post type name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether post type is hierarchical.",
        "rank": 0
    },
    "is_post_type_viewable": {
        "since": "4.4.0",
        "group": "Post",
        "type": "fct",
        "name": "is_post_type_viewable",
        "summary": "Determines whether a post type is considered \"viewable\".",
        "description": "<p>For built-in post types such as posts and pages, the 'public' value will be evaluated. For all others, the 'publicly_queryable' value will be used.<\/p>",
        "inputs": {
            "post_type": {
                "label": "post_type",
                "description": "Post type name or object.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post type should be considered viewable.",
        "rank": 0
    },
    "is_preview": {
        "since": "2.0.0",
        "group": "Query",
        "type": "fct",
        "name": "is_preview",
        "summary": "Determines whether the query is for a post or page preview.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_protected_meta": {
        "since": "3.1.3",
        "group": "Meta",
        "type": "fct",
        "name": "is_protected_meta",
        "summary": "Determines whether a meta key is considered protected.",
        "description": "",
        "inputs": {
            "meta_key": {
                "label": "meta_key",
                "description": "Meta key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the meta key is considered protected.",
        "rank": 0
    },
    "is_random_header_image": {
        "since": "3.2.0",
        "group": "Theme",
        "type": "fct",
        "name": "is_random_header_image",
        "summary": "Check if random header image is in use.",
        "description": "<p>Always true if user expressly chooses the option in Appearance &gt; Header. Also true if theme has multiple header images registered, no specific header image is chosen, and theme turns on random headers with add_theme_support().<\/p>",
        "inputs": {
            "type": {
                "label": "type",
                "description": "The random pool to use. any|default|uploaded",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'any'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_registered_sidebar": {
        "since": "4.4.0",
        "group": "Widgets",
        "type": "fct",
        "name": "is_registered_sidebar",
        "summary": "Checks if a sidebar is registered.",
        "description": "",
        "inputs": {
            "sidebar_id": {
                "label": "sidebar_id",
                "description": "The ID of the sidebar when it was registered.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the sidebar is registered, false otherwise.",
        "rank": 0
    },
    "is_robots": {
        "since": "2.1.0",
        "group": "Query",
        "type": "fct",
        "name": "is_robots",
        "summary": "Is the query for the robots file?",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_rtl": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "fct",
        "name": "is_rtl",
        "summary": "Determines whether the current locale is right-to-left (RTL).",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether locale is RTL.",
        "rank": 0
    },
    "is_search": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_search",
        "summary": "Determines whether the query is for a search.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_serialized": {
        "since": "2.0.5",
        "group": "WordPress",
        "type": "fct",
        "name": "is_serialized",
        "summary": "Check value to find if it was serialized.",
        "description": "<p>If $data is not an string, then returned value will always be false. Serialized data is always a string.<\/p>",
        "inputs": {
            "data": {
                "label": "data",
                "description": "Value to check to see if was serialized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "strict": {
                "label": "strict",
                "description": "Whether to be strict about the end of the string.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if not serialized and true if it was.",
        "rank": 0
    },
    "is_serialized_string": {
        "since": "2.0.5",
        "group": "WordPress",
        "type": "fct",
        "name": "is_serialized_string",
        "summary": "Check whether serialized data is of string type.",
        "description": "",
        "inputs": {
            "data": {
                "label": "data",
                "description": "Serialized data.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if not a serialized string, true if it is.",
        "rank": 0
    },
    "is_single": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_single",
        "summary": "Determines whether the query is for an existing single post.",
        "description": "<p>Works for any post type, except attachments and pages<\/p> <p>If the $post parameter is specified, this function will additionally check if the query is for one of the Posts specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID, title, slug, or array of such.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the query is for an existing single post.",
        "rank": 0
    },
    "is_singular": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_singular",
        "summary": "Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).",
        "description": "<p>If the $post_types parameter is specified, this function will additionally check if the query is for one of the Posts Types specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post_types": {
                "label": "post_types",
                "description": "Post type or array of post types.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the query is for an existing single post of any of the given post types.",
        "rank": 0
    },
    "is_site_meta_supported": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_site_meta_supported",
        "summary": "Determines whether site meta is enabled.",
        "description": "<p>This function checks whether the 'blogmeta' database table exists. The result is saved as a setting for the main network, making it essentially a global setting. Subsequent requests will refer to this setting instead of running the query.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if site meta is supported, false otherwise.",
        "rank": 0
    },
    "is_ssl": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_ssl",
        "summary": "Determines if SSL is used.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if SSL, otherwise false.",
        "rank": 0
    },
    "is_sticky": {
        "since": "2.7.0",
        "group": "Post",
        "type": "fct",
        "name": "is_sticky",
        "summary": "Determines whether a post is sticky.",
        "description": "<p>Sticky posts should remain at the top of The Loop. If the post ID is not given, then The Loop ID for the current post will be used.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether post is sticky.",
        "rank": 0
    },
    "is_subdomain_install": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "fct",
        "name": "is_subdomain_install",
        "summary": "Whether a subdomain configuration is enabled.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if subdomain configuration is enabled, false otherwise.",
        "rank": 0
    },
    "is_super_admin": {
        "since": "3.0.0",
        "group": "Users",
        "type": "fct",
        "name": "is_super_admin",
        "summary": "Determine if user is a site admin.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "(Optional) The ID of a user. Defaults to the current user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the user is a site admin.",
        "rank": 0
    },
    "is_tag": {
        "since": "2.3.0",
        "group": "Query",
        "type": "fct",
        "name": "is_tag",
        "summary": "Determines whether the query is for an existing tag archive page.",
        "description": "<p>If the $tag parameter is specified, this function will additionally check if the query is for one of the tags specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "tag": {
                "label": "tag",
                "description": "Tag ID, name, slug, or array of Tag IDs, names, and slugs.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_tax": {
        "since": "2.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_tax",
        "summary": "Determines whether the query is for an existing custom taxonomy archive page.",
        "description": "<p>If the $taxonomy parameter is specified, this function will additionally check if the query is for that specific $taxonomy.<\/p> <p>If the $term parameter is specified in addition to the $taxonomy parameter, this function will additionally check if the query is for one of the terms specified.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy slug or slugs.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term ID, name, slug or array of Term IDs, names, and slugs.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True for custom taxonomy archive pages, false for built-in taxonomies (category and tag archives).",
        "rank": 0
    },
    "is_taxonomy_hierarchical": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "is_taxonomy_hierarchical",
        "summary": "Determines whether the taxonomy object is hierarchical.",
        "description": "<p>Checks to make sure that the taxonomy is an object first. Then Gets the object, and finally returns the hierarchical value in the object.<\/p> <p>A false return value might also mean that the taxonomy does not exist.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "taxonomy": {
                "label": "taxonomy",
                "description": "Name of taxonomy object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the taxonomy is hierarchical.",
        "rank": 0
    },
    "is_taxonomy_viewable": {
        "since": "5.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "is_taxonomy_viewable",
        "summary": "Determines whether a taxonomy is considered \"viewable\".",
        "description": "",
        "inputs": {
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name or object.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the taxonomy should be considered viewable.",
        "rank": 0
    },
    "is_textdomain_loaded": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "fct",
        "name": "is_textdomain_loaded",
        "summary": "Whether there are translations for the text domain.",
        "description": "",
        "inputs": {
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether there are translations.",
        "rank": 0
    },
    "is_time": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_time",
        "summary": "Determines whether the query is for a specific time.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_trackback": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_trackback",
        "summary": "Determines whether the query is for a trackback endpoint call.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_uninstallable_plugin": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "is_uninstallable_plugin",
        "summary": "Whether the plugin can be uninstalled.",
        "description": "",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether plugin can be uninstalled.",
        "rank": 0
    },
    "is_upload_space_available": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "fct",
        "name": "is_upload_space_available",
        "summary": "Determines if there is any upload space left in the current blog's quota.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if space is available, false otherwise.",
        "rank": 0
    },
    "is_user_admin": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_user_admin",
        "summary": "Whether the current request is for a user admin screen.",
        "description": "<p>e.g. \/wp-admin\/user\/<\/p> <p>Does not check if the user is an administrator; use current_user_can() for checking roles and capabilities.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if inside WordPress user administration pages.",
        "rank": 0
    },
    "is_user_logged_in": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_user_logged_in",
        "summary": "Determines whether the current visitor is a logged in user.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if user is logged in, false if not logged in.",
        "rank": 0
    },
    "is_user_member_of_blog": {
        "since": "MU (3.0.0)",
        "group": "Users",
        "type": "fct",
        "name": "is_user_member_of_blog",
        "summary": "Find out whether a user is a member of a given blog.",
        "description": "",
        "inputs": {
            "user_id": {
                "label": "user_id",
                "description": "The unique ID of the user. Defaults to the current user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog to check. Defaults to the current site.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_user_spammy": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "is_user_spammy",
        "summary": "Check to see whether a user is marked as a spammer, based on user login.",
        "description": "",
        "inputs": {
            "user": {
                "label": "user",
                "description": "Defaults to current user. WP_User object, or user login name as a string.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "is_wp_error": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "is_wp_error",
        "summary": "Check whether variable is a WordPress Error.",
        "description": "<p>Returns true if $thing is an object of the WP_Error class.<\/p>",
        "inputs": {
            "thing": {
                "label": "thing",
                "description": "Check if unknown variable is a WP_Error object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True, if WP_Error. False, if not WP_Error.",
        "rank": 0
    },
    "is_year": {
        "since": "1.5.0",
        "group": "Query",
        "type": "fct",
        "name": "is_year",
        "summary": "Determines whether the query is for an existing year archive.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "iso8601_timezone_to_offset": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "iso8601_timezone_to_offset",
        "summary": "Computes an offset in seconds from an iso8601 timezone.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "timezone": {
                "label": "timezone",
                "description": "Either 'Z' for 0 offset or '&plusmn;hhmm'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "float"
        ],
        "return_description": "The offset in seconds.",
        "rank": 0
    },
    "iso8601_to_datetime": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "iso8601_to_datetime",
        "summary": "Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "date_string": {
                "label": "date_string",
                "description": "Date and time in ISO 8601 format https:\/\/en.wikipedia.org\/wiki\/ISO_8601.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "timezone": {
                "label": "timezone",
                "description": "If set to GMT returns the time minus gmt_offset. Default is 'user'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'user'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The date and time in MySQL DateTime format - Y-m-d H:i:s.",
        "rank": 0
    },
    "json_decode": {
        "since": false,
        "group": "PHP",
        "type": "fct",
        "name": "json_decode",
        "summary": "",
        "description": "",
        "inputs": {
            "string": {
                "label": "string",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "assoc_array": {
                "label": "assoc_array",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "json_last_error_msg": {
        "since": "4.4.0",
        "group": "PHP",
        "type": "fct",
        "name": "json_last_error_msg",
        "summary": "Retrieves the error string of the last json_encode() or json_decode() call.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "string"
        ],
        "return_description": "Returns the error message on success, &quot;No Error&quot; if no error has occurred,                     or false on failure.",
        "rank": 0
    },
    "language_attributes": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "language_attributes",
        "summary": "Displays the language attributes for the html tag.",
        "description": "<p>Builds up a set of html attributes containing the text direction and language information for the page.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "doctype": {
                "label": "doctype",
                "description": "The type of html document. Accepts 'xhtml' or 'html'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'html'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "link_advanced_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "link_advanced_meta_box",
        "summary": "Display advanced link options form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "link_categories_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "link_categories_meta_box",
        "summary": "Display link categories form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "link_submit_meta_box": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "link_submit_meta_box",
        "summary": "Display link create form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "link_target_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "link_target_meta_box",
        "summary": "Display form fields for changing link target.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "link_xfn_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "link_xfn_meta_box",
        "summary": "Display xfn form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "links_add_base_url": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "links_add_base_url",
        "summary": "Add a Base url to relative links in passed content.",
        "description": "<p>By default it supports the 'src' and 'href' attributes. However this can be changed via the 3rd param.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "String to search for links in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "base": {
                "label": "base",
                "description": "The base URL to prefix to links.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "attrs": {
                "label": "attrs",
                "description": "The attributes which should be processed.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array('src', 'href')",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The processed content.",
        "rank": 0
    },
    "links_add_target": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "links_add_target",
        "summary": "Adds a Target attribute to all links in passed content.",
        "description": "<p>This function by default only applies to &lt;a&gt; tags, however this can be modified by the 3rd param.<\/p> <p><em>NOTE:<\/em> Any current target attributed will be stripped and replaced.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "String to search for links in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "target": {
                "label": "target",
                "description": "The Target to add to the links.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'_blank'",
                "required": false
            },
            "tags": {
                "label": "tags",
                "description": "An array of tags to apply to.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array('a')",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The processed content.",
        "rank": 0
    },
    "list_core_update": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "list_core_update",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "update": {
                "label": "update",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "list_files": {
        "since": "2.6.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "list_files",
        "summary": "Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.",
        "description": "<p>The depth of the recursiveness can be controlled by the $levels param.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "folder": {
                "label": "folder",
                "description": "Full path to folder.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "levels": {
                "label": "levels",
                "description": "Levels of folders to follow, Default 100 (PHP Loop limit).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "100",
                "required": false
            },
            "exclusions": {
                "label": "exclusions",
                "description": "List of folders and files to skip.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "string[]"
        ],
        "return_description": "False on failure, else array of files.",
        "rank": 0
    },
    "list_meta": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "list_meta",
        "summary": "Outputs a post's public meta data in the Custom Fields meta box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta": {
                "label": "meta",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "load_child_theme_textdomain": {
        "since": "2.9.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_child_theme_textdomain",
        "summary": "Load the child themes translated strings.",
        "description": "<p>If the current locale exists as a .mo file in the child themes root directory, it will be included in the translated strings by the $domain.<\/p> <p>The .mo files must be named based on the locale exactly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Path to the directory containing the .mo file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when the theme textdomain is successfully loaded, false otherwise.",
        "rank": 0
    },
    "load_default_textdomain": {
        "since": "1.5.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_default_textdomain",
        "summary": "Load default translated strings based on locale.",
        "description": "<p>Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The translated (.mo) file is named based on the locale.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "locale": {
                "label": "locale",
                "description": "Locale to load. Default is the value of get_locale().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the textdomain was loaded.",
        "rank": 0
    },
    "load_image_to_edit": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "load_image_to_edit",
        "summary": "Load an image resource for editing.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "mime_type": {
                "label": "mime_type",
                "description": "Image mime type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size, defaults to 'full'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'full'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "resource",
            "false"
        ],
        "return_description": "The resulting image resource on success, false on failure.",
        "rank": 0
    },
    "load_muplugin_textdomain": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_muplugin_textdomain",
        "summary": "Load the translated strings for a plugin residing in the mu-plugins directory.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "mu_plugin_rel_path": {
                "label": "mu_plugin_rel_path",
                "description": "Relative to WPMU_PLUGIN_DIR directory in which the .mo file resides.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when textdomain is successfully loaded, false otherwise.",
        "rank": 0
    },
    "load_plugin_textdomain": {
        "since": "1.5.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_plugin_textdomain",
        "summary": "Loads a plugin's translated strings.",
        "description": "<p>If the path is not given then it will be the root of the plugin directory.<\/p> <p>The .mo file should be named based on the text domain with a dash, and then the locale exactly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Unique identifier for retrieving translated strings",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Use the $plugin_rel_path parameter instead.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "plugin_rel_path": {
                "label": "plugin_rel_path",
                "description": "Relative path to WP_PLUGIN_DIR where the .mo file resides.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when textdomain is successfully loaded, false otherwise.",
        "rank": 0
    },
    "load_script_textdomain": {
        "since": "5.0.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_script_textdomain",
        "summary": "Loads the script translated strings.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script to register a translation domain to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "The full file path to the directory containing translation files.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "False if the script textdomain could not be loaded, the translated strings                      in JSON encoding otherwise.",
        "rank": 0
    },
    "load_script_translations": {
        "since": "5.0.2",
        "group": "i18n",
        "type": "efct",
        "name": "load_script_translations",
        "summary": "Loads the translation data for the given script handle and text domain.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Path to the translation file to load. False if there isn't one.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script to register a translation domain to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "The text domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The JSON-encoded translated strings for the given script handle and text domain. False if there are none.",
        "rank": 0
    },
    "load_template": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "load_template",
        "summary": "Require the template file with WordPress environment.",
        "description": "<p>The globals are set up for the template file to ensure that the WordPress environment is available from within the function. The query variables are also available.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "_template_file": {
                "label": "_template_file",
                "description": "Path to template file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "require_once": {
                "label": "require_once",
                "description": "Whether to require_once or require.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "load_textdomain": {
        "since": "1.5.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_textdomain",
        "summary": "Load a .mo file into the text domain $domain.",
        "description": "<p>If the text domain already exists, the translations will be merged. If both sets have the same string, the translation from the original value will be taken.<\/p> <p>On success, the .mo file will be placed in the $l10n global by $domain and will be a MO object.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "mofile": {
                "label": "mofile",
                "description": "Path to the .mo file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "load_theme_textdomain": {
        "since": "1.5.0",
        "group": "i18n",
        "type": "efct",
        "name": "load_theme_textdomain",
        "summary": "Load the theme's translated strings.",
        "description": "<p>If the current locale exists as a .mo file in the theme's root directory, it will be included in the translated strings by the $domain.<\/p> <p>The .mo files must be named based on the locale exactly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Path to the directory containing the .mo file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when textdomain is successfully loaded, false otherwise.",
        "rank": 0
    },
    "locate_template": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "locate_template",
        "summary": "Retrieve the name of the highest priority template file that exists.",
        "description": "<p>Searches in the STYLESHEETPATH before TEMPLATEPATH and wp-includes\/theme-compat so that themes which inherit from a parent theme can just overload one file.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "template_names": {
                "label": "template_names",
                "description": "Template file(s) to search for, in order.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "load": {
                "label": "load",
                "description": "If true the template file will be loaded if it is found.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "require_once": {
                "label": "require_once",
                "description": "Whether to require_once or require. Has no effect if $load is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The template filename if one is located.",
        "rank": 0
    },
    "login_footer": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "login_footer",
        "summary": "Outputs the footer for the login page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "input_id": {
                "label": "input_id",
                "description": "Which input to auto-focus.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "login_header": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "login_header",
        "summary": "Output the login page header.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "WordPress login Page title to display in the &lt;title&gt; element.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'Log In'",
                "required": false
            },
            "message": {
                "label": "message",
                "description": "Message to display in header.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "wp_error": {
                "label": "wp_error",
                "description": "The error to pass. Default is a WP_Error instance.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "maintenance_nag": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "maintenance_nag",
        "summary": "",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "make_clickable": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "make_clickable",
        "summary": "Convert plaintext URI to HTML links.",
        "description": "<p>Converts URI, www and ftp, and email addresses. Finishes by fixing links within links.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Content to convert URIs.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with converted URIs.",
        "rank": 0
    },
    "make_db_current": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "make_db_current",
        "summary": "Updates the database tables to a new schema.",
        "description": "<p>By default, updates all the tables to use the latest defined schema, but can also be used to update a specific set of tables in wp_get_db_schema().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tables": {
                "label": "tables",
                "description": "Which set of tables to update. Default is 'all'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "make_db_current_silent": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "make_db_current_silent",
        "summary": "Updates the database tables to a new schema, but without displaying results.",
        "description": "<p>By default, updates all the tables to use the latest defined schema, but can also be used to update a specific set of tables in wp_get_db_schema().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tables": {
                "label": "tables",
                "description": "Which set of tables to update. Default is 'all'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "make_site_theme": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "make_site_theme",
        "summary": "Creates a site theme.",
        "description": "<p>{@internal Missing Long Description}}<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "make_site_theme_from_default": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "make_site_theme_from_default",
        "summary": "Creates a site theme from the default theme.",
        "description": "<p>{@internal Missing Long Description}}<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "theme_name": {
                "label": "theme_name",
                "description": "The name of the theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "template": {
                "label": "template",
                "description": "The directory name of the theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "make_site_theme_from_oldschool": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "make_site_theme_from_oldschool",
        "summary": "Creates a site theme from an existing theme.",
        "description": "<p>{@internal Missing Long Description}}<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "theme_name": {
                "label": "theme_name",
                "description": "The name of the theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "template": {
                "label": "template",
                "description": "The directory name of the theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "map_deep": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "map_deep",
        "summary": "Maps a function to all non-iterable elements of an array or an object.",
        "description": "<p>This is similar to array_walk_recursive() but acts upon objects too.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The array, object, or scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "The function to map onto $value.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The value with the callback applied to all non-arrays and non-objects inside it.",
        "rank": 0
    },
    "map_meta_cap": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "map_meta_cap",
        "summary": "Map meta capabilities to primitive capabilities.",
        "description": "<p>This does not actually compare whether the user ID has the actual capability, just what the capability or capabilities are. Meta capability list value can be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post', 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cap": {
                "label": "cap",
                "description": "Capability name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the specific object to check against if $cap is a &quot;meta&quot; cap. &quot;Meta&quot; capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used by map_meta_cap() to map to other &quot;primitive&quot; capabilities, e.g. 'edit_posts', 'edit_others_posts', etc. The parameter is accessed via func_get_args().",
                "type": "int",
                "types": [
                    "int"
                ],
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Actual capabilities for meta capability.",
        "rank": 0
    },
    "maybe_add_column": {
        "since": "1.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "maybe_add_column",
        "summary": "Adds column to a database table if it doesn't already exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table_name": {
                "label": "table_name",
                "description": "The table name to modify.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "column_name": {
                "label": "column_name",
                "description": "The column name to add to the table.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "create_ddl": {
                "label": "create_ddl",
                "description": "The SQL statement used to add the column.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if already exists or on successful completion, false on error.",
        "rank": 0
    },
    "maybe_convert_table_to_utf8mb4": {
        "since": "4.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "maybe_convert_table_to_utf8mb4",
        "summary": "If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table": {
                "label": "table",
                "description": "The table to convert.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "true if the table was converted, false if it wasn't.",
        "rank": 0
    },
    "maybe_create_table": {
        "since": "1.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "maybe_create_table",
        "summary": "Creates a table in the database if it doesn't already exist.",
        "description": "<p>This method checks for an existing database and creates a new one if it's not already present. It doesn't rely on MySQL's &quot;IF NOT EXISTS&quot; statement, but chooses to query all tables first and then run the SQL statement creating the table.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table_name": {
                "label": "table_name",
                "description": "Database table name to create.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "create_ddl": {
                "label": "create_ddl",
                "description": "SQL statement to create table.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "If table already exists or was created by function.",
        "rank": 0
    },
    "maybe_drop_column": {
        "since": "1.0.0",
        "group": "Plugin",
        "type": "efct",
        "name": "maybe_drop_column",
        "summary": "Drop column from database table, if it exists.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "table_name": {
                "label": "table_name",
                "description": "Table name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "column_name": {
                "label": "column_name",
                "description": "Column name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "drop_ddl": {
                "label": "drop_ddl",
                "description": "SQL statement to drop column.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False on failure, true on success or doesn't exist.",
        "rank": 0
    },
    "maybe_hash_hex_color": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "maybe_hash_hex_color",
        "summary": "Ensures that any hex color is properly hashed.",
        "description": "<p>Otherwise, returns value untouched.<\/p> <p>This method should only be necessary if using sanitize_hex_color_no_hash().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "color": {
                "label": "color",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "maybe_serialize": {
        "since": "2.0.5",
        "group": "WordPress",
        "type": "efct",
        "name": "maybe_serialize",
        "summary": "Serialize data, if needed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Data that might be serialized.",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "A scalar data",
        "rank": 0
    },
    "maybe_unserialize": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "maybe_unserialize",
        "summary": "Unserialize value only if it was serialized.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "original": {
                "label": "original",
                "description": "Maybe unserialized original, if is needed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Unserialized data can be any type.",
        "rank": 0
    },
    "mbstring_binary_safe_encoding": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "mbstring_binary_safe_encoding",
        "summary": "Set the mbstring internal encoding to a binary safe encoding when func_overload is enabled.",
        "description": "<p>When mbstring.func_overload is in use for multi-byte encodings, the results from strlen() and similar functions respect the utf8 characters, causing binary data to return incorrect lengths.<\/p> <p>This function overrides the mbstring encoding to a binary-safe encoding, and resets it to the users expected encoding afterwards through the reset_mbstring_encoding function.<\/p> <p>It is safe to recursively call this function, however each mbstring_binary_safe_encoding() call must be followed up with an equal number of reset_mbstring_encoding() calls.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "reset": {
                "label": "reset",
                "description": "Whether to reset the encoding back to a previously-set encoding.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_buttons": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_buttons",
        "summary": "Adds the media button to the editor",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "editor_id": {
                "label": "editor_id",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'content'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_handle_sideload": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_handle_sideload",
        "summary": "Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file_array": {
                "label": "file_array",
                "description": "Array similar to a $_FILES upload array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "The post ID the media is associated with.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "desc": {
                "label": "desc",
                "description": "Description of the side-loaded file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "Post data to override.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "object"
        ],
        "return_description": "The ID of the attachment or a WP_Error on failure.",
        "rank": 0
    },
    "media_handle_upload": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_handle_upload",
        "summary": "Save a file submitted from a POST request and create an attachment post for it.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file_id": {
                "label": "file_id",
                "description": "Index of the $_FILES array that the file was sent. Required.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "The post ID of a post to attach the media item to. Required, but can be set to 0, creating a media item that has no relationship to a post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_data": {
                "label": "post_data",
                "description": "Overwrite some of the attachment. Optional.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "overrides": {
                "label": "overrides",
                "description": "Override the wp_handle_upload() behavior. Optional.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array('test_form' => false)",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "ID of the attachment or a WP_Error object on failure.",
        "rank": 0
    },
    "media_post_single_attachment_fields_to_edit": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_post_single_attachment_fields_to_edit",
        "summary": "Retrieves the post non-image attachment fields to edito form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "form_fields": {
                "label": "form_fields",
                "description": "An array of attachment form fields.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "The WP_Post attachment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Filtered attachment form fields.",
        "rank": 0
    },
    "media_send_to_editor": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_send_to_editor",
        "summary": "Adds image html to editor",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "html": {
                "label": "html",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_sideload_image": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_sideload_image",
        "summary": "Downloads an image from the specified URL and attaches it to a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The URL of the image to download.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "The post ID the media is to be associated with.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "desc": {
                "label": "desc",
                "description": "Description of the image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "return": {
                "label": "return",
                "description": "Accepts 'html' (image tag html) or 'src' (URL), or 'id' (attachment ID).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'html'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "Populated HTML img tag on success, WP_Error object otherwise.",
        "rank": 0
    },
    "media_single_attachment_fields_to_edit": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_single_attachment_fields_to_edit",
        "summary": "Retrieves the single non-image attachment fields to edit form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "form_fields": {
                "label": "form_fields",
                "description": "An array of attachment form fields.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "The WP_Post attachment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Filtered attachment form fields.",
        "rank": 0
    },
    "media_upload_form": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_upload_form",
        "summary": "Outputs the legacy media upload form.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_upload_form_handler": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "media_upload_form_handler",
        "summary": "Handles form submissions for the legacy media uploader.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "void|object WP_Error on failure",
        "rank": 0
    },
    "media_upload_gallery": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "media_upload_gallery",
        "summary": "Retrieves the legacy media uploader form in an iframe.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "",
        "rank": 0
    },
    "media_upload_gallery_form": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_upload_gallery_form",
        "summary": "Adds gallery form to upload iframe",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_upload_library": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "media_upload_library",
        "summary": "Retrieves the legacy media library form in an iframe.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "",
        "rank": 0
    },
    "media_upload_library_form": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_upload_library_form",
        "summary": "Outputs the legacy media upload form for the media library.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_upload_tabs": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "media_upload_tabs",
        "summary": "Defines the default media upload tabs",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "default tabs",
        "rank": 0
    },
    "media_upload_type_form": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_upload_type_form",
        "summary": "Outputs the legacy media upload form for a given media type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'file'",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": "null",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "media_upload_type_url_form": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "media_upload_type_url_form",
        "summary": "Outputs the legacy media upload form for external media.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": "null",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "menu_page_url": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "menu_page_url",
        "summary": "Get the url to access a particular menu page based on the slug it was registered with.",
        "description": "<p>If the slug hasn't been registered properly no url will be returned<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug name to refer to this menu by (should be unique for this menu)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "echo": {
                "label": "echo",
                "description": "Whether or not to echo the url - default is true",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "the url",
        "rank": 0
    },
    "meta_box_prefs": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "meta_box_prefs",
        "summary": "Prints the meta box preferences for screen meta.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "screen": {
                "label": "screen",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "meta_form": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "meta_form",
        "summary": "Prints the form in the Custom Fields meta box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post being edited.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "metadata_exists": {
        "since": "3.3.0",
        "group": "Meta",
        "type": "efct",
        "name": "metadata_exists",
        "summary": "Determine if a meta key is set for a given object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object metadata is for",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True of the key is set, false if not.",
        "rank": 0
    },
    "ms_allowed_http_request_hosts": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "ms_allowed_http_request_hosts",
        "summary": "Whitelists any domain in a multisite installation for safe HTTP requests.",
        "description": "<p>Attached to the {@see 'http_request_host_is_external'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "is_external": {
                "label": "is_external",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "host": {
                "label": "host",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "ms_is_switched": {
        "since": "3.5.0",
        "group": "Multisite",
        "type": "fct",
        "name": "ms_is_switched",
        "summary": "Determines if switch_to_blog() is in effect",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if switched, false otherwise.",
        "rank": 0
    },
    "ms_site_check": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "fct",
        "name": "ms_site_check",
        "summary": "Checks status of current blog.",
        "description": "<p>Checks if the blog is deleted, inactive, archived, or spammed.<\/p> <p>Dies with a default message if the blog does not pass the check.<\/p> <p>To change the default message when a blog does not pass the check, use the wp-content\/blog-deleted.php, blog-inactive.php and blog-suspended.php drop-ins.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "string"
        ],
        "return_description": "Returns true on success, or drop-in file to include.",
        "rank": 0
    },
    "mu_dropdown_languages": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "mu_dropdown_languages",
        "summary": "Generates and displays a drop-down of available languages.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "lang_files": {
                "label": "lang_files",
                "description": "An array of the language files.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            },
            "current": {
                "label": "current",
                "description": "The current language code.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "mysql2date": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "mysql2date",
        "summary": "Convert given date string into a different format.",
        "description": "<p>$format should be either a PHP date format string, e.g. 'U' for a Unix timestamp, or 'G' for a Unix timestamp assuming that $date is GMT.<\/p> <p>If $translate is true then the given date and format string will be passed to date_i18n() for translation.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "Format of the date to return.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "date": {
                "label": "date",
                "description": "Date string to convert.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "translate": {
                "label": "translate",
                "description": "Whether the return date should be translated.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "int",
            "bool"
        ],
        "return_description": "Formatted date string or Unix timestamp. False if $date is empty.",
        "rank": 0
    },
    "mysql_to_rfc3339": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "mysql_to_rfc3339",
        "summary": "Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601 (Y-m-d\\TH:i:s).",
        "description": "<p>Explicitly strips timezones, as datetimes are not saved with any timezone information. Including any information on the offset could be misleading.<\/p> <p>Despite historical function name, the output does not conform to RFC3339 format, which must contain timezone.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "date_string": {
                "label": "date_string",
                "description": "Date string to parse and format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Date formatted for ISO8601 without time zone.",
        "rank": 0
    },
    "network_admin_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "network_admin_url",
        "summary": "Retrieves the URL to the admin area for the network.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "path relative to the admin URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Admin URL link with optional path appended.",
        "rank": 0
    },
    "network_domain_check": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "network_domain_check",
        "summary": "Check for an existing network.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Base domain if network exists, otherwise false.",
        "rank": 0
    },
    "network_edit_site_nav": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "efct",
        "name": "network_edit_site_nav",
        "summary": "Outputs the HTML for a network's \"Edit Site\" tabular interface.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of Query parameters. <ul><li><b>'blog_id'<\/b><br\/><i>(int)<\/i> The site ID. Default is the current site.<\/li> <li><b>'links'<\/b><br\/><i>(array)<\/i> The tabs to include with (label|url|cap) keys.<\/li> <li><b>'selected'<\/b><br\/><i>(string)<\/i> The ID of the selected link.<\/li> <\/li><\/ul>",
                "type": null,
                "types": [],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "network_home_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "network_home_url",
        "summary": "Retrieves the home URL for the current network.",
        "description": "<p>Returns the home URL with the appropriate protocol, 'https' is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the home URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the home URL context. Accepts 'http', 'https', or 'relative'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Home URL link with optional path appended.",
        "rank": 0
    },
    "network_site_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "network_site_url",
        "summary": "Retrieves the site URL for the current network.",
        "description": "<p>Returns the site URL with the appropriate protocol, 'https' if is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the site URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the site URL context. Accepts 'http', 'https', or 'relative'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Site URL link with optional path appended.",
        "rank": 0
    },
    "network_step1": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "network_step1",
        "summary": "Prints step 1 for Network installation process.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "network_step2": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "network_step2",
        "summary": "Prints step 2 for Network installation process.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "newblog_notify_siteadmin": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "newblog_notify_siteadmin",
        "summary": "Notifies the network admin that a new site has been activated.",
        "description": "<p>Filter {@see 'newblog_notify_siteadmin'} to change the content of the notification email.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "The new site's object or ID.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "newuser_notify_siteadmin": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "newuser_notify_siteadmin",
        "summary": "Notifies the network admin that a new user has been activated.",
        "description": "<p>Filter {@see 'newuser_notify_siteadmin'} to change the content of the notification email.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "The new user's ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "next_comments_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "next_comments_link",
        "summary": "Displays the link to the next comments page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "label": {
                "label": "label",
                "description": "Label for link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "Max page. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "next_image_link": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "next_image_link",
        "summary": "Displays next image link that has the same post parent.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, an array of width and height values in pixels (in that order), 0, or 'none'. 0 or 'none' will default to 'post_title' or $text.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "next_post_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "next_post_link",
        "summary": "Displays the next post link that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "Link anchor format. Default '&laquo; %link'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%link &raquo;'",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Link permalink format. Default '%title'",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "next_post_rel_link": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "next_post_rel_link",
        "summary": "Displays the relational link for the next post adjacent to the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Link title format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "next_posts": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "next_posts",
        "summary": "Displays or retrieves the next posts page link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "Max pages. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo the link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The link URL for next posts page if <code>$echo = false<\/code>.",
        "rank": 0
    },
    "next_posts_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "next_posts_link",
        "summary": "Displays the next posts page link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "label": {
                "label": "label",
                "description": "Content for link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "max_page": {
                "label": "max_page",
                "description": "Max pages. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "next_widget_id_number": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "next_widget_id_number",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id_base": {
                "label": "id_base",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "normalize_whitespace": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "normalize_whitespace",
        "summary": "Normalize EOL characters and strip duplicate whitespace.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "The string to normalize.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The normalized string.",
        "rank": 0
    },
    "number_format_i18n": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "number_format_i18n",
        "summary": "Convert float number to format based on the locale.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "number": {
                "label": "number",
                "description": "The number to convert based on locale.",
                "type": "float",
                "types": [
                    "float"
                ],
                "default": null,
                "required": true
            },
            "decimals": {
                "label": "decimals",
                "description": "Precision of the number of decimal places. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted number in string format.",
        "rank": 0
    },
    "option_update_filter": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "option_update_filter",
        "summary": "Refreshes the value of the options whitelist available via the 'whitelist_options' hook.",
        "description": "<p>See the {@see 'whitelist_options'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "options": {
                "label": "options",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "page_attributes_meta_box": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "page_attributes_meta_box",
        "summary": "Display page attributes form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "page_template_dropdown": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "page_template_dropdown",
        "summary": "Print out option HTML elements for the page templates drop-down.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "default": {
                "label": "default",
                "description": "The template file name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type to get templates for. Default 'post'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'page'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "paginate_comments_links": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "paginate_comments_links",
        "summary": "Displays or retrieves pagination links for the comments on the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "args. See paginate_links().",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array",
            "void"
        ],
        "return_description": "Markup for comment page links or array of comment page links.",
        "rank": 0
    },
    "paginate_links": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "paginate_links",
        "summary": "Retrieve paginated link for archive post pages.",
        "description": "<p>Technically, the function can be used to create paginated link list for any area. The 'base' argument is used to reference the url, which will be used to create the paginated links. The 'format' argument is then used for replacing the page number. It is however, most likely and by default, to be used on the archive post pages.<\/p> <p>The 'type' argument controls format of the returned value. The default is 'plain', which is just a string with the links separated by a newline character. The other possible values are either 'array' or 'list'. The 'array' value will return an array of the paginated link list to offer full control of display. The 'list' value will place all of the paginated links in an unordered HTML list.<\/p> <p>The 'total' argument is the total amount of pages and is an integer. The 'current' argument is the current page number and is also an integer.<\/p> <p>An example of the 'base' argument is &quot;http:\/\/example.com\/all_posts.php%_%&quot; and the '%<em>%' is required. The '%<\/em>%' will be replaced by the contents of in the 'format' argument. An example for the 'format' argument is &quot;?page=%#%&quot; and the '%#%' is also required. The '%#%' will be replaced with the page number.<\/p> <p>You can include the previous and next links in the list by setting the 'prev_next' argument to true, which it is by default. You can set the previous text, by using the 'prev_text' argument. You can set the next text by setting the 'next_text' argument.<\/p> <p>If the 'show_all' argument is set to true, then it will show all of the pages instead of a short list of the pages near the current page. By default, the 'show_all' is set to false and controlled by the 'end_size' and 'mid_size' arguments. The 'end_size' argument is how many numbers on either the start and the end list edges, by default is 1. The 'mid_size' argument is how many numbers to either side of current page, but not including current page.<\/p> <p>It is possible to add query vars to the link by using the 'add_args' argument and see add_query_arg() for more information.<\/p> <p>The 'before_page_number' and 'after_page_number' arguments allow users to augment the links themselves. Typically this might be to add context to the numbered links so that screen reader users understand what the links are for. The text strings are added before and after the page number - within the anchor tag.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for generating paginated links for archives. <ul><li><b>'base'<\/b><br\/><i>(string)<\/i> Base of the paginated url. <\/li> <li><b>'format'<\/b><br\/><i>(string)<\/i> Format for the pagination structure. <\/li> <li><b>'total'<\/b><br\/><i>(int)<\/i> The total amount of pages. Default is the value WP_Query's max_num_pages or 1.<\/li> <li><b>'current'<\/b><br\/><i>(int)<\/i> The current page number. Default is 'paged' query var or 1.<\/li> <li><b>'aria_current'<\/b><br\/><i>(string)<\/i> The value for the aria-current attribute. Possible values are 'page', 'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.<\/li> <li><b>'show_all'<\/b><br\/><i>(bool)<\/i> Whether to show all pages. Default false.<\/li> <li><b>'end_size'<\/b><br\/><i>(int)<\/i> How many numbers on either the start and the end list edges. Default 1.<\/li> <li><b>'mid_size'<\/b><br\/><i>(int)<\/i> How many numbers to either side of the current pages. Default 2.<\/li> <li><b>'prev_next'<\/b><br\/><i>(bool)<\/i> Whether to include the previous and next links in the list. Default true.<\/li> <li><b>'prev_text'<\/b><br\/><i>(bool)<\/i> The previous page text. Default '&laquo; Previous'.<\/li> <li><b>'next_text'<\/b><br\/><i>(bool)<\/i> The next page text. Default 'Next &raquo;'.<\/li> <li><b>'type'<\/b><br\/><i>(string)<\/i> Controls format of the returned value. Possible values are 'plain', 'array' and 'list'. Default is 'plain'.<\/li> <li><b>'add_args'<\/b><br\/><i>(array)<\/i> An array of query args to add. Default false.<\/li> <li><b>'add_fragment'<\/b><br\/><i>(string)<\/i> A string to append to each link. <\/li> <li><b>'before_page_number'<\/b><br\/><i>(string)<\/i> A string to appear before the page number. <\/li> <li><b>'after_page_number'<\/b><br\/><i>(string)<\/i> A string to append after the page number. <\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array",
            "void"
        ],
        "return_description": "String of page links or array of page links.",
        "rank": 0
    },
    "parent_dropdown": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "parent_dropdown",
        "summary": "Print out option HTML elements for the page parents drop-down.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "default": {
                "label": "default",
                "description": "The default page ID to be pre-selected. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "parent": {
                "label": "parent",
                "description": "The parent page ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "level": {
                "label": "level",
                "description": "Page depth level. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "false"
        ],
        "return_description": "Boolean False if page has no children, otherwise print out html elements.",
        "rank": 0
    },
    "parse_blocks": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "parse_blocks",
        "summary": "Parses blocks out of a content string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Post content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of parsed block objects.",
        "rank": 0
    },
    "path_is_absolute": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "path_is_absolute",
        "summary": "Test if a given filesystem path is absolute.",
        "description": "<p>For example, '\/foo\/bar', or 'c:\\windows'.<\/p>",
        "inputs": {
            "path": {
                "label": "path",
                "description": "File path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if path is absolute, false is not absolute.",
        "rank": 0
    },
    "path_join": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "path_join",
        "summary": "Join two filesystem paths together.",
        "description": "<p>For example, 'give me $path relative to $base'. If the $path is absolute, then it the full path is returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "base": {
                "label": "base",
                "description": "Base path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "Path relative to $base.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The path with the base or absolute path.",
        "rank": 0
    },
    "permalink_anchor": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "permalink_anchor",
        "summary": "Displays the permalink anchor for the current post.",
        "description": "<p>The permalink mode title will use the post title for the 'a' element 'id' attribute. The id mode uses 'post-' with the post ID for the 'id' attribute.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mode": {
                "label": "mode",
                "description": "Permalink mode. Accepts 'title' or 'id'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'id'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "pingback": {
        "since": "0.71",
        "group": "Comment",
        "type": "efct",
        "name": "pingback",
        "summary": "Pings back the links found in a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Post content to check for links. If empty will retrieve from post.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "Post Object or ID.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "pingback_ping_source_uri": {
        "since": "3.5.1",
        "group": "Comment",
        "type": "efct",
        "name": "pingback_ping_source_uri",
        "summary": "Default filter attached to pingback_ping_source_uri to validate the pingback's Source URI",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "source_uri": {
                "label": "source_uri",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "pings_open": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "pings_open",
        "summary": "Determines whether the current post is open for pings.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if pings are accepted",
        "rank": 0
    },
    "plugin_basename": {
        "since": "1.5.0",
        "group": "Plugin",
        "type": "efct",
        "name": "plugin_basename",
        "summary": "Gets the basename of a plugin.",
        "description": "<p>This method extracts the name of a plugin from its filename.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The filename of plugin.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The name of a plugin.",
        "rank": 0
    },
    "plugin_dir_path": {
        "since": "2.8.0",
        "group": "Plugin",
        "type": "efct",
        "name": "plugin_dir_path",
        "summary": "Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The filename of the plugin (__FILE__).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "the filesystem path of the directory that contains the plugin.",
        "rank": 0
    },
    "plugin_dir_url": {
        "since": "2.8.0",
        "group": "Plugin",
        "type": "efct",
        "name": "plugin_dir_url",
        "summary": "Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The filename of the plugin (__FILE__).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "the URL path of the directory that contains the plugin.",
        "rank": 0
    },
    "plugin_sandbox_scrape": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "plugin_sandbox_scrape",
        "summary": "Load a given plugin attempt to generate errors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "plugins_api": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "plugins_api",
        "summary": "Retrieves plugin installer pages from the WordPress.org Plugins API.",
        "description": "<p>It is possible for a plugin to override the Plugin API result with three filters. Assume this is for plugins, which can extend on the Plugin Info to offer more choices. This is very powerful and must be used with care when overriding the filters.<\/p> <p>The first filter, {@see 'plugins_api_args'}, is for the args and gives the action as the second parameter. The hook for {@see 'plugins_api_args'} must ensure that an object is returned.<\/p> <p>The second filter, {@see 'plugins_api'}, allows a plugin to override the WordPress.org Plugin Installation API entirely. If $action is 'query_plugins' or 'plugin_information', an object MUST be passed. If $action is 'hot_tags' or 'hot_categories', an array MUST be passed.<\/p> <p>Finally, the third filter, {@see 'plugins_api_result'}, makes it possible to filter the response object or array, depending on the $action type.<\/p> <p>Supported arguments per action:<\/p> Argument Name query_plugins plugin_information hot_tags hot_categories $slug No Yes No No $per_page Yes No No No $page Yes No No No $number No No Yes Yes $search Yes No No No $tag Yes No No No $author Yes No No No $user Yes No No No $browse Yes No No No $locale Yes Yes No No $installed_plugins Yes No No No $is_ssl Yes Yes No No $fields Yes Yes No No ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "API action to perform: 'query_plugins', 'plugin_information', 'hot_tags' or 'hot_categories'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or object of arguments to serialize for the Plugin Info API. <ul><li><b>'slug'<\/b><br\/><i>(string)<\/i> The plugin slug. <\/li> <li><b>'per_page'<\/b><br\/><i>(int)<\/i> Number of plugins per page. Default 24.<\/li> <li><b>'page'<\/b><br\/><i>(int)<\/i> Number of current page. Default 1.<\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> Number of tags or categories to be queried.<\/li> <li><b>'search'<\/b><br\/><i>(string)<\/i> A search term. <\/li> <li><b>'tag'<\/b><br\/><i>(string)<\/i> Tag to filter plugins. <\/li> <li><b>'author'<\/b><br\/><i>(string)<\/i> Username of an plugin author to filter plugins. <\/li> <li><b>'user'<\/b><br\/><i>(string)<\/i> Username to query for their favorites. <\/li> <li><b>'browse'<\/b><br\/><i>(string)<\/i> Browse view: 'popular', 'new', 'beta', 'recommended'.<\/li> <li><b>'locale'<\/b><br\/><i>(string)<\/i> Locale to provide context-sensitive results. Default is the value of get_locale().<\/li> <li><b>'installed_plugins'<\/b><br\/><i>(string)<\/i> Installed plugins to provide context-sensitive results.<\/li> <li><b>'is_ssl'<\/b><br\/><i>(bool)<\/i> Whether links should be returned with https or not. Default false.<\/li> <li><b>'fields'<\/b><br\/><i>(array)<\/i> Array of fields which should or should not be returned.<ul> <li><b>'short_description'<\/b><br\/><i>(bool)<\/i> Whether to return the plugin short description. Default true.<\/li> <li><b>'description'<\/b><br\/><i>(bool)<\/i> Whether to return the plugin full description. Default false.<\/li> <li><b>'sections'<\/b><br\/><i>(bool)<\/i> Whether to return the plugin readme sections: description, installation, FAQ, screenshots, other notes, and changelog. Default false.<\/li> <li><b>'tested'<\/b><br\/><i>(bool)<\/i> Whether to return the 'Compatible up to' value. Default true.<\/li> <li><b>'requires'<\/b><br\/><i>(bool)<\/i> Whether to return the required WordPress version. Default true.<\/li> <li><b>'rating'<\/b><br\/><i>(bool)<\/i> Whether to return the rating in percent and total number of ratings. Default true.<\/li> <li><b>'ratings'<\/b><br\/><i>(bool)<\/i> Whether to return the number of rating for each star (1-5). Default true.<\/li> <li><b>'downloaded'<\/b><br\/><i>(bool)<\/i> Whether to return the download count. Default true.<\/li> <li><b>'downloadlink'<\/b><br\/><i>(bool)<\/i> Whether to return the download link for the package. Default true.<\/li> <li><b>'last_updated'<\/b><br\/><i>(bool)<\/i> Whether to return the date of the last update. Default true.<\/li> <li><b>'added'<\/b><br\/><i>(bool)<\/i> Whether to return the date when the plugin was added to the wordpress.org repository. Default true.<\/li> <li><b>'tags'<\/b><br\/><i>(bool)<\/i> Whether to return the assigned tags. Default true.<\/li> <li><b>'compatibility'<\/b><br\/><i>(bool)<\/i> Whether to return the WordPress compatibility list. Default true.<\/li> <li><b>'homepage'<\/b><br\/><i>(bool)<\/i> Whether to return the plugin homepage link. Default true.<\/li> <li><b>'versions'<\/b><br\/><i>(bool)<\/i> Whether to return the list of all available versions. Default false.<\/li> <li><b>'donate_link'<\/b><br\/><i>(bool)<\/i> Whether to return the donation link. Default true.<\/li> <li><b>'reviews'<\/b><br\/><i>(bool)<\/i> Whether to return the plugin reviews. Default false.<\/li> <li><b>'banners'<\/b><br\/><i>(bool)<\/i> Whether to return the banner images links. Default false.<\/li> <li><b>'icons'<\/b><br\/><i>(bool)<\/i> Whether to return the icon links. Default false.<\/li> <li><b>'active_installs'<\/b><br\/><i>(bool)<\/i> Whether to return the number of active installations. Default false.<\/li> <li><b>'group'<\/b><br\/><i>(bool)<\/i> Whether to return the assigned group. Default false.<\/li> <li><b>'contributors'<\/b><br\/><i>(bool)<\/i> Whether to return the list of contributors. Default false. <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array",
            "WP_Error"
        ],
        "return_description": "Response object or array on success, WP_Error on failure. See the         {@link <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/plugins_api\/\">https:\/\/developer.wordpress.org\/reference\/functions\/plugins_api\/<\/a> function reference article}         for more information on the make-up of possible return values depending on the value of <code>$action<\/code>.",
        "rank": 0
    },
    "plugins_url": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "plugins_url",
        "summary": "Retrieves a URL within the plugins or mu-plugins directory.",
        "description": "<p>Defaults to the plugins directory URL if no arguments are supplied.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Extra path appended to the end of the URL, including the relative directory if $plugin is supplied.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "plugin": {
                "label": "plugin",
                "description": "A full path to a file inside a plugin or mu-plugin. The URL will be relative to its directory. Typically this is done by passing __FILE__ as the argument.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Plugins URL link with optional paths appended.",
        "rank": 0
    },
    "populate_network": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "populate_network",
        "summary": "Populate network settings.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of network to populate.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The domain name for the network (eg. &quot;example.com&quot;).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "email": {
                "label": "email",
                "description": "Email address for the network administrator.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "site_name": {
                "label": "site_name",
                "description": "The name of the network.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "The path to append to the network's domain name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'\/'",
                "required": false
            },
            "subdomain_install": {
                "label": "subdomain_install",
                "description": "Whether the network is a subdomain installation or a subdirectory installation. Default false, meaning the network is a subdirectory installation.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, or WP_Error on warning (with the installation otherwise successful,                       so the error code must be checked) or failure.",
        "rank": 0
    },
    "populate_network_meta": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "populate_network_meta",
        "summary": "Creates WordPress network meta and sets the default values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "Network ID to populate meta for.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Custom meta $key =&gt; $value pairs to use.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "populate_options": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "populate_options",
        "summary": "Create WordPress options and set the default values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "options": {
                "label": "options",
                "description": "Custom option $key =&gt; $value pairs to use.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "populate_site_meta": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "populate_site_meta",
        "summary": "Creates WordPress site meta and sets the default values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID to populate meta for.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Custom meta $key =&gt; $value pairs to use.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_author_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_author_meta_box",
        "summary": "Display form field with list of authors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_categories_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_categories_meta_box",
        "summary": "Display post categories form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Categories meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(callable)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(array)<\/i> Extra meta box arguments.<ul> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy. Default 'category'. <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_class": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "post_class",
        "summary": "Displays the classes for the post container element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "One or more classes to add to the class list.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or post object. Defaults to the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_comment_meta_box": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_comment_meta_box",
        "summary": "Display comments for post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_comment_meta_box_thead": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_comment_meta_box_thead",
        "summary": "Display comments for post table header",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "result": {
                "label": "result",
                "description": "table header rows",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "post_comment_status_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_comment_status_meta_box",
        "summary": "Display comments status form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_comments_feed_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "efct",
        "name": "post_comments_feed_link",
        "summary": "Displays the comment feed link for a post.",
        "description": "<p>Prints out the comment feed link for a post. Link text is placed in the anchor. If no link text is specified, default text is used. If no post ID is specified, the current post is used.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link_text": {
                "label": "link_text",
                "description": "Descriptive link text. Default 'Comments Feed'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            },
            "feed": {
                "label": "feed",
                "description": "Feed format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_custom": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "post_custom",
        "summary": "Retrieve post custom meta data field.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "Meta data key name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string",
            "array"
        ],
        "return_description": "Array of values or single value, if only one element exists. False will be returned if key does not exist.",
        "rank": 0
    },
    "post_custom_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_custom_meta_box",
        "summary": "Display custom fields form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_excerpt_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_excerpt_meta_box",
        "summary": "Display post excerpt form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_exists": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "post_exists",
        "summary": "Determine if a post exists based on title, content, and date",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Post title",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "content": {
                "label": "content",
                "description": "post content",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "date": {
                "label": "date",
                "description": "post date",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Post ID if post exists, 0 otherwise.",
        "rank": 0
    },
    "post_format_meta_box": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_format_meta_box",
        "summary": "Display post format form elements.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Post formats meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(callable)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(array)<\/i> Extra meta box arguments.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_password_required": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "post_password_required",
        "summary": "Whether post requires password and correct password has been provided.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "An optional post. Global $post used if not provided.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "false if a password is not required or the correct password cookie is present, true otherwise.",
        "rank": 0
    },
    "post_preview": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "fct",
        "name": "post_preview",
        "summary": "Saves a draft or manually autosaves for the purpose of showing a post preview.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL to redirect to show the preview.",
        "rank": 0
    },
    "post_reply_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "post_reply_link",
        "summary": "Displays the HTML content for reply to post link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Override default options,",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object the comment is going to be displayed on. Default current post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool",
            "null"
        ],
        "return_description": "Link to show comment form, if successful. False, if comments are closed.",
        "rank": 0
    },
    "post_revisions_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_revisions_meta_box",
        "summary": "Display list of revisions.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_slug_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_slug_meta_box",
        "summary": "Display slug form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_submit_meta_box": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_submit_meta_box",
        "summary": "Displays post submit form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Current post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of arguments for building the post submit meta box. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(callable)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(array)<\/i> Extra meta box arguments.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_tags_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_tags_meta_box",
        "summary": "Display post tags form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Tags meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(callable)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(array)<\/i> Extra meta box arguments.<ul> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy. Default 'post_tag'. <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_thumbnail_meta_box": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_thumbnail_meta_box",
        "summary": "Display post thumbnail meta box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "A post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_trackback_meta_box": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "post_trackback_meta_box",
        "summary": "Display trackback links form fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "post_type_archive_title": {
        "since": "3.1.0",
        "group": "Template",
        "type": "efct",
        "name": "post_type_archive_title",
        "summary": "Display or retrieve title for a post type archive.",
        "description": "<p>This is optimized for archive.php and archive-{$post_type}.php template files for displaying the title of the post type.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving, null when displaying or failure.",
        "rank": 0
    },
    "post_type_exists": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "post_type_exists",
        "summary": "Determines whether a post type is registered.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether post type is registered.",
        "rank": 0
    },
    "post_type_supports": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "post_type_supports",
        "summary": "Check a post type's support for a given feature.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type being checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feature": {
                "label": "feature",
                "description": "The feature being checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post type supports the given feature.",
        "rank": 0
    },
    "postbox_classes": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "postbox_classes",
        "summary": "Returns the list of classes to be used by a meta box.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "posts_nav_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "posts_nav_link",
        "summary": "Displays the post pages link navigation for previous and next pages.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "Separator for posts navigation links.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "prelabel": {
                "label": "prelabel",
                "description": "Label for previous pages.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "nxtlabel": {
                "label": "nxtlabel",
                "description": "Label for next pages.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "prep_atom_text_construct": {
        "since": "2.5.0",
        "group": "Feed",
        "type": "efct",
        "name": "prep_atom_text_construct",
        "summary": "Determine the type of a string of data with the data formatted.",
        "description": "<p>Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1.<\/p> <p>In the case of WordPress, text is defined as containing no markup, xhtml is defined as &quot;well formed&quot;, and html as tag soup (i.e., the rest).<\/p> <p>Container div tags are added to xhtml values, per section 3.1.1.3.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Input string",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "array(type, value)",
        "rank": 0
    },
    "prepend_attachment": {
        "since": "2.0.0",
        "group": "Template",
        "type": "efct",
        "name": "prepend_attachment",
        "summary": "Wrap attachment in paragraph tag before content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "prev_post_rel_link": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "prev_post_rel_link",
        "summary": "Displays the relational link for the previous post adjacent to the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Link title format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs. Default true.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "previous_comments_link": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "previous_comments_link",
        "summary": "Displays the link to the previous comments page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "label": {
                "label": "label",
                "description": "Label for comments link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "previous_image_link": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "previous_image_link",
        "summary": "Displays previous image link that has the same post parent.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, an array of width and height values in pixels (in that order), 0, or 'none'. 0 or 'none' will default to 'post_title' or $text.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "previous_post_link": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "previous_post_link",
        "summary": "Displays the previous post link that is adjacent to the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "Link anchor format. Default '&laquo; %link'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'&laquo; %link'",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Link permalink format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'%title'",
                "required": false
            },
            "in_same_term": {
                "label": "in_same_term",
                "description": "Whether link should be in a same taxonomy term.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "excluded_terms": {
                "label": "excluded_terms",
                "description": "Array or comma-separated list of excluded term IDs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy, if $in_same_term is true.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'category'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "previous_posts": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "previous_posts",
        "summary": "Displays or retrieves the previous posts page link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo the link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The previous posts page link if <code>$echo = false<\/code>.",
        "rank": 0
    },
    "previous_posts_link": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "previous_posts_link",
        "summary": "Displays the previous posts page link.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "label": {
                "label": "label",
                "description": "Previous page link text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "print_admin_styles": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "print_admin_styles",
        "summary": "Prints the styles queue in the HTML head on admin pages.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "print_column_headers": {
        "since": "2.7.0",
        "group": "List_Table",
        "type": "efct",
        "name": "print_column_headers",
        "summary": "Prints column headers for a particular screen.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "screen": {
                "label": "screen",
                "description": "The screen hook name or screen object.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "with_id": {
                "label": "with_id",
                "description": "Whether to set the id attribute or not.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "print_footer_scripts": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "print_footer_scripts",
        "summary": "Prints the scripts that were queued for the footer or too late for the HTML head.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "print_head_scripts": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "print_head_scripts",
        "summary": "Prints the script queue in the HTML head on admin pages.",
        "description": "<p>Postpones the scripts that were queued for the footer. print_footer_scripts() is called in the footer to print these scripts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "print_late_styles": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "print_late_styles",
        "summary": "Prints the styles that were queued too late for the HTML head.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "privacy_ping_filter": {
        "since": "2.1.0",
        "group": "Comment",
        "type": "efct",
        "name": "privacy_ping_filter",
        "summary": "Check whether blog is public before returning sites.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sites": {
                "label": "sites",
                "description": "Will return if blog is public, will not return if not public.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Empty string if blog is not public, returns $sites, if site is public.",
        "rank": 0
    },
    "query_posts": {
        "since": "1.5.0",
        "group": "Query",
        "type": "efct",
        "name": "query_posts",
        "summary": "Sets up The Loop with query parameters.",
        "description": "<p>Note: This function will completely override the main query and isn't intended for use by plugins or themes. Its overly-simplistic approach to modifying the main query can be problematic and should be avoided wherever possible. In most cases, there are better, more performant options for modifying the main query such as via the {@see 'pre_get_posts'} action within WP_Query.<\/p> <p>This must not be used within the WordPress Loop.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "query": {
                "label": "query",
                "description": "Array or string of WP_Query arguments.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of post objects.",
        "rank": 0
    },
    "random_bytes": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "random_bytes",
        "summary": "Windows with PHP < 5.3.0 will not have the function openssl_random_pseudo_bytes() available, so let's use CAPICOM to work around this deficiency.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "bytes": {
                "label": "bytes",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "random_int": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "random_int",
        "summary": "Fetch a random integer between $min and $max inclusive",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "min": {
                "label": "min",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "max": {
                "label": "max",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "rawurlencode_deep": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "rawurlencode_deep",
        "summary": "Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The array or string to be encoded.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "$value The encoded value.",
        "rank": 0
    },
    "readonly": {
        "since": "4.9.0",
        "group": "Template",
        "type": "efct",
        "name": "readonly",
        "summary": "Outputs the html readonly attribute.",
        "description": "<p>Compares the first two arguments and if identical marks as readonly<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "readonly": {
                "label": "readonly",
                "description": "One of the values to compare",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "current": {
                "label": "current",
                "description": "(true) The other value to compare if not just true",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or just return the string",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "html attribute or empty string",
        "rank": 0
    },
    "recurse_dirsize": {
        "since": "4.3.0",
        "group": "Multisite",
        "type": "efct",
        "name": "recurse_dirsize",
        "summary": "Get the size of a directory recursively.",
        "description": "<p>Used by get_dirsize() to get a directory's size when it contains other directories.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "directory": {
                "label": "directory",
                "description": "Full path of a directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "exclude": {
                "label": "exclude",
                "description": "Full path of a subdirectory to exclude from the total.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Size in MB if a valid directory. False if not.",
        "rank": 0
    },
    "redirect_canonical": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "redirect_canonical",
        "summary": "Redirects incoming links to the proper URL based on the site url.",
        "description": "<p>Search engines consider www.somedomain.com and somedomain.com to be two different URLs when they both go to the same location. This SEO enhancement prevents penalty for duplicate content by redirecting all incoming links to one or the other.<\/p> <p>Prevents redirection for feeds, trackbacks, searches, and admin URLs. Does not redirect on non-pretty-permalink-supporting IIS 7+, page\/post previews, WP admin, Trackbacks, robots.txt, searches, or on POST requests.<\/p> <p>Will also attempt to find the correct link when a user enters a URL that does not exist based on exact WordPress query. Will instead try to parse the URL or query in an attempt to figure the correct page to go to.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "requested_url": {
                "label": "requested_url",
                "description": "The URL that was requested, used to figure if redirect is needed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "do_redirect": {
                "label": "do_redirect",
                "description": "Redirect to the new URL.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The string of the URL, if redirect needed.",
        "rank": 0
    },
    "redirect_guess_404_permalink": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "fct",
        "name": "redirect_guess_404_permalink",
        "summary": "Attempts to guess the correct URL based on query vars",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "The correct URL if one is found. False on failure.",
        "rank": 0
    },
    "redirect_post": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "redirect_post",
        "summary": "Redirect to previous page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "redirect_this_site": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "redirect_this_site",
        "summary": "Ensure that the current site's domain is listed in the allowed redirect host list.",
        "description": "",
        "inputs": {
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The current site's domain",
        "rank": 0
    },
    "refresh_blog_details": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "refresh_blog_details",
        "summary": "Clear the blog details cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "Blog ID. Defaults to current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "refresh_user_details": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "refresh_user_details",
        "summary": "Cleans the user cache for a specific user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The user ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int"
        ],
        "return_description": "The ID of the refreshed user or false if the user does not exist.",
        "rank": 0
    },
    "register_activation_hook": {
        "since": "2.0.0",
        "group": "Plugin",
        "type": "efct",
        "name": "register_activation_hook",
        "summary": "Set the activation hook for a plugin.",
        "description": "<p>When a plugin is activated, the action 'activate_PLUGINNAME' hook is called. In the name of this hook, PLUGINNAME is replaced with the name of the plugin, including the optional subdirectory. For example, when the plugin is located in wp-content\/plugins\/sampleplugin\/sample.php, then the name of this hook will become 'activate_sampleplugin\/sample.php'.<\/p> <p>When the plugin consists of only one file and is (as by default) located at wp-content\/plugins\/sample.php the name of this hook will be 'activate_sample.php'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The filename of the plugin including the path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function hooked to the 'activate_PLUGIN' action.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_and_do_post_meta_boxes": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "register_and_do_post_meta_boxes",
        "summary": "Registers the default post meta boxes, and runs the `do_meta_boxes` actions.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post object that these meta boxes are being generated for.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_block_type": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "register_block_type",
        "summary": "Registers a block type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Block type name including namespace, or alternatively a complete WP_Block_Type instance. In case a WP_Block_Type is provided, the $args parameter will be ignored.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of block type arguments. Any arguments may be defined, however the ones described below are supported by default. <ul><li><b>'render_callback'<\/b><br\/><i>(callable)<\/i> Callback used to render blocks of this block type.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Block_Type",
            "false"
        ],
        "return_description": "The registered block type on success, or false on failure.",
        "rank": 0
    },
    "register_column_headers": {
        "since": "2.7.0",
        "group": "List_Table",
        "type": "efct",
        "name": "register_column_headers",
        "summary": "Register column headers for a particular screen.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "screen": {
                "label": "screen",
                "description": "The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "columns": {
                "label": "columns",
                "description": "An array of columns with column IDs as the keys and translated column names as the values",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_deactivation_hook": {
        "since": "2.0.0",
        "group": "Plugin",
        "type": "efct",
        "name": "register_deactivation_hook",
        "summary": "Set the deactivation hook for a plugin.",
        "description": "<p>When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is called. In the name of this hook, PLUGINNAME is replaced with the name of the plugin, including the optional subdirectory. For example, when the plugin is located in wp-content\/plugins\/sampleplugin\/sample.php, then the name of this hook will become 'deactivate_sampleplugin\/sample.php'.<\/p> <p>When the plugin consists of only one file and is (as by default) located at wp-content\/plugins\/sample.php the name of this hook will be 'deactivate_sample.php'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The filename of the plugin including the path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function": {
                "label": "function",
                "description": "The function hooked to the 'deactivate_PLUGIN' action.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_default_headers": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "efct",
        "name": "register_default_headers",
        "summary": "Register a selection of default headers to be displayed by the custom header admin UI.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "headers": {
                "label": "headers",
                "description": "Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_importer": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "register_importer",
        "summary": "Register importer for WordPress.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Importer tag. Used to uniquely identify importer.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "Importer name and title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "description": {
                "label": "description",
                "description": "Importer description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "Callback to run.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_Error",
                "label": "WP_Error"
            }
        },
        "return": [
            "WP_Error"
        ],
        "return_description": "Returns WP_Error when $callback is WP_Error.",
        "rank": 0
    },
    "register_meta": {
        "since": "3.3.0",
        "group": "Meta",
        "type": "efct",
        "name": "register_meta",
        "summary": "Registers a meta key.",
        "description": "<p>It is recommended to register meta keys for a specific combination of object type and object subtype. If passing an object subtype is omitted, the meta key will be registered for the entire object type, however it can be partly overridden in case a more specific meta key of the same name exists for the same object type and a subtype.<\/p> <p>If an object type does not support any subtypes, such as users or comments, you should commonly call this function without passing a subtype.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "Type of object this meta is registered to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Meta key to register.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Data used to describe the meta key when registered. <ul><li><b>'object_subtype'<\/b><br\/><i>(string)<\/i> A subtype; e.g. if the object type is &quot;post&quot;, the post type. If left empty, the meta key will be registered on the entire object type. Default empty.<\/li> <li><b>'type'<\/b><br\/><i>(string)<\/i> The type of data associated with this meta key. Valid values are 'string', 'boolean', 'integer', and 'number'.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> A description of the data attached to this meta key.<\/li> <li><b>'single'<\/b><br\/><i>(bool)<\/i> Whether the meta key has one value per object, or an array of values per object.<\/li> <li><b>'sanitize_callback'<\/b><br\/><i>(string)<\/i> A function or method to call when sanitizing $meta_key data.<\/li> <li><b>'auth_callback'<\/b><br\/><i>(string)<\/i> Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.<\/li> <li><b>'show_in_rest'<\/b><br\/><i>(bool)<\/i> Whether data associated with this meta key can be considered public.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated. Use $args instead.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the meta key was successfully registered in the global array, false if not.                       Registering a meta key with distinct sanitize and auth callbacks will fire those                       callbacks, but will not add to the global registry.",
        "rank": 0
    },
    "register_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "register_nav_menu",
        "summary": "Registers a navigation menu location for a theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "Menu location identifier, like a slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "description": {
                "label": "description",
                "description": "Menu location descriptive text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_nav_menus": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "register_nav_menus",
        "summary": "Registers navigation menu locations for a theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "locations": {
                "label": "locations",
                "description": "Associative array of menu location identifiers (like a slug) and descriptive text.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_new_user": {
        "since": "2.5.0",
        "group": "Users",
        "type": "efct",
        "name": "register_new_user",
        "summary": "Handles registering a new user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_login": {
                "label": "user_login",
                "description": "User's username for logging in",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "User's email address to send password and add",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Either user's ID or error on failure.",
        "rank": 0
    },
    "register_post_meta": {
        "since": "4.9.8",
        "group": "Post",
        "type": "efct",
        "name": "register_post_meta",
        "summary": "Registers a meta key for posts.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type to register a meta key for. Pass an empty string to register the meta key across all existing post types.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key to register.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Data used to describe the meta key when registered. See register_meta() for a list of supported arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the meta key was successfully registered, false if not.",
        "rank": 0
    },
    "register_post_status": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "register_post_status",
        "summary": "Register a post status. Do not use before init.",
        "description": "<p>A simple function for creating or modifying a post status based on the parameters given. The function will accept an array (second optional parameter), along with a string for the post status name.<\/p> <p>Arguments prefixed with an _underscore shouldn't be used by plugins and themes.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_status": {
                "label": "post_status",
                "description": "Name of the post status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or string of post status arguments. <ul><li><b>'label'<\/b><br\/><i>(bool|string)<\/i> A descriptive name for the post status marked for translation. Defaults to value of $post_status.<\/li> <li><b>'label_count'<\/b><br\/><i>(bool|array)<\/i> Descriptive text to use for nooped plurals. Default array of $label, twice<\/li> <li><b>'exclude_from_search'<\/b><br\/><i>(bool)<\/i> Whether to exclude posts with this post status from search results. Default is value of $internal.<\/li> <li><b>'_builtin'<\/b><br\/><i>(bool)<\/i> Whether the status is built-in. Core-use only. Default false.<\/li> <li><b>'public'<\/b><br\/><i>(bool)<\/i> Whether posts of this status should be shown in the front end of the site. Default false.<\/li> <li><b>'internal'<\/b><br\/><i>(bool)<\/i> Whether the status is for internal use only. Default false.<\/li> <li><b>'protected'<\/b><br\/><i>(bool)<\/i> Whether posts with this status should be protected. Default false.<\/li> <li><b>'private'<\/b><br\/><i>(bool)<\/i> Whether posts with this status should be private. Default false.<\/li> <li><b>'publicly_queryable'<\/b><br\/><i>(bool)<\/i> Whether posts with this status should be publicly- queryable. Default is value of $public.<\/li> <li><b>'show_in_admin_all_list'<\/b><br\/><i>(bool)<\/i> Whether to include posts in the edit listing for their post type. Default is value of $internal.<\/li> <li><b>'show_in_admin_status_list'<\/b><br\/><i>(bool)<\/i> Show in the list of statuses with post counts at the top of the edit listings, e.g. All (12) | Published (9) | My Custom Status (2) Default is value of $internal.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "",
        "rank": 0
    },
    "register_post_type": {
        "since": "2.9.0",
        "group": "Post",
        "type": "efct",
        "name": "register_post_type",
        "summary": "Registers a post type.",
        "description": "<p>Note: Post type registrations should not be hooked before the {@see 'init'} action. Also, any taxonomy connections should be registered via the $taxonomies argument to ensure consistency when hooks such as {@see 'parse_query'} or {@see 'pre_get_posts'} are used.<\/p> <p>Post types can support any number of built-in core features such as meta boxes, custom fields, post thumbnails, post statuses, comments, and more. See the $supports argument for a complete list of supported features.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type key. Must not exceed 20 characters and may only contain lowercase alphanumeric characters, dashes, and underscores. See sanitize_key().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for registering a post type. <ul><li><b>'label'<\/b><br\/><i>(string)<\/i> Name of the post type shown in the menu. Usually plural. Default is value of $labels['name'].<\/li> <li><b>'labels'<\/b><br\/><i>(array)<\/i> An array of labels for this post type. If not set, post labels are inherited for non-hierarchical types and page labels for hierarchical ones. See get_post_type_labels() for a full list of supported labels.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> A short descriptive summary of what the post type is. <\/li> <li><b>'public'<\/b><br\/><i>(bool)<\/i> Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of $exclude_from_search, $publicly_queryable, $show_ui, and $show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. Default false.<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool)<\/i> Whether the post type is hierarchical (e.g. page). Default false.<\/li> <li><b>'exclude_from_search'<\/b><br\/><i>(bool)<\/i> Whether to exclude posts with this post type from front end search results. Default is the opposite value of $public.<\/li> <li><b>'publicly_queryable'<\/b><br\/><i>(bool)<\/i> Whether queries can be performed on the front end for the post type as part of parse_request(). Endpoints would include: <br\/> * ?post_type={post_type_key} <br\/> * ?{post_type_key}={single_post_slug} <br\/> * ?{post_type_query_var}={single_post_slug} If not set, the default is inherited from $public.<\/li> <li><b>'show_ui'<\/b><br\/><i>(bool)<\/i> Whether to generate and allow a UI for managing this post type in the admin. Default is value of $public.<\/li> <li><b>'show_in_menu'<\/b><br\/><i>(bool)<\/i> Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post type will be placed as a sub-menu of that. Default is value of $show_ui.<\/li> <li><b>'show_in_nav_menus'<\/b><br\/><i>(bool)<\/i> Makes this post type available for selection in navigation menus. Default is value $public.<\/li> <li><b>'show_in_admin_bar'<\/b><br\/><i>(bool)<\/i> Makes this post type available via the admin bar. Default is value of $show_in_menu.<\/li> <li><b>'show_in_rest'<\/b><br\/><i>(bool)<\/i> Whether to add the post type route in the REST API 'wp\/v2' namespace.<\/li> <li><b>'rest_base'<\/b><br\/><i>(string)<\/i> To change the base url of REST API route. Default is $post_type.<\/li> <li><b>'rest_controller_class'<\/b><br\/><i>(string)<\/i> REST API Controller class name. Default is 'WP_REST_Posts_Controller'.<\/li> <li><b>'menu_position'<\/b><br\/><i>(int)<\/i> The position in the menu order the post type should appear. To work, $show_in_menu must be true. Default null (at the bottom).<\/li> <li><b>'menu_icon'<\/b><br\/><i>(string)<\/i> The url to the icon to be used for this menu. Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme -- this should begin with 'data:image\/svg+xml;base64,'. Pass the name of a Dashicons helper class to use a font icon, e.g. 'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty so an icon can be added via CSS. Defaults to use the posts icon.<\/li> <li><b>'capability_type'<\/b><br\/><i>(string)<\/i> The string to use to build the read, edit, and delete capabilities. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array('story', 'stories'). Default 'post'.<\/li> <li><b>'capabilities'<\/b><br\/><i>(array)<\/i> Array of capabilities for this post type. $capability_type is used as a base to construct capabilities by default. See get_post_type_capabilities().<\/li> <li><b>'map_meta_cap'<\/b><br\/><i>(bool)<\/i> Whether to use the internal default meta capability handling. Default false.<\/li> <li><b>'supports'<\/b><br\/><i>(array)<\/i> Core feature(s) the post type supports. Serves as an alias for calling add_post_type_support() directly. Core features include 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'. Additionally, the 'revisions' feature dictates whether the post type will store revisions, and the 'comments' feature dictates whether the comments count will show on the edit screen. Defaults is an array containing 'title' and 'editor'.<\/li> <li><b>'register_meta_box_cb'<\/b><br\/><i>(callable)<\/i> Provide a callback function that sets up the meta boxes for the edit form. Do remove_meta_box() and add_meta_box() calls in the callback. Default null.<\/li> <li><b>'taxonomies'<\/b><br\/><i>(array)<\/i> An array of taxonomy identifiers that will be registered for the post type. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). <\/li> <li><b>'has_archive'<\/b><br\/><i>(bool|string)<\/i> Whether there should be post type archives, or if a string, the archive slug to use. Will generate the proper rewrite rules if $rewrite is enabled. Default false.<\/li> <li><b>'rewrite'<\/b><br\/><i>(bool|array)<\/i> Triggers the handling of rewrites for this post type. To prevent rewrite, set to false. Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be passed with any of these keys:<ul> <li><b>'slug'<\/b><br\/><i>(string)<\/i> Customize the permastruct slug. Defaults to $post_type key.<\/li> <li><b>'with_front'<\/b><br\/><i>(bool)<\/i> Whether the permastruct should be prepended with WP_Rewrite::$front. Default true.<\/li> <li><b>'feeds'<\/b><br\/><i>(bool)<\/i> Whether the feed permastruct should be built for this post type. Default is value of $has_archive.<\/li> <li><b>'pages'<\/b><br\/><i>(bool)<\/i> Whether the permastruct should provide for pagination. Default true.<\/li> <li><b>'ep_mask'<\/b><br\/><i>(const)<\/i> Endpoint mask to assign. If not specified and permalink_epmask is set, inherits from $permalink_epmask. If not specified and permalink_epmask is not set, defaults to EP_PERMALINK. <\/li><\/ul> <\/li> <li><b>'query_var'<\/b><br\/><i>(string|bool)<\/i> Sets the query_var key for this post type. Defaults to $post_type key. If false, a post type cannot be loaded at ?{query_var}={post_slug}. If specified as a string, the query ?{query_var_string}={post_slug} will be valid.<\/li> <li><b>'can_export'<\/b><br\/><i>(bool)<\/i> Whether to allow this post type to be exported. Default true.<\/li> <li><b>'delete_with_user'<\/b><br\/><i>(bool)<\/i> Whether to delete posts of this type when deleting a user. If true, posts of this type belonging to the user will be moved to trash when then user is deleted. If false, posts of this type belonging to the user will *not* be trashed or deleted. If not set (the default), posts are trashed if post_type_supports('author'). Otherwise posts are not trashed or deleted. Default null.<\/li> <li><b>'_builtin'<\/b><br\/><i>(bool)<\/i> FOR INTERNAL USE ONLY! True if this post type is a native or &quot;built-in&quot; post_type. Default false.<\/li> <li><b>'_edit_link'<\/b><br\/><i>(string)<\/i> FOR INTERNAL USE ONLY! URL segment to use for edit link of this post type. Default 'post.php?post=%d'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post_Type",
            "WP_Error"
        ],
        "return_description": "The registered post type object, or an error object.",
        "rank": 0
    },
    "register_rest_field": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "register_rest_field",
        "summary": "Registers a new field on an existing WordPress object type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "Object(s) the field is being registered to, &quot;post&quot;|&quot;term&quot;|&quot;comment&quot; etc.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attribute": {
                "label": "attribute",
                "description": "The attribute name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "An array of arguments used to handle the registered field. <ul><li><b>'get_callback'<\/b><br\/><i>(string|array|null)<\/i> Optional. The callback function used to retrieve the field value. Default is 'null', the field will not be returned in the response.<\/li> <li><b>'update_callback'<\/b><br\/><i>(string|array|null)<\/i> Optional. The callback function used to set and update the field value. Default is 'null', the value cannot be set or updated.<\/li> <li><b>'schema'<\/b><br\/><i>(string|array|null)<\/i> Optional. The callback function used to create the schema for this field. Default is 'null', no schema entry will be returned.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_rest_route": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "register_rest_route",
        "summary": "Registers a REST API route.",
        "description": "<p>Note: Do not use before the {@see 'rest_api_init'} hook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "namespace": {
                "label": "namespace",
                "description": "The first URL segment after core prefix. Should be unique to your package\/plugin.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "route": {
                "label": "route",
                "description": "The base URL for route you are adding.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Either an array of options for the endpoint, or an array of arrays for multiple methods.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "override": {
                "label": "override",
                "description": "If the route already exists, should we override it? True overrides, false merges (with newer overriding if duplicate keys exist).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on error.",
        "rank": 0
    },
    "register_setting": {
        "since": "2.7.0",
        "group": "Option",
        "type": "efct",
        "name": "register_setting",
        "summary": "Register a setting and its data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option_group": {
                "label": "option_group",
                "description": "A settings group name. Should correspond to a whitelisted option key name. Default whitelisted option key names include &quot;general,&quot; &quot;discussion,&quot; and &quot;reading,&quot; among others.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "The name of an option to sanitize and save.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Data used to describe the setting when registered. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> The type of data associated with this setting. Valid values are 'string', 'boolean', 'integer', and 'number'.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> A description of the data attached to this setting.<\/li> <li><b>'sanitize_callback'<\/b><br\/><i>(callable)<\/i> A callback function that sanitizes the option's value.<\/li> <li><b>'show_in_rest'<\/b><br\/><i>(bool)<\/i> Whether data associated with this setting should be included in the REST API.<\/li> <li><b>'default'<\/b><br\/><i>(mixed)<\/i> Default value when calling get_option().<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_sidebar": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "register_sidebar",
        "summary": "Builds the definition for a single sidebar and returns the ID.",
        "description": "<p>Accepts either a string or an array and then parses that against a set of default arguments for the new sidebar. WordPress will automatically generate a sidebar ID and name based on the current number of registered sidebars if those arguments are not included.<\/p> <p>When allowing for automatic generation of the name and ID parameters, keep in mind that the incrementor for your sidebar can change over time depending on what other plugins and themes are installed.<\/p> <p>If theme support for 'widgets' has not yet been added when this function is called, it will be automatically enabled through the use of add_theme_support()<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for the sidebar being registered. <ul><li><b>'name'<\/b><br\/><i>(string)<\/i> The name or title of the sidebar displayed in the Widgets interface. Default 'Sidebar $instance'.<\/li> <li><b>'id'<\/b><br\/><i>(string)<\/i> The unique identifier by which the sidebar will be called. Default 'sidebar-$instance'.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> Description of the sidebar, displayed in the Widgets interface. Default empty string.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> Extra CSS class to assign to the sidebar in the Widgets interface. <\/li> <li><b>'before_widget'<\/b><br\/><i>(string)<\/i> HTML content to prepend to each widget's HTML output when assigned to this sidebar. Default is an opening list item element.<\/li> <li><b>'after_widget'<\/b><br\/><i>(string)<\/i> HTML content to append to each widget's HTML output when assigned to this sidebar. Default is a closing list item element.<\/li> <li><b>'before_title'<\/b><br\/><i>(string)<\/i> HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element.<\/li> <li><b>'after_title'<\/b><br\/><i>(string)<\/i> HTML content to append to the sidebar title when displayed. Default is a closing h2 element.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sidebar ID added to $wp_registered_sidebars global.",
        "rank": 0
    },
    "register_sidebars": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "register_sidebars",
        "summary": "Creates multiple sidebars.",
        "description": "<p>If you wanted to quickly create multiple sidebars for a theme or internally. This function will allow you to do so. If you don't pass the 'name' and\/or 'id' in $args, then they will be built for you.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "number": {
                "label": "number",
                "description": "Number of sidebars to create.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for building a sidebar. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> The base string of the unique identifier for each sidebar. If provided, and multiple sidebars are being defined, the id will have &quot;-2&quot; appended, and so on. Default 'sidebar-' followed by the number the sidebar creation is currently at.<\/li> <li><b>'name'<\/b><br\/><i>(string)<\/i> The name or title for the sidebars displayed in the admin dashboard. If registering more than one sidebar, include '%d' in the string as a placeholder for the uniquely assigned number for each sidebar. Default 'Sidebar' for the first sidebar, otherwise 'Sidebar %d'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_taxonomy": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "register_taxonomy",
        "summary": "Creates or modifies a taxonomy object.",
        "description": "<p>Note: Do not use before the {@see 'init'} hook.<\/p> <p>A simple function for creating or modifying a taxonomy object based on the parameters given. If modifying an existing taxonomy object, note that the $object_type value from the original registration will be overwritten.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy key, must not exceed 32 characters.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "Object type or array of object types with which the taxonomy should be associated.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or query string of arguments for registering a taxonomy. <ul><li><b>'labels'<\/b><br\/><i>(array)<\/i> An array of labels for this taxonomy. By default, Tag labels are used for non-hierarchical taxonomies, and Category labels are used for hierarchical taxonomies. See accepted values in get_taxonomy_labels(). <\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> A short descriptive summary of what the taxonomy is for. <\/li> <li><b>'public'<\/b><br\/><i>(bool)<\/i> Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users. The default settings of $publicly_queryable, $show_ui, and $show_in_nav_menus are inherited from $public.<\/li> <li><b>'publicly_queryable'<\/b><br\/><i>(bool)<\/i> Whether the taxonomy is publicly queryable. If not set, the default is inherited from $public<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool)<\/i> Whether the taxonomy is hierarchical. Default false.<\/li> <li><b>'show_ui'<\/b><br\/><i>(bool)<\/i> Whether to generate and allow a UI for managing terms in this taxonomy in the admin. If not set, the default is inherited from $public (default true).<\/li> <li><b>'show_in_menu'<\/b><br\/><i>(bool)<\/i> Whether to show the taxonomy in the admin menu. If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown. $show_ui must be true. If not set, default is inherited from $show_ui (default true).<\/li> <li><b>'show_in_nav_menus'<\/b><br\/><i>(bool)<\/i> Makes this taxonomy available for selection in navigation menus. If not set, the default is inherited from $public (default true).<\/li> <li><b>'show_in_rest'<\/b><br\/><i>(bool)<\/i> Whether to include the taxonomy in the REST API.<\/li> <li><b>'rest_base'<\/b><br\/><i>(string)<\/i> To change the base url of REST API route. Default is $taxonomy.<\/li> <li><b>'rest_controller_class'<\/b><br\/><i>(string)<\/i> REST API Controller class name. Default is 'WP_REST_Terms_Controller'.<\/li> <li><b>'show_tagcloud'<\/b><br\/><i>(bool)<\/i> Whether to list the taxonomy in the Tag Cloud Widget controls. If not set, the default is inherited from $show_ui (default true).<\/li> <li><b>'show_in_quick_edit'<\/b><br\/><i>(bool)<\/i> Whether to show the taxonomy in the quick\/bulk edit panel. It not set, the default is inherited from $show_ui (default true).<\/li> <li><b>'show_admin_column'<\/b><br\/><i>(bool)<\/i> Whether to display a column for the taxonomy on its post type listing screens. Default false.<\/li> <li><b>'meta_box_cb'<\/b><br\/><i>(bool|callable)<\/i> Provide a callback function for the meta box display. If not set, post_categories_meta_box() is used for hierarchical taxonomies, and post_tags_meta_box() is used for non-hierarchical. If false, no meta box is shown.<\/li> <li><b>'meta_box_sanitize_cb'<\/b><br\/><i>(callable)<\/i> Callback function for sanitizing taxonomy data saved from a meta box. If no callback is defined, an appropriate one is determined based on the value of $meta_box_cb.<\/li> <li><b>'capabilities'<\/b><br\/><i>(array)<\/i> Array of capabilities for this taxonomy.<ul> <li><b>'manage_terms'<\/b><br\/><i>(string)<\/i> Default 'manage_categories'.<\/li> <li><b>'edit_terms'<\/b><br\/><i>(string)<\/i> Default 'manage_categories'.<\/li> <li><b>'delete_terms'<\/b><br\/><i>(string)<\/i> Default 'manage_categories'.<\/li> <li><b>'assign_terms'<\/b><br\/><i>(string)<\/i> Default 'edit_posts'. <\/li><\/ul> <\/li> <li><b>'rewrite'<\/b><br\/><i>(bool|array)<\/i> Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys:<ul> <li><b>'slug'<\/b><br\/><i>(string)<\/i> Customize the permastruct slug. Default $taxonomy key.<\/li> <li><b>'with_front'<\/b><br\/><i>(bool)<\/i> Should the permastruct be prepended with WP_Rewrite::$front. Default true.<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool)<\/i> Either hierarchical rewrite tag or not. Default false.<\/li> <li><b>'ep_mask'<\/b><br\/><i>(int)<\/i> Assign an endpoint mask. Default EP_NONE. <\/li><\/ul> <\/li> <li><b>'query_var'<\/b><br\/><i>(string)<\/i> Sets the query var key for this taxonomy. Default $taxonomy key. If false, a taxonomy cannot be loaded at ?{query_var}={term_slug}. If a string, the query ?{query_var}={term_slug} will be valid.<\/li> <li><b>'update_count_callback'<\/b><br\/><i>(callable)<\/i> Works much like a hook, in that it will be called when the count is updated. Default _update_post_term_count() for taxonomies attached to post types, which confirms that the objects are published before counting them. Default _update_generic_term_count() for taxonomies attached to other object types, such as users.<\/li> <li><b>'_builtin'<\/b><br\/><i>(bool)<\/i> This taxonomy is a &quot;built-in&quot; taxonomy. INTERNAL USE ONLY! Default false.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "void"
        ],
        "return_description": "WP_Error, if errors.",
        "rank": 0
    },
    "register_taxonomy_for_object_type": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "register_taxonomy_for_object_type",
        "summary": "Add an already registered taxonomy to an object type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Name of taxonomy object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "Name of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if successful, false if not.",
        "rank": 0
    },
    "register_term_meta": {
        "since": "4.9.8",
        "group": "Taxonomy",
        "type": "efct",
        "name": "register_term_meta",
        "summary": "Registers a meta key for terms.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy to register a meta key for. Pass an empty string to register the meta key across all existing taxonomies.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key to register.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Data used to describe the meta key when registered. See register_meta() for a list of supported arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the meta key was successfully registered, false if not.",
        "rank": 0
    },
    "register_theme_directory": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "efct",
        "name": "register_theme_directory",
        "summary": "Register a directory that contains themes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "directory": {
                "label": "directory",
                "description": "Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "register_uninstall_hook": {
        "since": "2.7.0",
        "group": "Plugin",
        "type": "efct",
        "name": "register_uninstall_hook",
        "summary": "Set the uninstallation hook for a plugin.",
        "description": "<p>Registers the uninstall hook that will be called when the user clicks on the uninstall link that calls for the plugin to uninstall itself. The link won't be active unless the plugin hooks into the action.<\/p> <p>The plugin should not run arbitrary code outside of functions, when registering the uninstall hook. In order to run using the hook, the plugin will have to be included, which means that any code laying outside of a function will be run during the uninstallation process. The plugin should not hinder the uninstallation process.<\/p> <p>If the plugin can not be written without running code within the plugin, then the plugin should create a file named 'uninstall.php' in the base plugin folder. This file will be called, if it exists, during the uninstallation process bypassing the uninstall hook. The plugin, when using the 'uninstall.php' should always check for the 'WP_UNINSTALL_PLUGIN' constant, before executing.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Plugin file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "The callback to run when the hook is called. Must be a static method or function.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "register_widget": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "register_widget",
        "summary": "Register a widget",
        "description": "<p>Registers a WP_Widget widget<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget": {
                "label": "widget",
                "description": "Either the name of a WP_Widget subclass or an instance of a WP_Widget subclass.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "registered_meta_key_exists": {
        "since": "4.6.0",
        "group": "Meta",
        "type": "efct",
        "name": "registered_meta_key_exists",
        "summary": "Checks if a meta key is registered.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "The type of object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_subtype": {
                "label": "object_subtype",
                "description": "The subtype of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the meta key is registered to the object type and, if provided,              the object subtype. False if not.",
        "rank": 0
    },
    "remove_accents": {
        "since": "1.2.1",
        "group": "WordPress",
        "type": "efct",
        "name": "remove_accents",
        "summary": "Converts all accent characters to ASCII characters.",
        "description": "<p>If there are no accent characters, then the string given is just returned.<\/p> <p><strong>Accent characters converted:<\/strong><\/p> <p>Currency signs:<\/p> Code Glyph Replacement Description U+00A3 \u00a3 (empty) British Pound sign U+20AC \u20ac E Euro sign <p>Decompositions for Latin-1 Supplement:<\/p> Code Glyph Replacement Description U+00AA \u00aa a Feminine ordinal indicator U+00BA \u00ba o Masculine ordinal indicator U+00C0 \u00c0 A Latin capital letter A with grave U+00C1 \u00c1 A Latin capital letter A with acute U+00C2 \u00c2 A Latin capital letter A with circumflex U+00C3 \u00c3 A Latin capital letter A with tilde U+00C4 \u00c4 A Latin capital letter A with diaeresis U+00C5 \u00c5 A Latin capital letter A with ring above U+00C6 \u00c6 AE Latin capital letter AE U+00C7 \u00c7 C Latin capital letter C with cedilla U+00C8 \u00c8 E Latin capital letter E with grave U+00C9 \u00c9 E Latin capital letter E with acute U+00CA \u00ca E Latin capital letter E with circumflex U+00CB \u00cb E Latin capital letter E with diaeresis U+00CC \u00cc I Latin capital letter I with grave U+00CD \u00cd I Latin capital letter I with acute U+00CE \u00ce I Latin capital letter I with circumflex U+00CF \u00cf I Latin capital letter I with diaeresis U+00D0 \u00d0 D Latin capital letter Eth U+00D1 \u00d1 N Latin capital letter N with tilde U+00D2 \u00d2 O Latin capital letter O with grave U+00D3 \u00d3 O Latin capital letter O with acute U+00D4 \u00d4 O Latin capital letter O with circumflex U+00D5 \u00d5 O Latin capital letter O with tilde U+00D6 \u00d6 O Latin capital letter O with diaeresis U+00D8 \u00d8 O Latin capital letter O with stroke U+00D9 \u00d9 U Latin capital letter U with grave U+00DA \u00da U Latin capital letter U with acute U+00DB \u00db U Latin capital letter U with circumflex U+00DC \u00dc U Latin capital letter U with diaeresis U+00DD \u00dd Y Latin capital letter Y with acute U+00DE \u00de TH Latin capital letter Thorn U+00DF \u00df s Latin small letter sharp s U+00E0 \u00e0 a Latin small letter a with grave U+00E1 \u00e1 a Latin small letter a with acute U+00E2 \u00e2 a Latin small letter a with circumflex U+00E3 \u00e3 a Latin small letter a with tilde U+00E4 \u00e4 a Latin small letter a with diaeresis U+00E5 \u00e5 a Latin small letter a with ring above U+00E6 \u00e6 ae Latin small letter ae U+00E7 \u00e7 c Latin small letter c with cedilla U+00E8 \u00e8 e Latin small letter e with grave U+00E9 \u00e9 e Latin small letter e with acute U+00EA \u00ea e Latin small letter e with circumflex U+00EB \u00eb e Latin small letter e with diaeresis U+00EC \u00ec i Latin small letter i with grave U+00ED \u00ed i Latin small letter i with acute U+00EE \u00ee i Latin small letter i with circumflex U+00EF \u00ef i Latin small letter i with diaeresis U+00F0 \u00f0 d Latin small letter Eth U+00F1 \u00f1 n Latin small letter n with tilde U+00F2 \u00f2 o Latin small letter o with grave U+00F3 \u00f3 o Latin small letter o with acute U+00F4 \u00f4 o Latin small letter o with circumflex U+00F5 \u00f5 o Latin small letter o with tilde U+00F6 \u00f6 o Latin small letter o with diaeresis U+00F8 \u00f8 o Latin small letter o with stroke U+00F9 \u00f9 u Latin small letter u with grave U+00FA \u00fa u Latin small letter u with acute U+00FB \u00fb u Latin small letter u with circumflex U+00FC \u00fc u Latin small letter u with diaeresis U+00FD \u00fd y Latin small letter y with acute U+00FE \u00fe th Latin small letter Thorn U+00FF \u00ff y Latin small letter y with diaeresis <p>Decompositions for Latin Extended-A:<\/p> Code Glyph Replacement Description U+0100 \u0100 A Latin capital letter A with macron U+0101 \u0101 a Latin small letter a with macron U+0102 \u0102 A Latin capital letter A with breve U+0103 \u0103 a Latin small letter a with breve U+0104 \u0104 A Latin capital letter A with ogonek U+0105 \u0105 a Latin small letter a with ogonek U+01006 \u0106 C Latin capital letter C with acute U+0107 \u0107 c Latin small letter c with acute U+0108 \u0108 C Latin capital letter C with circumflex U+0109 \u0109 c Latin small letter c with circumflex U+010A \u010a C Latin capital letter C with dot above U+010B \u010b c Latin small letter c with dot above U+010C \u010c C Latin capital letter C with caron U+010D \u010d c Latin small letter c with caron U+010E \u010e D Latin capital letter D with caron U+010F \u010f d Latin small letter d with caron U+0110 \u0110 D Latin capital letter D with stroke U+0111 \u0111 d Latin small letter d with stroke U+0112 \u0112 E Latin capital letter E with macron U+0113 \u0113 e Latin small letter e with macron U+0114 \u0114 E Latin capital letter E with breve U+0115 \u0115 e Latin small letter e with breve U+0116 \u0116 E Latin capital letter E with dot above U+0117 \u0117 e Latin small letter e with dot above U+0118 \u0118 E Latin capital letter E with ogonek U+0119 \u0119 e Latin small letter e with ogonek U+011A \u011a E Latin capital letter E with caron U+011B \u011b e Latin small letter e with caron U+011C \u011c G Latin capital letter G with circumflex U+011D \u011d g Latin small letter g with circumflex U+011E \u011e G Latin capital letter G with breve U+011F \u011f g Latin small letter g with breve U+0120 \u0120 G Latin capital letter G with dot above U+0121 \u0121 g Latin small letter g with dot above U+0122 \u0122 G Latin capital letter G with cedilla U+0123 \u0123 g Latin small letter g with cedilla U+0124 \u0124 H Latin capital letter H with circumflex U+0125 \u0125 h Latin small letter h with circumflex U+0126 \u0126 H Latin capital letter H with stroke U+0127 \u0127 h Latin small letter h with stroke U+0128 \u0128 I Latin capital letter I with tilde U+0129 \u0129 i Latin small letter i with tilde U+012A \u012a I Latin capital letter I with macron U+012B \u012b i Latin small letter i with macron U+012C \u012c I Latin capital letter I with breve U+012D \u012d i Latin small letter i with breve U+012E \u012e I Latin capital letter I with ogonek U+012F \u012f i Latin small letter i with ogonek U+0130 \u0130 I Latin capital letter I with dot above U+0131 \u0131 i Latin small letter dotless i U+0132 \u0132 IJ Latin capital ligature IJ U+0133 \u0133 ij Latin small ligature ij U+0134 \u0134 J Latin capital letter J with circumflex U+0135 \u0135 j Latin small letter j with circumflex U+0136 \u0136 K Latin capital letter K with cedilla U+0137 \u0137 k Latin small letter k with cedilla U+0138 \u0138 k Latin small letter Kra U+0139 \u0139 L Latin capital letter L with acute U+013A \u013a l Latin small letter l with acute U+013B \u013b L Latin capital letter L with cedilla U+013C \u013c l Latin small letter l with cedilla U+013D \u013d L Latin capital letter L with caron U+013E \u013e l Latin small letter l with caron U+013F \u013f L Latin capital letter L with middle dot U+0140 \u0140 l Latin small letter l with middle dot U+0141 \u0141 L Latin capital letter L with stroke U+0142 \u0142 l Latin small letter l with stroke U+0143 \u0143 N Latin capital letter N with acute U+0144 \u0144 n Latin small letter N with acute U+0145 \u0145 N Latin capital letter N with cedilla U+0146 \u0146 n Latin small letter n with cedilla U+0147 \u0147 N Latin capital letter N with caron U+0148 \u0148 n Latin small letter n with caron U+0149 \u0149 n Latin small letter n preceded by apostrophe U+014A \u014a N Latin capital letter Eng U+014B \u014b n Latin small letter Eng U+014C \u014c O Latin capital letter O with macron U+014D \u014d o Latin small letter o with macron U+014E \u014e O Latin capital letter O with breve U+014F \u014f o Latin small letter o with breve U+0150 \u0150 O Latin capital letter O with double acute U+0151 \u0151 o Latin small letter o with double acute U+0152 \u0152 OE Latin capital ligature OE U+0153 \u0153 oe Latin small ligature oe U+0154 \u0154 R Latin capital letter R with acute U+0155 \u0155 r Latin small letter r with acute U+0156 \u0156 R Latin capital letter R with cedilla U+0157 \u0157 r Latin small letter r with cedilla U+0158 \u0158 R Latin capital letter R with caron U+0159 \u0159 r Latin small letter r with caron U+015A \u015a S Latin capital letter S with acute U+015B \u015b s Latin small letter s with acute U+015C \u015c S Latin capital letter S with circumflex U+015D \u015d s Latin small letter s with circumflex U+015E \u015e S Latin capital letter S with cedilla U+015F \u015f s Latin small letter s with cedilla U+0160 \u0160 S Latin capital letter S with caron U+0161 \u0161 s Latin small letter s with caron U+0162 \u0162 T Latin capital letter T with cedilla U+0163 \u0163 t Latin small letter t with cedilla U+0164 \u0164 T Latin capital letter T with caron U+0165 \u0165 t Latin small letter t with caron U+0166 \u0166 T Latin capital letter T with stroke U+0167 \u0167 t Latin small letter t with stroke U+0168 \u0168 U Latin capital letter U with tilde U+0169 \u0169 u Latin small letter u with tilde U+016A \u016a U Latin capital letter U with macron U+016B \u016b u Latin small letter u with macron U+016C \u016c U Latin capital letter U with breve U+016D \u016d u Latin small letter u with breve U+016E \u016e U Latin capital letter U with ring above U+016F \u016f u Latin small letter u with ring above U+0170 \u0170 U Latin capital letter U with double acute U+0171 \u0171 u Latin small letter u with double acute U+0172 \u0172 U Latin capital letter U with ogonek U+0173 \u0173 u Latin small letter u with ogonek U+0174 \u0174 W Latin capital letter W with circumflex U+0175 \u0175 w Latin small letter w with circumflex U+0176 \u0176 Y Latin capital letter Y with circumflex U+0177 \u0177 y Latin small letter y with circumflex U+0178 \u0178 Y Latin capital letter Y with diaeresis U+0179 \u0179 Z Latin capital letter Z with acute U+017A \u017a z Latin small letter z with acute U+017B \u017b Z Latin capital letter Z with dot above U+017C \u017c z Latin small letter z with dot above U+017D \u017d Z Latin capital letter Z with caron U+017E \u017e z Latin small letter z with caron U+017F \u017f s Latin small letter long s U+01A0 \u01a0 O Latin capital letter O with horn U+01A1 \u01a1 o Latin small letter o with horn U+01AF \u01af U Latin capital letter U with horn U+01B0 \u01b0 u Latin small letter u with horn U+01CD \u01cd A Latin capital letter A with caron U+01CE \u01ce a Latin small letter a with caron U+01CF \u01cf I Latin capital letter I with caron U+01D0 \u01d0 i Latin small letter i with caron U+01D1 \u01d1 O Latin capital letter O with caron U+01D2 \u01d2 o Latin small letter o with caron U+01D3 \u01d3 U Latin capital letter U with caron U+01D4 \u01d4 u Latin small letter u with caron U+01D5 \u01d5 U Latin capital letter U with diaeresis and macron U+01D6 \u01d6 u Latin small letter u with diaeresis and macron U+01D7 \u01d7 U Latin capital letter U with diaeresis and acute U+01D8 \u01d8 u Latin small letter u with diaeresis and acute U+01D9 \u01d9 U Latin capital letter U with diaeresis and caron U+01DA \u01da u Latin small letter u with diaeresis and caron U+01DB \u01db U Latin capital letter U with diaeresis and grave U+01DC \u01dc u Latin small letter u with diaeresis and grave <p>Decompositions for Latin Extended-B:<\/p> Code Glyph Replacement Description U+0218 \u0218 S Latin capital letter S with comma below U+0219 \u0219 s Latin small letter s with comma below U+021A \u021a T Latin capital letter T with comma below U+021B \u021b t Latin small letter t with comma below <p>Vowels with diacritic (Chinese, Hanyu Pinyin):<\/p> Code Glyph Replacement Description U+0251 \u0251 a Latin small letter alpha U+1EA0 \u1ea0 A Latin capital letter A with dot below U+1EA1 \u1ea1 a Latin small letter a with dot below U+1EA2 \u1ea2 A Latin capital letter A with hook above U+1EA3 \u1ea3 a Latin small letter a with hook above U+1EA4 \u1ea4 A Latin capital letter A with circumflex and acute U+1EA5 \u1ea5 a Latin small letter a with circumflex and acute U+1EA6 \u1ea6 A Latin capital letter A with circumflex and grave U+1EA7 \u1ea7 a Latin small letter a with circumflex and grave U+1EA8 \u1ea8 A Latin capital letter A with circumflex and hook above U+1EA9 \u1ea9 a Latin small letter a with circumflex and hook above U+1EAA \u1eaa A Latin capital letter A with circumflex and tilde U+1EAB \u1eab a Latin small letter a with circumflex and tilde U+1EA6 \u1eac A Latin capital letter A with circumflex and dot below U+1EAD \u1ead a Latin small letter a with circumflex and dot below U+1EAE \u1eae A Latin capital letter A with breve and acute U+1EAF \u1eaf a Latin small letter a with breve and acute U+1EB0 \u1eb0 A Latin capital letter A with breve and grave U+1EB1 \u1eb1 a Latin small letter a with breve and grave U+1EB2 \u1eb2 A Latin capital letter A with breve and hook above U+1EB3 \u1eb3 a Latin small letter a with breve and hook above U+1EB4 \u1eb4 A Latin capital letter A with breve and tilde U+1EB5 \u1eb5 a Latin small letter a with breve and tilde U+1EB6 \u1eb6 A Latin capital letter A with breve and dot below U+1EB7 \u1eb7 a Latin small letter a with breve and dot below U+1EB8 \u1eb8 E Latin capital letter E with dot below U+1EB9 \u1eb9 e Latin small letter e with dot below U+1EBA \u1eba E Latin capital letter E with hook above U+1EBB \u1ebb e Latin small letter e with hook above U+1EBC \u1ebc E Latin capital letter E with tilde U+1EBD \u1ebd e Latin small letter e with tilde U+1EBE \u1ebe E Latin capital letter E with circumflex and acute U+1EBF \u1ebf e Latin small letter e with circumflex and acute U+1EC0 \u1ec0 E Latin capital letter E with circumflex and grave U+1EC1 \u1ec1 e Latin small letter e with circumflex and grave U+1EC2 \u1ec2 E Latin capital letter E with circumflex and hook above U+1EC3 \u1ec3 e Latin small letter e with circumflex and hook above U+1EC4 \u1ec4 E Latin capital letter E with circumflex and tilde U+1EC5 \u1ec5 e Latin small letter e with circumflex and tilde U+1EC6 \u1ec6 E Latin capital letter E with circumflex and dot below U+1EC7 \u1ec7 e Latin small letter e with circumflex and dot below U+1EC8 \u1ec8 I Latin capital letter I with hook above U+1EC9 \u1ec9 i Latin small letter i with hook above U+1ECA \u1eca I Latin capital letter I with dot below U+1ECB \u1ecb i Latin small letter i with dot below U+1ECC \u1ecc O Latin capital letter O with dot below U+1ECD \u1ecd o Latin small letter o with dot below U+1ECE \u1ece O Latin capital letter O with hook above U+1ECF \u1ecf o Latin small letter o with hook above U+1ED0 \u1ed0 O Latin capital letter O with circumflex and acute U+1ED1 \u1ed1 o Latin small letter o with circumflex and acute U+1ED2 \u1ed2 O Latin capital letter O with circumflex and grave U+1ED3 \u1ed3 o Latin small letter o with circumflex and grave U+1ED4 \u1ed4 O Latin capital letter O with circumflex and hook above U+1ED5 \u1ed5 o Latin small letter o with circumflex and hook above U+1ED6 \u1ed6 O Latin capital letter O with circumflex and tilde U+1ED7 \u1ed7 o Latin small letter o with circumflex and tilde U+1ED8 \u1ed8 O Latin capital letter O with circumflex and dot below U+1ED9 \u1ed9 o Latin small letter o with circumflex and dot below U+1EDA \u1eda O Latin capital letter O with horn and acute U+1EDB \u1edb o Latin small letter o with horn and acute U+1EDC \u1edc O Latin capital letter O with horn and grave U+1EDD \u1edd o Latin small letter o with horn and grave U+1EDE \u1ede O Latin capital letter O with horn and hook above U+1EDF \u1edf o Latin small letter o with horn and hook above U+1EE0 \u1ee0 O Latin capital letter O with horn and tilde U+1EE1 \u1ee1 o Latin small letter o with horn and tilde U+1EE2 \u1ee2 O Latin capital letter O with horn and dot below U+1EE3 \u1ee3 o Latin small letter o with horn and dot below U+1EE4 \u1ee4 U Latin capital letter U with dot below U+1EE5 \u1ee5 u Latin small letter u with dot below U+1EE6 \u1ee6 U Latin capital letter U with hook above U+1EE7 \u1ee7 u Latin small letter u with hook above U+1EE8 \u1ee8 U Latin capital letter U with horn and acute U+1EE9 \u1ee9 u Latin small letter u with horn and acute U+1EEA \u1eea U Latin capital letter U with horn and grave U+1EEB \u1eeb u Latin small letter u with horn and grave U+1EEC \u1eec U Latin capital letter U with horn and hook above U+1EED \u1eed u Latin small letter u with horn and hook above U+1EEE \u1eee U Latin capital letter U with horn and tilde U+1EEF \u1eef u Latin small letter u with horn and tilde U+1EF0 \u1ef0 U Latin capital letter U with horn and dot below U+1EF1 \u1ef1 u Latin small letter u with horn and dot below U+1EF2 \u1ef2 Y Latin capital letter Y with grave U+1EF3 \u1ef3 y Latin small letter y with grave U+1EF4 \u1ef4 Y Latin capital letter Y with dot below U+1EF5 \u1ef5 y Latin small letter y with dot below U+1EF6 \u1ef6 Y Latin capital letter Y with hook above U+1EF7 \u1ef7 y Latin small letter y with hook above U+1EF8 \u1ef8 Y Latin capital letter Y with tilde U+1EF9 \u1ef9 y Latin small letter y with tilde <p>German (de_DE), German formal (de_DE_formal), German (Switzerland) formal (de_CH), and German (Switzerland) informal (de_CH_informal) locales:<\/p> Code Glyph Replacement Description U+00C4 \u00c4 Ae Latin capital letter A with diaeresis U+00E4 \u00e4 ae Latin small letter a with diaeresis U+00D6 \u00d6 Oe Latin capital letter O with diaeresis U+00F6 \u00f6 oe Latin small letter o with diaeresis U+00DC \u00dc Ue Latin capital letter U with diaeresis U+00FC \u00fc ue Latin small letter u with diaeresis U+00DF \u00df ss Latin small letter sharp s <p>Danish (da_DK) locale:<\/p> Code Glyph Replacement Description U+00C6 \u00c6 Ae Latin capital letter AE U+00E6 \u00e6 ae Latin small letter ae U+00D8 \u00d8 Oe Latin capital letter O with stroke U+00F8 \u00f8 oe Latin small letter o with stroke U+00C5 \u00c5 Aa Latin capital letter A with ring above U+00E5 \u00e5 aa Latin small letter a with ring above <p>Catalan (ca) locale:<\/p> Code Glyph Replacement Description U+00B7 l\u00b7l ll Flown dot (between two Ls) <p>Serbian (sr_RS) and Bosnian (bs_BA) locales:<\/p> Code Glyph Replacement Description U+0110 \u0110 DJ Latin capital letter D with stroke U+0111 \u0111 dj Latin small letter d with stroke ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Text that might have accent characters",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered string with replaced &quot;nice&quot; characters.",
        "rank": 0
    },
    "remove_action": {
        "since": "1.2.0",
        "group": "Plugin",
        "type": "efct",
        "name": "remove_action",
        "summary": "Removes a function from a specified action hook.",
        "description": "<p>This function removes a function attached to a specified action hook. This method can be used to remove default functions attached to a specific filter hook and possibly replace them with a substitute.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The action hook to which the function to be removed is hooked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_remove": {
                "label": "function_to_remove",
                "description": "The name of the function which should be removed.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "The priority of the function.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the function is removed.",
        "rank": 0
    },
    "remove_all_actions": {
        "since": "2.7.0",
        "group": "Plugin",
        "type": "efct",
        "name": "remove_all_actions",
        "summary": "Remove all of the hooks from an action.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The action to remove hooks from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "The priority number to remove them from.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True when finished.",
        "rank": 0
    },
    "remove_all_filters": {
        "since": "2.7.0",
        "group": "Plugin",
        "type": "efct",
        "name": "remove_all_filters",
        "summary": "Remove all of the hooks from a filter.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The filter to remove hooks from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "The priority number to remove.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True when finished.",
        "rank": 0
    },
    "remove_editor_styles": {
        "since": "3.1.0",
        "group": "Theme",
        "type": "fct",
        "name": "remove_editor_styles",
        "summary": "Removes all visual editor stylesheets.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false if there were no stylesheets to remove.",
        "rank": 0
    },
    "remove_filter": {
        "since": "1.2.0",
        "group": "Plugin",
        "type": "efct",
        "name": "remove_filter",
        "summary": "Removes a function from a specified filter hook.",
        "description": "<p>This function removes a function attached to a specified filter hook. This method can be used to remove default functions attached to a specific filter hook and possibly replace them with a substitute.<\/p> <p>To remove a hook, the $function_to_remove and $priority arguments must match when the hook was added. This goes for both filters and actions. No warning will be given on removal failure.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "The filter hook to which the function to be removed is hooked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "function_to_remove": {
                "label": "function_to_remove",
                "description": "The name of the function which should be removed.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "The priority of the function.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the function existed before it was removed.",
        "rank": 0
    },
    "remove_image_size": {
        "since": "3.9.0",
        "group": "Media",
        "type": "efct",
        "name": "remove_image_size",
        "summary": "Remove a new image size.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The image size to remove.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the image size was successfully removed, false on failure.",
        "rank": 0
    },
    "remove_menu_page": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "remove_menu_page",
        "summary": "Remove a top-level admin menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug of the menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "The removed menu on success, false if not found.",
        "rank": 0
    },
    "remove_meta_box": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "remove_meta_box",
        "summary": "Removes a meta box from one or more screens.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Meta box ID (used in the 'id' attribute for the meta box).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "screen": {
                "label": "screen",
                "description": "The screen or screens on which the meta box is shown (such as a post type, 'link', or 'comment'). Accepts a single screen ID, WP_Screen object, or array of screen IDs.",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The context within the screen where the box is set to display. Contexts vary from screen to screen. Post edit screen contexts include 'normal', 'side', and 'advanced'. Comments screen contexts include 'normal' and 'side'. Menus meta boxes (accordion sections) all use the 'side' context.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_option_whitelist": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "remove_option_whitelist",
        "summary": "Removes a list of options from the options whitelist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "del_options": {
                "label": "del_options",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "remove_permastruct": {
        "since": "4.5.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "remove_permastruct",
        "summary": "Removes a permalink structure.",
        "description": "<p>Can only be used to remove permastructs that were added using add_permastruct(). Built-in permastructs cannot be removed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Name for permalink structure.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_post_type_support": {
        "since": "3.0.0",
        "group": "Post",
        "type": "efct",
        "name": "remove_post_type_support",
        "summary": "Remove support for a feature from a post type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type for which to remove the feature.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feature": {
                "label": "feature",
                "description": "The feature being removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_query_arg": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "remove_query_arg",
        "summary": "Removes an item or items from a query string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "Query key or keys to remove.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "query": {
                "label": "query",
                "description": "When false uses the current URL.",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "New URL query string.",
        "rank": 0
    },
    "remove_rewrite_tag": {
        "since": "4.5.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "remove_rewrite_tag",
        "summary": "Removes an existing rewrite tag (like %postname%).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Name of the rewrite tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_role": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "remove_role",
        "summary": "Remove role, if it exists.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "role": {
                "label": "role",
                "description": "Role name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_shortcode": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "remove_shortcode",
        "summary": "Removes hook for shortcode.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Shortcode tag to remove hook for.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_submenu_page": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "remove_submenu_page",
        "summary": "Remove an admin submenu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_slug": {
                "label": "menu_slug",
                "description": "The slug for the parent menu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "submenu_slug": {
                "label": "submenu_slug",
                "description": "The slug of the submenu.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "The removed submenu on success, false if not found.",
        "rank": 0
    },
    "remove_theme_mod": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "efct",
        "name": "remove_theme_mod",
        "summary": "Remove theme modification name from current theme list.",
        "description": "<p>If removing the name also removes all elements, then the entire option will be removed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Theme modification name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "remove_theme_support": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "efct",
        "name": "remove_theme_support",
        "summary": "Allows a theme to de-register its support of a certain feature",
        "description": "<p>Should be called in the theme's functions.php file. Generally would be used for child themes to override support from the parent theme.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feature": {
                "label": "feature",
                "description": "the feature being added",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "void"
        ],
        "return_description": "Whether feature was removed.",
        "rank": 0
    },
    "remove_user_from_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "remove_user_from_blog",
        "summary": "Remove a user from a blog.",
        "description": "<p>Use the {@see 'remove_user_from_blog'} action to fire an event when users are removed from a blog.<\/p> <p>Accepts an optional $reassign parameter, if you want to reassign the user's blog posts to another user upon removal.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "ID of the user you're removing.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog you're removing the user from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            },
            "reassign": {
                "label": "reassign",
                "description": "A user to whom to reassign posts.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "render_block": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "render_block",
        "summary": "Renders a single block into a HTML string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "block": {
                "label": "block",
                "description": "A single parsed block object.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String of rendered HTML.",
        "rank": 0
    },
    "render_block_core_archives": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_archives",
        "summary": "Renders the `core\/archives` block on server.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the post content with archives added.",
        "rank": 0
    },
    "render_block_core_block": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_block",
        "summary": "Renders the `core\/block` block on server.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Rendered HTML of the referenced block.",
        "rank": 0
    },
    "render_block_core_categories": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_categories",
        "summary": "Renders the `core\/categories` block on server.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the categories list\/dropdown markup.",
        "rank": 0
    },
    "render_block_core_latest_comments": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_latest_comments",
        "summary": "Renders the `core\/latest-comments` block on server.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the post content with latest comments added.",
        "rank": 0
    },
    "render_block_core_latest_posts": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_latest_posts",
        "summary": "Renders the `core\/latest-posts` block on server.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the post content with latest posts added.",
        "rank": 0
    },
    "render_block_core_shortcode": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "render_block_core_shortcode",
        "summary": "Performs wpautop() on the shortcode block content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attributes": {
                "label": "attributes",
                "description": "The block attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "content": {
                "label": "content",
                "description": "The block content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Returns the block content.",
        "rank": 0
    },
    "request_filesystem_credentials": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "request_filesystem_credentials",
        "summary": "Displays a form to the user to request for their FTP\/SSH details in order to connect to the filesystem.",
        "description": "<p>All chosen\/entered details are saved, excluding the password.<\/p> <p>Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467) to specify an alternate FTP\/SSH port.<\/p> <p>Plugins may override this form by returning true|false via the {@see 'request_filesystem_credentials'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "form_post": {
                "label": "form_post",
                "description": "The URL to post the form to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "type": {
                "label": "type",
                "description": "Chosen type of filesystem.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "error": {
                "label": "error",
                "description": "Whether the current request has failed to connect.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Full path to the directory that is tested for being writable.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "extra_fields": {
                "label": "extra_fields",
                "description": "Extra POST fields to be checked for inclusion in the post.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            },
            "allow_relaxed_file_ownership": {
                "label": "allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "require_if_theme_supports": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "efct",
        "name": "require_if_theme_supports",
        "summary": "Checks a theme's support for a given feature before loading the functions which implement it.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feature": {
                "label": "feature",
                "description": "The feature being checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "include": {
                "label": "include",
                "description": "Path to the file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the current theme supports the supplied feature, false otherwise.",
        "rank": 0
    },
    "reset_password": {
        "since": "2.5.0",
        "group": "Users",
        "type": "efct",
        "name": "reset_password",
        "summary": "Handles resetting the user's password.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "The user",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "new_pass": {
                "label": "new_pass",
                "description": "New password for the user in plaintext",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "rest_authorization_required_code": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_authorization_required_code",
        "summary": "Returns a contextual HTTP error code for authorization failure.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "401 if the user is not logged in, 403 if the user is logged in.",
        "rank": 0
    },
    "rest_cookie_check_errors": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_cookie_check_errors",
        "summary": "Checks for errors when using cookie-based authentication.",
        "description": "<p>WordPress' built-in cookie authentication is always active for logged in users. However, the API has to check nonces for each request to ensure users are not vulnerable to CSRF.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "result": {
                "label": "result",
                "description": "Error from another authentication handler, null if we should handle it, or another value if not.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "mixed",
            "bool"
        ],
        "return_description": "WP_Error if the cookie is invalid, the $result, otherwise true.",
        "rank": 0
    },
    "rest_do_request": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_do_request",
        "summary": "Do a REST request.",
        "description": "<p>Used primarily to route internal requests through WP_REST_Server.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request": {
                "label": "request",
                "description": "Request.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_REST_Response",
                "label": "WP_REST_Response"
            }
        },
        "return": [
            "WP_REST_Response"
        ],
        "return_description": "REST response.",
        "rank": 0
    },
    "rest_ensure_request": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_ensure_request",
        "summary": "Ensures request arguments are a request object (for consistency).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request": {
                "label": "request",
                "description": "Request to check.",
                "type": "array",
                "types": [
                    "array",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_REST_Request",
                "label": "WP_REST_Request"
            }
        },
        "return": [
            "WP_REST_Request"
        ],
        "return_description": "REST request instance.",
        "rank": 0
    },
    "rest_ensure_response": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_ensure_response",
        "summary": "Ensures a REST response is a response object (for consistency).",
        "description": "<p>This implements WP_HTTP_Response, allowing usage of set_status\/header\/etc without needing to double-check the object. Will also allow WP_Error to indicate error responses, so users should immediately check for this value.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "Response to check.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_REST_Response",
            "mixed"
        ],
        "return_description": "If response generated an error, WP_Error, if response                                is already an instance, WP_HTTP_Response, otherwise                                returns a new WP_REST_Response instance.",
        "rank": 0
    },
    "rest_filter_response_fields": {
        "since": "4.8.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_filter_response_fields",
        "summary": "Filter the API response to include only a white-listed set of response object fields.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "Current response being served.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "server": {
                "label": "server",
                "description": "ResponseHandler instance (usually WP_REST_Server).",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "The request that was used to make current response.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_REST_Response",
                "label": "WP_REST_Response"
            }
        },
        "return": [
            "WP_REST_Response"
        ],
        "return_description": "Response to be served, trimmed down to contain a subset of fields.",
        "rank": 0
    },
    "rest_get_avatar_sizes": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_get_avatar_sizes",
        "summary": "Retrieves the pixel sizes for avatars.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of pixel sizes for avatars. Default <code>[ 24, 48, 96 ]<\/code>.",
        "rank": 0
    },
    "rest_get_avatar_urls": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_get_avatar_urls",
        "summary": "Retrieves the avatar urls in various sizes based on a given email address.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email": {
                "label": "email",
                "description": "Email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$urls Gravatar url for each size.",
        "rank": 0
    },
    "rest_get_date_with_gmt": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_get_date_with_gmt",
        "summary": "Parses a date into both its local and UTC equivalent, in MySQL datetime format.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "date": {
                "label": "date",
                "description": "RFC3339 timestamp.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "is_utc": {
                "label": "is_utc",
                "description": "Whether the provided date should be interpreted as UTC.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "null"
        ],
        "return_description": "Local and UTC datetime strings, in MySQL datetime format (Y-m-d H:i:s),                    null on failure.",
        "rank": 0
    },
    "rest_get_server": {
        "since": "4.5.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_get_server",
        "summary": "Retrieves the current REST server instance.",
        "description": "<p>Instantiates a new instance if none exists already.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_REST_Server",
                "label": "WP_REST_Server"
            }
        },
        "return": [
            "WP_REST_Server"
        ],
        "return_description": "REST server instance.",
        "rank": 0
    },
    "rest_get_url_prefix": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_get_url_prefix",
        "summary": "Retrieves the URL prefix for any API resource.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Prefix.",
        "rank": 0
    },
    "rest_handle_deprecated_argument": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_handle_deprecated_argument",
        "summary": "Handles _deprecated_argument() errors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "function": {
                "label": "function",
                "description": "The function that was called.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "message": {
                "label": "message",
                "description": "A message regarding the change.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "version": {
                "label": "version",
                "description": "Version.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "rest_handle_deprecated_function": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_handle_deprecated_function",
        "summary": "Handles _deprecated_function() errors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "function": {
                "label": "function",
                "description": "The function that was called.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "replacement": {
                "label": "replacement",
                "description": "The function that should have been called.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "version": {
                "label": "version",
                "description": "Version.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "rest_handle_options_request": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_handle_options_request",
        "summary": "Handles OPTIONS requests for the server.",
        "description": "<p>This is handled outside of the server code, as it doesn't obey normal route mapping.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "Current response, either response or null to indicate pass-through.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "handler": {
                "label": "handler",
                "description": "ResponseHandler instance (usually WP_REST_Server).",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "The request that was used to make current response.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_REST_Response",
                "label": "WP_REST_Response"
            }
        },
        "return": [
            "WP_REST_Response"
        ],
        "return_description": "Modified response, either response or <code>null<\/code> to indicate pass-through.",
        "rank": 0
    },
    "rest_is_boolean": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_is_boolean",
        "summary": "Determines if a given value is boolean-like.",
        "description": "",
        "inputs": {
            "maybe_bool": {
                "label": "maybe_bool",
                "description": "The value being evaluated.",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if a boolean, otherwise false.",
        "rank": 0
    },
    "rest_is_ip_address": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "fct",
        "name": "rest_is_ip_address",
        "summary": "Determines if an IP address is valid.",
        "description": "<p>Handles both IPv4 and IPv6 addresses.<\/p>",
        "inputs": {
            "ip": {
                "label": "ip",
                "description": "IP address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The valid IP address, otherwise false.",
        "rank": 0
    },
    "rest_parse_date": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_parse_date",
        "summary": "Parses an RFC3339 time into a Unix timestamp.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "date": {
                "label": "date",
                "description": "RFC3339 timestamp.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "force_utc": {
                "label": "force_utc",
                "description": "Whether to force UTC timezone instead of using the timestamp's timezone.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Unix timestamp.",
        "rank": 0
    },
    "rest_parse_request_arg": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_parse_request_arg",
        "summary": "Parse a request argument based on details registered to the route.",
        "description": "<p>Runs a validation check and sanitizes the value, primarily to be used via the sanitize_callback arguments in the endpoint args registration.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "param": {
                "label": "param",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "rest_preload_api_request": {
        "since": "5.0.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_preload_api_request",
        "summary": "Append result of internal request to REST API for purpose of preloading data to be attached to a page.",
        "description": "<p>Expected to be called in the context of array_reduce.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "memo": {
                "label": "memo",
                "description": "Reduce accumulator.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "REST API path to preload.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Modified reduce accumulator.",
        "rank": 0
    },
    "rest_sanitize_boolean": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_sanitize_boolean",
        "summary": "Changes a boolean-like value into the proper boolean value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The value being evaluated.",
                "type": "bool",
                "types": [
                    "bool",
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Returns the proper associated boolean value.",
        "rank": 0
    },
    "rest_sanitize_request_arg": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_sanitize_request_arg",
        "summary": "Sanitize a request argument based on details registered to the route.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "param": {
                "label": "param",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "rest_sanitize_value_from_schema": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_sanitize_value_from_schema",
        "summary": "Sanitize a value based on a schema.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The value to sanitize.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Schema array to use for sanitization.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "rest_send_allow_header": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_send_allow_header",
        "summary": "Sends the \"Allow\" header to state all methods that can be sent to the current route.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "Current response being served.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "server": {
                "label": "server",
                "description": "ResponseHandler instance (usually WP_REST_Server).",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "The request that was used to make current response.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_REST_Response",
                "label": "WP_REST_Response"
            }
        },
        "return": [
            "WP_REST_Response"
        ],
        "return_description": "Response to be served, with &quot;Allow&quot; header if route has allowed methods.",
        "rank": 0
    },
    "rest_send_cors_headers": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_send_cors_headers",
        "summary": "Sends Cross-Origin Resource Sharing headers with API requests.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "Response data.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Response data.",
        "rank": 0
    },
    "rest_url": {
        "since": "4.4.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_url",
        "summary": "Retrieves the URL to a REST endpoint.",
        "description": "<p>Note: The returned URL is NOT escaped.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "REST route.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Sanitization scheme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'json'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Full URL to the endpoint.",
        "rank": 0
    },
    "rest_validate_request_arg": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_validate_request_arg",
        "summary": "Validate a request argument based on details registered to the route.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "request": {
                "label": "request",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "param": {
                "label": "param",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "rest_validate_value_from_schema": {
        "since": "4.7.0",
        "group": "REST_API",
        "type": "efct",
        "name": "rest_validate_value_from_schema",
        "summary": "Validate a value based on a schema.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The value to validate.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Schema array to use for validation.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "param": {
                "label": "param",
                "description": "The parameter name, used in error messages.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "restore_current_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "restore_current_blog",
        "summary": "Restore the current blog, after calling switch_to_blog()",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false if we're already on the current blog",
        "rank": 0
    },
    "restore_current_locale": {
        "since": "4.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "restore_current_locale",
        "summary": "Restores the translations according to the original locale.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Locale on success, false on error.",
        "rank": 0
    },
    "restore_previous_locale": {
        "since": "4.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "restore_previous_locale",
        "summary": "Restores the translations according to the previous locale.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Locale on success, false on error.",
        "rank": 0
    },
    "retrieve_password": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "retrieve_password",
        "summary": "Handles sending password retrieval email to user.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True: when finish. WP_Error on error",
        "rank": 0
    },
    "retrieve_widgets": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "retrieve_widgets",
        "summary": "Look for \"lost\" widgets, this has to run at least on each theme change.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "theme_changed": {
                "label": "theme_changed",
                "description": "Whether the theme was changed as a boolean. A value of 'customize' defers updates for the Customizer.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Updated sidebars widgets.",
        "rank": 0
    },
    "revoke_super_admin": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "revoke_super_admin",
        "summary": "Revokes Super Admin privileges.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "ID of the user Super Admin privileges to be revoked from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure. This can fail when the user's email              is the network admin email or when the <code>$super_admins<\/code> global is defined.",
        "rank": 0
    },
    "safecss_filter_attr": {
        "since": "2.8.1",
        "group": "External",
        "type": "efct",
        "name": "safecss_filter_attr",
        "summary": "Filters an inline style attribute and removes disallowed rules.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "css": {
                "label": "css",
                "description": "A string of CSS rules.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered string of CSS rules.",
        "rank": 0
    },
    "sanitize_bookmark": {
        "since": "2.3.0",
        "group": "Bookmark",
        "type": "efct",
        "name": "sanitize_bookmark",
        "summary": "Sanitizes all bookmark fields",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "bookmark": {
                "label": "bookmark",
                "description": "Bookmark row",
                "type": "mixed",
                "types": [
                    "mixed",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "How to filter the fields",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "stdClass",
            "array"
        ],
        "return_description": "Same type as $bookmark but with fields sanitized.",
        "rank": 0
    },
    "sanitize_bookmark_field": {
        "since": "2.3.0",
        "group": "Bookmark",
        "type": "efct",
        "name": "sanitize_bookmark_field",
        "summary": "Sanitizes a bookmark field.",
        "description": "<p>Sanitizes the bookmark fields based on what the field name is. If the field has a strict value set, then it will be tested for that, else a more generic filtering is applied. After the more strict filter is applied, if the $context is 'raw' then the value is immediately return.<\/p> <p>Hooks exist for the more generic cases. With the 'edit' context, the {@see 'edit_$field'} filter will be called and passed the $value and $bookmark_id respectively.<\/p> <p>With the 'db' context, the {@see 'pre_$field'} filter is called and passed the value. The 'display' context is the final context and has the $field has the filter name and is passed the $value, $bookmark_id, and $context, respectively.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "The bookmark field.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The bookmark field value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "bookmark_id": {
                "label": "bookmark_id",
                "description": "Bookmark ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "How to filter the field value. Accepts 'raw', 'edit', 'attribute', 'js', 'db', or 'display'",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The filtered value.",
        "rank": 0
    },
    "sanitize_category": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "sanitize_category",
        "summary": "Sanitizes category data based on context.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "category": {
                "label": "category",
                "description": "Category data",
                "type": "object",
                "types": [
                    "object",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Default is 'display'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array"
        ],
        "return_description": "Same type as $category with sanitized data for safe use.",
        "rank": 0
    },
    "sanitize_category_field": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "sanitize_category_field",
        "summary": "Sanitizes data in single category key field.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "Category key to sanitize",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Category value to sanitize",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "cat_id": {
                "label": "cat_id",
                "description": "Category ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "What filter to use, 'raw', 'display', etc.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Same type as $value after $value has been sanitized.",
        "rank": 0
    },
    "sanitize_email": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_email",
        "summary": "Strips out all characters that are not allowable in an email.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email": {
                "label": "email",
                "description": "Email address to filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered email address.",
        "rank": 0
    },
    "sanitize_file_name": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_file_name",
        "summary": "Sanitizes a filename, replacing whitespace with dashes.",
        "description": "<p>Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line. Replaces spaces and consecutive dashes with a single dash. Trims period, dash and underscore from beginning and end of filename. It is not guaranteed that this function will return a filename that is allowed to be uploaded.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "The filename to be sanitized",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized filename",
        "rank": 0
    },
    "sanitize_hex_color": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_hex_color",
        "summary": "Sanitizes a hex color.",
        "description": "<p>Returns either '', a 3 or 6 digit hex color (with #), or nothing. For sanitizing values without a #, see sanitize_hex_color_no_hash().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "color": {
                "label": "color",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "sanitize_hex_color_no_hash": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_hex_color_no_hash",
        "summary": "Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.",
        "description": "<p>Saving hex colors without a hash puts the burden of adding the hash on the UI, which makes it difficult to use or upgrade to other color types such as rgba, hsl, rgb, and html color names.<\/p> <p>Returns either '', a 3 or 6 digit hex color (without a #), or null.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "color": {
                "label": "color",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "",
        "rank": 0
    },
    "sanitize_html_class": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_html_class",
        "summary": "Sanitizes an HTML classname to ensure it only contains valid characters.",
        "description": "<p>Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty string then it will return the alternative value supplied.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "The classname to be sanitized",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "fallback": {
                "label": "fallback",
                "description": "The value to return if the sanitization ends up as an empty string. Defaults to an empty string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized value",
        "rank": 0
    },
    "sanitize_key": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_key",
        "summary": "Sanitizes a string key.",
        "description": "<p>Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "String key",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized key",
        "rank": 0
    },
    "sanitize_meta": {
        "since": "3.1.3",
        "group": "Meta",
        "type": "efct",
        "name": "sanitize_meta",
        "summary": "Sanitize meta value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Meta key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Meta value to sanitize.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "Type of object the meta is registered to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_subtype": {
                "label": "object_subtype",
                "description": "The subtype of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Sanitized $meta_value.",
        "rank": 0
    },
    "sanitize_mime_type": {
        "since": "3.1.3",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_mime_type",
        "summary": "Sanitize a mime type",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mime_type": {
                "label": "mime_type",
                "description": "Mime type",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized mime type",
        "rank": 0
    },
    "sanitize_option": {
        "since": "2.0.5",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_option",
        "summary": "Sanitises various option values based on the nature of the option.",
        "description": "<p>This is basically a switch statement which will pass $value through a number of functions depending on the $option.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "The name of the option.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The unsanitised value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized value.",
        "rank": 0
    },
    "sanitize_post": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "sanitize_post",
        "summary": "Sanitize every post field.",
        "description": "<p>If the context is 'raw', then the post object or array will get minimal sanitization of the integer fields.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The Post Object or Array",
                "type": "object",
                "types": [
                    "object",
                    "mixed",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "How to sanitize post fields. Accepts 'raw', 'edit', 'db', or 'display'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "WP_Post",
            "array"
        ],
        "return_description": "The now sanitized Post Object or Array (will be the                              same type as $post).",
        "rank": 0
    },
    "sanitize_post_field": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "sanitize_post_field",
        "summary": "Sanitize post field based on context.",
        "description": "<p>Possible context values are: 'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' when calling filters.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "The Post Object field name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The Post Object value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', 'attribute' and 'js'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Sanitized value.",
        "rank": 0
    },
    "sanitize_sql_orderby": {
        "since": "2.5.1",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_sql_orderby",
        "summary": "Ensures a string is a valid SQL 'order by' clause.",
        "description": "<p>Accepts one or more columns, with or without a sort order (ASC \/ DESC). e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.<\/p> <p>Also accepts 'RAND()'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "orderby": {
                "label": "orderby",
                "description": "Order by clause to be validated.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Returns $orderby if valid, false otherwise.",
        "rank": 0
    },
    "sanitize_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "sanitize_term",
        "summary": "Sanitize Term all fields.",
        "description": "<p>Relies on sanitize_term_field() to sanitize the term. The difference is that this function will sanitize <strong>all<\/strong> fields. The context is based on sanitize_term_field().<\/p> <p>The $term is expected to be either an array or an object.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "The term to check.",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy name to use.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context in which to sanitize the term. Accepts 'edit', 'db', 'display', 'attribute', or 'js'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "object"
        ],
        "return_description": "Term with all fields sanitized.",
        "rank": 0
    },
    "sanitize_term_field": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "sanitize_term_field",
        "summary": "Cleanse the field value in the term based on the context.",
        "description": "<p>Passing a term field value through the function should be assumed to have cleansed the value for whatever context the term field is going to be used.<\/p> <p>If no context or an unsupported context is given, then default filters will be applied.<\/p> <p>There are enough filters for each context to support a custom filtering without creating your own filter function. Simply create a function that hooks into the filter you need.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "Term field to sanitize.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Search for this term value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy Name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context in which to sanitize the term field. Accepts 'edit', 'db', 'display', 'attribute', or 'js'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Sanitized field.",
        "rank": 0
    },
    "sanitize_text_field": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_text_field",
        "summary": "Sanitizes a string from user input or from the database.",
        "description": "<ul> <li>Checks for invalid UTF-8,<\/li> <li>Converts single &lt; characters to entities<\/li> <li>Strips all tags<\/li> <li>Removes line breaks, tabs, and extra whitespace<\/li> <li>Strips octets<\/li> <\/ul>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "String to sanitize.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized string.",
        "rank": 0
    },
    "sanitize_textarea_field": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_textarea_field",
        "summary": "Sanitizes a multiline string from user input or from the database.",
        "description": "<p>The function is like sanitize_text_field(), but preserves new lines (\\n) and other whitespace, which are legitimate input in textarea elements.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "String to sanitize.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized string.",
        "rank": 0
    },
    "sanitize_title": {
        "since": "1.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_title",
        "summary": "Sanitizes a title, or returns a fallback title.",
        "description": "<p>Specifically, HTML and PHP tags are stripped. Further actions can be added via the plugin API. If $title is empty and $fallback_title is set, the latter will be used.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "The string to be sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "fallback_title": {
                "label": "fallback_title",
                "description": "A title to use if $title is empty.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "The operation for which the string is sanitized",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'save'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized string.",
        "rank": 0
    },
    "sanitize_title_for_query": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_title_for_query",
        "summary": "Sanitizes a title with the 'query' context.",
        "description": "<p>Used for querying the database for a value from URL.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "The string to be sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized string.",
        "rank": 0
    },
    "sanitize_title_with_dashes": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_title_with_dashes",
        "summary": "Sanitizes a title, replacing whitespace and a few other characters with dashes.",
        "description": "<p>Limits the output to alphanumeric characters, underscore (_) and dash (-). Whitespace becomes a dash.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "The title to be sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "raw_title": {
                "label": "raw_title",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "The operation for which the string is sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized title.",
        "rank": 0
    },
    "sanitize_trackback_urls": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_trackback_urls",
        "summary": "Sanitize space or carriage return separated URLs that are used to send trackbacks.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "to_ping": {
                "label": "to_ping",
                "description": "Space or carriage return separated URLs",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URLs starting with the http or https protocol, separated by a carriage return.",
        "rank": 0
    },
    "sanitize_user": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "sanitize_user",
        "summary": "Sanitizes a username, stripping out unsafe characters.",
        "description": "<p>Removes tags, octets, entities, and if strict is enabled, will only keep alphanumeric, _, space, ., -, @. After sanitizing, it passes the username, raw username (the username in the parameter), and the value of $strict as parameters for the {@see 'sanitize_user'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "username": {
                "label": "username",
                "description": "The username to be sanitized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "strict": {
                "label": "strict",
                "description": "If set limits $username to specific characters.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The sanitized username, after passing through filters.",
        "rank": 0
    },
    "sanitize_user_field": {
        "since": "2.3.0",
        "group": "Users",
        "type": "efct",
        "name": "sanitize_user_field",
        "summary": "Sanitize user field based on context.",
        "description": "<p>Possible context values are: 'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' when calling filters.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "The user Object field name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The user Object value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display', 'attribute' and 'js'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Sanitized value.",
        "rank": 0
    },
    "saveDomDocument": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "saveDomDocument",
        "summary": "Saves the XML document into a file",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "doc": {
                "label": "doc",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "filename": {
                "label": "filename",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "save_mod_rewrite_rules": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "save_mod_rewrite_rules",
        "summary": "Updates the htaccess file with the current rules if it is writable.",
        "description": "<p>Always writes to the file if it exists and is writable to ensure that we blank out old rules.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True on write success, false on failure. Null in multisite.",
        "rank": 0
    },
    "search_theme_directories": {
        "since": "2.9.0",
        "group": "Theme",
        "type": "efct",
        "name": "search_theme_directories",
        "summary": "Search all registered theme directories for complete and valid themes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "force": {
                "label": "force",
                "description": "Whether to force a new directory scan. Defaults to false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Valid themes found",
        "rank": 0
    },
    "seems_utf8": {
        "since": "1.2.1",
        "group": "WordPress",
        "type": "efct",
        "name": "seems_utf8",
        "summary": "Checks to see if a string is utf8 encoded.",
        "description": "<p>NOTE: This function checks for 5-Byte sequences, UTF8 has Bytes Sequences with a maximum length of 4.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "The string to be checked",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if $str fits a UTF-8 model, false otherwise.",
        "rank": 0
    },
    "selected": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "selected",
        "summary": "Outputs the html selected attribute.",
        "description": "<p>Compares the first two arguments and if identical marks as selected<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "selected": {
                "label": "selected",
                "description": "One of the values to compare",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "current": {
                "label": "current",
                "description": "(true) The other value to compare if not just true",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or just return the string",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "html attribute or empty string",
        "rank": 0
    },
    "self_admin_url": {
        "since": "3.1.0",
        "group": "Template",
        "type": "efct",
        "name": "self_admin_url",
        "summary": "Retrieves the URL to the admin area for either the current site or the network depending on context.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the admin URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Admin URL link with optional path appended.",
        "rank": 0
    },
    "send_origin_headers": {
        "since": "3.4.0",
        "group": "HTTP",
        "type": "fct",
        "name": "send_origin_headers",
        "summary": "Send Access-Control-Allow-Origin and related headers if the current request is from an allowed origin.",
        "description": "<p>If the request is an OPTIONS request, the script exits with either access control headers sent, or a 403 response if the origin is not allowed. For other request methods, you will receive a return value.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Returns the origin URL if headers are sent. Returns false                      if headers are not sent.",
        "rank": 0
    },
    "separate_comments": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "efct",
        "name": "separate_comments",
        "summary": "Separates an array of comments into an array keyed by comment_type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comments": {
                "label": "comments",
                "description": "Array of comments",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_Comment[]",
                "label": "WP_Comment[]"
            }
        },
        "return": [
            "WP_Comment[]"
        ],
        "return_description": "Array of comments keyed by comment_type.",
        "rank": 0
    },
    "set_current_screen": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "set_current_screen",
        "summary": "Set the current screen object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hook_name": {
                "label": "hook_name",
                "description": "The hook name (also known as the hook suffix) used to determine the screen, or an existing screen object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "set_post_format": {
        "since": "3.1.0",
        "group": "Post",
        "type": "efct",
        "name": "set_post_format",
        "summary": "Assign a format to a post",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post for which to assign a format.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "format": {
                "label": "format",
                "description": "A format to assign. Use an empty string or array to remove all formats from the post.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error",
            "false"
        ],
        "return_description": "WP_Error on error. Array of affected term IDs on success.",
        "rank": 0
    },
    "set_post_thumbnail": {
        "since": "3.1.0",
        "group": "Post",
        "type": "efct",
        "name": "set_post_thumbnail",
        "summary": "Sets the post thumbnail (featured image) for the given post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object where thumbnail should be attached.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "thumbnail_id": {
                "label": "thumbnail_id",
                "description": "Thumbnail to attach.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "set_post_thumbnail_size": {
        "since": "2.9.0",
        "group": "Media",
        "type": "efct",
        "name": "set_post_thumbnail_size",
        "summary": "Registers an image size for the post thumbnail.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "width": {
                "label": "width",
                "description": "Image width in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "height": {
                "label": "height",
                "description": "Image height in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "crop": {
                "label": "crop",
                "description": "Whether to crop images to specified width and height or resize. An array can specify positioning of the crop area.",
                "type": "bool",
                "types": [
                    "bool",
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "set_post_type": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "set_post_type",
        "summary": "Update the post type for the post ID.",
        "description": "<p>The page or post cache will be cleaned for the post ID.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID to change post type. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type. Accepts 'post' or 'page' to name a few.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Amount of rows changed. Should be 1 for success and 0 for failure.",
        "rank": 0
    },
    "set_query_var": {
        "since": "2.2.0",
        "group": "Query",
        "type": "efct",
        "name": "set_query_var",
        "summary": "Set query variable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "var": {
                "label": "var",
                "description": "Query variable key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Query variable value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "set_site_transient": {
        "since": "2.9.0",
        "group": "Option",
        "type": "efct",
        "name": "set_site_transient",
        "summary": "Set\/update the value of a site transient.",
        "description": "<p>You do not need to serialize values, if the value needs to be serialize, then it will be serialized before it is set.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped. Must be 167 characters or fewer in length.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Transient value. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "expiration": {
                "label": "expiration",
                "description": "Time until expiration in seconds. Default 0 (no expiration).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if value was not set and true if value was set.",
        "rank": 0
    },
    "set_theme_mod": {
        "since": "2.1.0",
        "group": "Theme",
        "type": "efct",
        "name": "set_theme_mod",
        "summary": "Update theme modification value for the current theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Theme modification name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Theme modification value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "set_transient": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "set_transient",
        "summary": "Set\/update the value of a transient.",
        "description": "<p>You do not need to serialize values. If the value needs to be serialized, then it will be serialized before it is set.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "transient": {
                "label": "transient",
                "description": "Transient name. Expected to not be SQL-escaped. Must be 172 characters or fewer in length.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Transient value. Must be serializable if non-scalar. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "expiration": {
                "label": "expiration",
                "description": "Time until expiration in seconds. Default 0 (no expiration).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if value was not set and true if value was set.",
        "rank": 0
    },
    "set_url_scheme": {
        "since": "3.4.0",
        "group": "Template",
        "type": "efct",
        "name": "set_url_scheme",
        "summary": "Sets the scheme for a URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Absolute URL that includes a scheme",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give $url. Currently 'http', 'https', 'login', 'login_post', 'admin', 'relative', 'rest', 'rpc', or null.",
                "type": "string",
                "types": [
                    "string",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "$url URL with chosen scheme.",
        "rank": 0
    },
    "set_user_setting": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "set_user_setting",
        "summary": "Add or update user interface setting.",
        "description": "<p>Both $name and $value can contain only ASCII letters, numbers and underscores.<\/p> <p>This function has to be used before any output has started as it calls setcookie().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The name of the setting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The value for the setting.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True if set successfully, false if not. Null if the current user can't be established.",
        "rank": 0
    },
    "settings_errors": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "settings_errors",
        "summary": "Display settings errors registered by add_settings_error().",
        "description": "<p>Part of the Settings API. Outputs a div for each error retrieved by get_settings_errors().<\/p> <p>This is called automatically after a settings page based on the Settings API is submitted. Errors should be added during the validation callback function for a setting defined in register_setting().<\/p> <p>The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization on its current value.<\/p> <p>The $hide_on_update option will cause errors to only show when the settings page is first loaded. if the user has already saved new values it will be hidden to avoid repeating messages already shown in the default error reporting after submission. This is useful to show general errors like missing settings when the user arrives at the settings page.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "setting": {
                "label": "setting",
                "description": "slug title of a specific setting whose errors you want.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "sanitize": {
                "label": "sanitize",
                "description": "Whether to re-sanitize the setting value before returning errors.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "hide_on_update": {
                "label": "hide_on_update",
                "description": "If set to true errors will not be shown if the settings page has already been submitted.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "settings_fields": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "settings_fields",
        "summary": "Output nonce, action, and option_page fields for a settings page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option_group": {
                "label": "option_group",
                "description": "A settings group name. This should match the group name used in register_setting().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "setup_postdata": {
        "since": "1.5.0",
        "group": "Query",
        "type": "efct",
        "name": "setup_postdata",
        "summary": "Set up global post data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "WP_Post instance or Post ID\/object.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "object",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when finished.",
        "rank": 0
    },
    "setup_userdata": {
        "since": "2.0.4",
        "group": "Users",
        "type": "efct",
        "name": "setup_userdata",
        "summary": "Set up global user vars.",
        "description": "<p>Used by wp_set_current_user() for back compat. Might be deprecated in the future.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "for_user_id": {
                "label": "for_user_id",
                "description": "User ID to set up global data. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "shortcode_atts": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "shortcode_atts",
        "summary": "Combine user attributes with known attributes and fill in defaults when needed.",
        "description": "<p>The pairs should be considered to be all of the attributes which are supported by the caller and given as a list. The returned attributes will only contain the attributes in the $pairs list.<\/p> <p>If the $atts list has unsupported attributes, then they will be ignored and removed from the final returned list.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pairs": {
                "label": "pairs",
                "description": "Entire list of supported attributes and their defaults.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "atts": {
                "label": "atts",
                "description": "User defined attributes in shortcode tag.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "shortcode": {
                "label": "shortcode",
                "description": "The name of the shortcode, provided for context to enable filtering",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Combined and filtered attribute list.",
        "rank": 0
    },
    "shortcode_exists": {
        "since": "3.6.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "shortcode_exists",
        "summary": "Whether a registered shortcode exists named $tag",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Shortcode tag to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the given shortcode exists.",
        "rank": 0
    },
    "shortcode_parse_atts": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "shortcode_parse_atts",
        "summary": "Retrieve all attributes from the shortcodes tag.",
        "description": "<p>The attributes list has the attribute name as the key and the value of the attribute as the value in the key\/value pair. This allows for easier retrieval of the attributes, since all attributes have to be known.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "string"
        ],
        "return_description": "List of attribute values.                      Returns empty array if trim( $text ) == '&quot;&quot;'.                      Returns empty string if trim( $text ) == ''.                      All other matches are checked for not empty().",
        "rank": 0
    },
    "shortcode_unautop": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "shortcode_unautop",
        "summary": "Don't auto-p wrap shortcodes that stand alone",
        "description": "<p>Ensures that shortcodes are not wrapped in &lt;p&gt;...&lt;\/p&gt;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pee": {
                "label": "pee",
                "description": "The content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The filtered content.",
        "rank": 0
    },
    "show_admin_bar": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "show_admin_bar",
        "summary": "Sets the display status of the admin bar.",
        "description": "<p>This can be called immediately upon plugin load. It does not need to be called from a function hooked to the {@see 'init'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "show": {
                "label": "show",
                "description": "Whether to allow the admin bar to show.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "show_blog_form": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "show_blog_form",
        "summary": "Generates and displays the Signup and Create Site forms",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blogname": {
                "label": "blogname",
                "description": "The new site name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The new site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "A WP_Error object containing existing errors. Defaults to empty string.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 2
    },
    "show_message": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "show_message",
        "summary": "Displays the given administration message.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "message": {
                "label": "message",
                "description": "",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "show_user_form": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "show_user_form",
        "summary": "Display user registration form",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The entered username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_email": {
                "label": "user_email",
                "description": "The entered email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "A WP_Error object containing existing errors. Defaults to empty string.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 1
    },
    "signup_another_blog": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "signup_another_blog",
        "summary": "Allow returning users to sign up for another site",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blogname": {
                "label": "blogname",
                "description": "The new site name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The new site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "A WP_Error object containing existing errors. Defaults to empty string.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 1
    },
    "signup_blog": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "signup_blog",
        "summary": "Setup the new site signup",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blogname": {
                "label": "blogname",
                "description": "The site name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "A WP_Error object containing existing errors. Defaults to empty string.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 2
    },
    "signup_get_available_languages": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "signup_get_available_languages",
        "summary": "Retrieves languages available during the site\/user signup process.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of available languages.",
        "rank": 3
    },
    "signup_nonce_check": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "signup_nonce_check",
        "summary": "Process the signup nonce created in signup_nonce_fields().",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "result": {
                "label": "result",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "signup_user": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "efct",
        "name": "signup_user",
        "summary": "Setup the new user signup process",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "A WP_Error object containing existing errors. Defaults to empty string.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 2
    },
    "single_cat_title": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "single_cat_title",
        "summary": "Display or retrieve page title for category archive.",
        "description": "<p>Useful for category template files for displaying the category page title. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving.",
        "rank": 0
    },
    "single_month_title": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "single_month_title",
        "summary": "Display or retrieve page title for post archive based on date.",
        "description": "<p>Useful for when the template only needs to display the month and year, if either are available. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving.",
        "rank": 0
    },
    "single_post_title": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "single_post_title",
        "summary": "Display or retrieve page title for post.",
        "description": "<p>This is optimized for single.php template file for displaying the post title.<\/p> <p>It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving.",
        "rank": 0
    },
    "single_tag_title": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "single_tag_title",
        "summary": "Display or retrieve page title for tag post archive.",
        "description": "<p>Useful for tag template files for displaying the tag page title. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving.",
        "rank": 0
    },
    "single_term_title": {
        "since": "3.1.0",
        "group": "Template",
        "type": "efct",
        "name": "single_term_title",
        "summary": "Display or retrieve page title for taxonomy term archive.",
        "description": "<p>Useful for taxonomy term template files for displaying the taxonomy term page title. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "What to display before the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Title when retrieving.",
        "rank": 0
    },
    "site_admin_notice": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "fct",
        "name": "site_admin_notice",
        "summary": "Displays an admin notice to upgrade all sites after a core upgrade.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "false",
                "label": "false"
            }
        },
        "return": [
            "false"
        ],
        "return_description": "False if the current user is not a super admin.",
        "rank": 0
    },
    "site_icon_url": {
        "since": "4.3.0",
        "group": "Template",
        "type": "efct",
        "name": "site_icon_url",
        "summary": "Displays the Site Icon URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Size of the site icon. Default 512 (pixels).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "512",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Fallback url if no site icon is found.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog to get the site icon for. Default current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "site_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "site_url",
        "summary": "Retrieves the URL for the current site where WordPress application files (e.g. wp-blog-header.php or the wp-admin\/ folder) are accessible.",
        "description": "<p>Returns the 'site_url' option with the appropriate protocol, 'https' if is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the site URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Scheme to give the site URL context. See set_url_scheme().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Site URL link with optional path appended.",
        "rank": 0
    },
    "size_format": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "size_format",
        "summary": "Convert number of bytes largest unit bytes will fit into.",
        "description": "<p>It is easier to read 1 KB than 1024 bytes and 1 MB than 1048576 bytes. Converts number of bytes to human readable number by taking the number of that unit that the bytes will go into it. Supports TB value.<\/p> <p>Please note that integers in PHP are limited to 32 bits, unless they are on 64 bit architecture, then they have 64 bit size. If you need to place the larger size then what PHP integer type will hold, then use a string. It will be converted to a double, which should always have 64 bit length.<\/p> <p>Technically the correct unit names for powers of 1024 are KiB, MiB etc.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "bytes": {
                "label": "bytes",
                "description": "Number of bytes. Note max integer size for integers.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "decimals": {
                "label": "decimals",
                "description": "Precision of number of decimal places. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False on failure. Number string on success.",
        "rank": 0
    },
    "sort_menu": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "sort_menu",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "a": {
                "label": "a",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "b": {
                "label": "b",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "spawn_cron": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "spawn_cron",
        "summary": "Sends a request to run cron through HTTP request that doesn't halt page loading.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "gmt_time": {
                "label": "gmt_time",
                "description": "Unix timestamp (UTC). Default 0 (current time is used).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if spawned, false if no events spawned.",
        "rank": 0
    },
    "spl_autoload_functions": {
        "since": "4.6.0",
        "group": "PHP",
        "type": "fct",
        "name": "spl_autoload_functions",
        "summary": "Retrieves the registered autoloader functions.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of autoloader functions.",
        "rank": 0
    },
    "spl_autoload_register": {
        "since": "4.6.0",
        "group": "PHP",
        "type": "efct",
        "name": "spl_autoload_register",
        "summary": "Registers a function to be autoloaded.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "autoload_function": {
                "label": "autoload_function",
                "description": "The function to register.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "throw": {
                "label": "throw",
                "description": "Whether the function should throw an exception if the function isn't callable.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "prepend": {
                "label": "prepend",
                "description": "Whether the function should be prepended to the stack.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "spl_autoload_unregister": {
        "since": "4.6.0",
        "group": "PHP",
        "type": "efct",
        "name": "spl_autoload_unregister",
        "summary": "Unregisters an autoloader function.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "function": {
                "label": "function",
                "description": "The function to unregister.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the function was unregistered, false if it could not be.",
        "rank": 0
    },
    "status_header": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "status_header",
        "summary": "Set HTTP status header.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "code": {
                "label": "code",
                "description": "HTTP status code.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "description": {
                "label": "description",
                "description": "A custom description for the HTTP status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "stick_post": {
        "since": "2.7.0",
        "group": "Post",
        "type": "efct",
        "name": "stick_post",
        "summary": "Make a post sticky.",
        "description": "<p>Sticky posts should be displayed at the top of the front page.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "stream_preview_image": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "stream_preview_image",
        "summary": "Streams image in post to browser, along with enqueued changes in $_REQUEST['history']",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "strip_fragment_from_url": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "strip_fragment_from_url",
        "summary": "Strips the #fragment from a URL, if one is present.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL to strip.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The altered URL.",
        "rank": 0
    },
    "strip_shortcode_tag": {
        "since": "3.3.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "strip_shortcode_tag",
        "summary": "Strips a shortcode tag based on RegEx matches against post content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "m": {
                "label": "m",
                "description": "RegEx matches against post content.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The content stripped of the tag, otherwise false.",
        "rank": 0
    },
    "strip_shortcodes": {
        "since": "2.5.0",
        "group": "Shortcodes",
        "type": "efct",
        "name": "strip_shortcodes",
        "summary": "Remove all shortcode tags from the given content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to remove shortcode tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content without shortcode tags.",
        "rank": 0
    },
    "stripslashes_deep": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "stripslashes_deep",
        "summary": "Navigates through an array, object, or scalar, and removes slashes from the values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The value to be stripped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Stripped value.",
        "rank": 0
    },
    "stripslashes_from_strings_only": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "stripslashes_from_strings_only",
        "summary": "Callback function for `stripslashes_deep()` which strips slashes from strings.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The array or string to be stripped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "$value The stripped value.",
        "rank": 0
    },
    "submit_button": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "submit_button",
        "summary": "Echoes a submit button, with provided text and appropriate class(es).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text of the button (defaults to 'Save Changes')",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "The type and CSS class(es) of the button. Core values include 'primary', 'small', and 'large'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'primary'",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The HTML name of the submit button. Defaults to &quot;submit&quot;. If no id attribute is given in $other_attributes below, $name will be used as the button's id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'submit'",
                "required": false
            },
            "wrap": {
                "label": "wrap",
                "description": "True if the output button should be wrapped in a paragraph tag, false otherwise. Defaults to true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "other_attributes": {
                "label": "other_attributes",
                "description": "Other attributes that should be output with the button, mapping attributes to their values, such as setting tabindex to 1, etc. These key\/value attribute pairs will be output as attribute=&quot;value&quot;, where attribute is the key. Other attributes can also be provided as a string such as 'tabindex=&quot;1&quot;', though the array format is preferred.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "switch_theme": {
        "since": "2.5.0",
        "group": "Theme",
        "type": "efct",
        "name": "switch_theme",
        "summary": "Switches the theme.",
        "description": "<p>Accepts one argument: $stylesheet of the theme. It also accepts an additional function signature of two arguments: $template then $stylesheet. This is for backward compatibility.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "stylesheet": {
                "label": "stylesheet",
                "description": "Stylesheet name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "switch_to_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "switch_to_blog",
        "summary": "Switch the current blog.",
        "description": "<p>This function is useful if you need to pull posts, or other information, from other blogs. You can switch back afterwards using restore_current_blog().<\/p> <p>Things that aren't switched:<\/p> <ul> <li>plugins. See #14941<\/li> <\/ul>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_blog": {
                "label": "new_blog",
                "description": "The id of the blog you want to switch to. Default: current blog",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated argument",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Always returns True.",
        "rank": 0
    },
    "switch_to_locale": {
        "since": "4.7.0",
        "group": "i18n",
        "type": "efct",
        "name": "switch_to_locale",
        "summary": "Switches the translations according to the given locale.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "locale": {
                "label": "locale",
                "description": "The locale.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "sync_category_tag_slugs": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "sync_category_tag_slugs",
        "summary": "Synchronizes category and post tag slugs when global terms are enabled.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "The term.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy for $term. Should be 'category' or 'post_tag', as these are the only taxonomies which are processed by this function; anything else will be returned untouched.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term",
            "array"
        ],
        "return_description": "Returns <code>$term<\/code>, after filtering the 'slug' field with <code>sanitize_title()<\/code>                       if <code>$taxonomy<\/code> is 'category' or 'post_tag'.",
        "rank": 0
    },
    "tag_description": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "tag_description",
        "summary": "Retrieve tag description.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Tag ID. Will use global tag ID by default.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Tag description, available.",
        "rank": 0
    },
    "tag_escape": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "tag_escape",
        "summary": "Escape an HTML tag name.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag_name": {
                "label": "tag_name",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "tag_exists": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "tag_exists",
        "summary": "Check whether a post tag with a given name exists.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag_name": {
                "label": "tag_name",
                "description": "",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "",
        "rank": 0
    },
    "taxonomy_exists": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "taxonomy_exists",
        "summary": "Determines whether the taxonomy name exists.",
        "description": "<p>Formerly is_taxonomy(), introduced in 2.3.0.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Name of taxonomy object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the taxonomy exists.",
        "rank": 0
    },
    "taxonomy_meta_box_sanitize_cb_checkboxes": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "taxonomy_meta_box_sanitize_cb_checkboxes",
        "summary": "Sanitizes POST values from a checkbox taxonomy metabox.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "Raw term data from the 'tax_input' field.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "taxonomy_meta_box_sanitize_cb_input": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "taxonomy_meta_box_sanitize_cb_input",
        "summary": "Sanitizes POST values from an input taxonomy metabox.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "Raw term data from the 'tax_input' field.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "term_description": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "term_description",
        "summary": "Retrieve term description.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term ID. Will use global term ID by default.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated argument.",
                "type": "null",
                "types": [
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Term description, available.",
        "rank": 0
    },
    "term_exists": {
        "since": "3.0.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "term_exists",
        "summary": "Determines whether a term exists.",
        "description": "<p>Formerly is_term(), introduced in 2.3.0.<\/p> <p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "The term to check. Accepts term ID, slug, or name.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy name to use",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "parent": {
                "label": "parent",
                "description": "ID of parent term under which to confine the exists search.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Returns null if the term does not exist. Returns the term ID               if no taxonomy is specified and the term ID exists. Returns               an array of the term ID and the term taxonomy ID if the taxonomy               is specified and the pairing exists.",
        "rank": 0
    },
    "term_is_ancestor_of": {
        "since": "3.4.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "term_is_ancestor_of",
        "summary": "Check if a term is an ancestor of another term.",
        "description": "<p>You can use either an id or the term object for both parameters.<\/p>",
        "inputs": {
            "term1": {
                "label": "term1",
                "description": "ID or object to check if this is the parent term.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "term2": {
                "label": "term2",
                "description": "The child term.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name that $term1 and $term2 belong to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether <code>$term2<\/code> is a child of <code>$term1<\/code>.",
        "rank": 0
    },
    "the_archive_description": {
        "since": "4.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_archive_description",
        "summary": "Display category, tag, term, or author description.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Content to prepend to the description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Content to append to the description.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_archive_title": {
        "since": "4.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_archive_title",
        "summary": "Display the archive title based on the queried object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Content to prepend to the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Content to append to the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_attachment_link": {
        "since": "2.0.0",
        "group": "Template",
        "type": "efct",
        "name": "the_attachment_link",
        "summary": "Display an attachment page link using an image or icon.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "fullsize": {
                "label": "fullsize",
                "description": "Whether to use full size.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated. Not used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "permalink": {
                "label": "permalink",
                "description": "Whether to include permalink.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_author": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_author",
        "summary": "Display the name of the author of the current post.",
        "description": "<p>The behavior of this function is based off of old functionality predating get_the_author(). This function is not deprecated, but is designed to echo the value from get_the_author() and as an result of any old theme that might still use the old behavior will also pass the value from get_the_author().<\/p> <p>The normal, expected behavior of this function is to echo the author and not return it. However, backward compatibility has to be maintained.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deprecated_echo": {
                "label": "deprecated_echo",
                "description": "Deprecated. Use get_the_author(). Echo the string or return it.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "The author's display name, from get_the_author().",
        "rank": 0
    },
    "the_author_meta": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "the_author_meta",
        "summary": "Outputs the field from the user's DB object. Defaults to current post's author.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "Selects the field of the users record. See get_the_author_meta() for the list of possible fields.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_author_posts_link": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "the_author_posts_link",
        "summary": "Displays an HTML link to the author page of the current post's author.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Unused.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_block_editor_meta_box_post_form_hidden_fields": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "the_block_editor_meta_box_post_form_hidden_fields",
        "summary": "Renders the hidden form required for the meta boxes form.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Current post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_category": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_category",
        "summary": "Display category list for a post in either HTML list or custom format.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "separator": {
                "label": "separator",
                "description": "Separator between the categories. By default, the links are placed in an unordered list. An empty string will result in the default behavior.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "parents": {
                "label": "parents",
                "description": "How to display the parents.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID to retrieve categories.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_category_rss": {
        "since": "0.71",
        "group": "Feed",
        "type": "efct",
        "name": "the_category_rss",
        "summary": "Display the post categories in the feed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "default is the type returned by get_default_feed().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_comment": {
        "since": "2.2.0",
        "group": "Query",
        "type": "fct",
        "name": "the_comment",
        "summary": "Iterate comment index in the comment loop.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "",
        "rank": 0
    },
    "the_comments_navigation": {
        "since": "4.4.0",
        "group": "Template",
        "type": "efct",
        "name": "the_comments_navigation",
        "summary": "Displays navigation to next\/previous set of comments, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "See get_the_comments_navigation() for available arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_comments_pagination": {
        "since": "4.4.0",
        "group": "Template",
        "type": "efct",
        "name": "the_comments_pagination",
        "summary": "Displays a paginated navigation to next\/previous set of comments, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "See get_the_comments_pagination() for available arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_content": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_content",
        "summary": "Display the post content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "more_link_text": {
                "label": "more_link_text",
                "description": "Content for when there is more text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "strip_teaser": {
                "label": "strip_teaser",
                "description": "Strip teaser content before the more text. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_content_feed": {
        "since": "2.9.0",
        "group": "Feed",
        "type": "efct",
        "name": "the_content_feed",
        "summary": "Display the post content for feeds.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "feed_type": {
                "label": "feed_type",
                "description": "The type of feed. rss2 | atom | rss | rdf",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_custom_logo": {
        "since": "4.5.0",
        "group": "Template",
        "type": "efct",
        "name": "the_custom_logo",
        "summary": "Displays a custom logo, linked to home.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "ID of the blog in question. Default is the ID of the current blog.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_date": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_date",
        "summary": "Display or Retrieve the date the current post was written (once per date)",
        "description": "<p>Will only output the date if the current post's date is different from the previous one output.<\/p> <p>i.e. Only one date listing will show per day worth of posts shown in the loop, even if the function is called several times for each post.<\/p> <p>HTML output can be filtered with 'the_date'. Date string output can be filtered with 'get_the_date'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "PHP date format defaults to the date_format option if not specified.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Output before the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Output after the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "default is display. Whether to echo the date or return it.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String if retrieving.",
        "rank": 0
    },
    "the_feed_link": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "the_feed_link",
        "summary": "Displays the permalink for the feed type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "anchor": {
                "label": "anchor",
                "description": "The link's anchor text.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feed": {
                "label": "feed",
                "description": "Feed type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_generator": {
        "since": "2.5.0",
        "group": "Template",
        "type": "efct",
        "name": "the_generator",
        "summary": "Display the generator XML or Comment for RSS, ATOM, etc.",
        "description": "<p>Returns the correct generator type for the requested output format. Allows for a plugin to filter generators overall the {@see 'the_generator'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_guid": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "the_guid",
        "summary": "Display the Post Global Unique Identifier (guid).",
        "description": "<p>The guid will appear to be a link, but should not be used as a link to the post. The reason you should not use it as a link, is because of moving the blog across domains.<\/p> <p>URL is escaped to make it XML-safe.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_header_image_tag": {
        "since": "4.4.0",
        "group": "Theme",
        "type": "efct",
        "name": "the_header_image_tag",
        "summary": "Display the image markup for a custom header image.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes for the image markup.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_modified_date": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_modified_date",
        "summary": "Display the date on which the post was last modified.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "PHP date format defaults to the date_format option if not specified.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Output before the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Output after the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "default is display. Whether to echo the date or return it.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String if retrieving.",
        "rank": 0
    },
    "the_modified_time": {
        "since": "2.0.0",
        "group": "Template",
        "type": "efct",
        "name": "the_modified_time",
        "summary": "Display the time at which the post was last modified.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "Either 'G', 'U', or php date format defaults to the value specified in the time_format option.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_permalink": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "the_permalink",
        "summary": "Displays the permalink for the current post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object. Default is the global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_post_navigation": {
        "since": "4.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_post_navigation",
        "summary": "Displays the navigation to next\/previous post, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "See get_the_post_navigation() for available arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_post_thumbnail": {
        "since": "2.9.0",
        "group": "Template",
        "type": "efct",
        "name": "the_post_thumbnail",
        "summary": "Display the post thumbnail.",
        "description": "<p>When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size is registered, which differs from the 'thumbnail' image size managed via the Settings &gt; Media screen.<\/p> <p>When using the_post_thumbnail() or related functions, the 'post-thumbnail' image size is used by default, though a different size can be specified instead as needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post-thumbnail'",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Query string or array of attributes.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_post_thumbnail_caption": {
        "since": "4.6.0",
        "group": "Template",
        "type": "efct",
        "name": "the_post_thumbnail_caption",
        "summary": "Displays the post thumbnail caption.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_post_thumbnail_url": {
        "since": "4.4.0",
        "group": "Template",
        "type": "efct",
        "name": "the_post_thumbnail_url",
        "summary": "Display the post thumbnail URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post-thumbnail'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_posts_navigation": {
        "since": "4.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_posts_navigation",
        "summary": "Displays the navigation to next\/previous set of posts, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "See get_the_posts_navigation() for available arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_posts_pagination": {
        "since": "4.1.0",
        "group": "Template",
        "type": "efct",
        "name": "the_posts_pagination",
        "summary": "Displays a paginated navigation to next\/previous set of posts, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "See get_the_posts_pagination() for available arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_privacy_policy_link": {
        "since": "4.9.6",
        "group": "Template",
        "type": "efct",
        "name": "the_privacy_policy_link",
        "summary": "Displays the privacy policy link with formatting, when applicable.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Display before privacy policy link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Display after privacy policy link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_shortlink": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "the_shortlink",
        "summary": "Displays the shortlink for a post.",
        "description": "<p>Must be called from inside &quot;The Loop&quot;<\/p> <p>Call like the_shortlink( __( 'Shortlinkage FTW' ) )<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The link text or HTML to be displayed. Defaults to 'This is the short link.'",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "HTML to display before the link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "HTML to display after the link.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_tags": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "the_tags",
        "summary": "Retrieve the tags for a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Before list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "Separate items using this.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "', '",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "After list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_taxonomies": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "the_taxonomies",
        "summary": "Display the taxonomies of a post with available options.",
        "description": "<p>This function can be used within the loop to display the taxonomies for a post without specifying the Post ID. You can also use it outside the Loop to display the taxonomies for a specific post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments about which post to use and how to format the output. Shares all of the arguments supported by get_the_taxonomies(), in addition to the following. <ul><li><b>'post'<\/b><br\/><i>(int|WP_Post)<\/i> Post ID or object to get taxonomies of. Default current post.<\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> Displays before the taxonomies. Default empty string.<\/li> <li><b>'sep'<\/b><br\/><i>(string)<\/i> Separates each taxonomy. Default is a space.<\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> Displays after the taxonomies. Default empty string.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_terms": {
        "since": "2.5.0",
        "group": "Template",
        "type": "efct",
        "name": "the_terms",
        "summary": "Display the terms in a list.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "before": {
                "label": "before",
                "description": "Before list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "Separate items using this.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "', '",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "After list.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "False on WordPress error.",
        "rank": 0
    },
    "the_time": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_time",
        "summary": "Display the time at which the post was written.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "d": {
                "label": "d",
                "description": "Either 'G', 'U', or php date format.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_title": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_title",
        "summary": "Display or retrieve the current post title with optional markup.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Markup to prepend to the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Markup to append to the title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or return the title. Default true for echo.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Current post title if $echo is false.",
        "rank": 0
    },
    "the_title_attribute": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "the_title_attribute",
        "summary": "Sanitize the current title when retrieving or displaying.",
        "description": "<p>Works like the_title(), except the parameters can be in a string or an array. See the function for what can be override in the $args parameter.<\/p> <p>The title before it is displayed will have the tags stripped and esc_attr() before it is passed to the user or displayed. The default as with the_title(), is to display the title.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Title attribute arguments. Optional. <ul><li><b>'before'<\/b><br\/><i>(string)<\/i> Markup to prepend to the title. <\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> Markup to append to the title. <\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo or return the title. Default true for echo.<\/li> <li><b>'post'<\/b><br\/><i>(WP_Post)<\/i> Current post object to retrieve the title for.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when echo is false.",
        "rank": 0
    },
    "the_weekday_date": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "the_weekday_date",
        "summary": "Display the weekday on which the post was written.",
        "description": "<p>Will only output the weekday if the current post's weekday is different from the previous one output.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Output before the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Output after the date.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "the_widget": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "the_widget",
        "summary": "Output an arbitrary widget as a template tag.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget": {
                "label": "widget",
                "description": "The widget's PHP class name (see class-wp-widget.php).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "instance": {
                "label": "instance",
                "description": "The widget's instance settings.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of arguments to configure the display of the widget. <ul><li><b>'before_widget'<\/b><br\/><i>(string)<\/i> HTML content that will be prepended to the widget's HTML output. Default &lt;div class=&quot;widget %s&quot;&gt;, where %s is the widget's class name.<\/li> <li><b>'after_widget'<\/b><br\/><i>(string)<\/i> HTML content that will be appended to the widget's HTML output. Default &lt;\/div&gt;.<\/li> <li><b>'before_title'<\/b><br\/><i>(string)<\/i> HTML content that will be prepended to the widget's title when displayed. Default &lt;h2 class=&quot;widgettitle&quot;&gt;.<\/li> <li><b>'after_title'<\/b><br\/><i>(string)<\/i> HTML content that will be appended to the widget's title when displayed. Default &lt;\/h2&gt;.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "theme_update_available": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "theme_update_available",
        "summary": "Check if there is an update for a theme available.",
        "description": "<p>Will display link, if there is an update available.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "theme": {
                "label": "theme",
                "description": "Theme data object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "themes_api": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "themes_api",
        "summary": "Retrieves theme installer pages from the WordPress.org Themes API.",
        "description": "<p>It is possible for a theme to override the Themes API result with three filters. Assume this is for themes, which can extend on the Theme Info to offer more choices. This is very powerful and must be used with care, when overriding the filters.<\/p> <p>The first filter, {@see 'themes_api_args'}, is for the args and gives the action as the second parameter. The hook for {@see 'themes_api_args'} must ensure that an object is returned.<\/p> <p>The second filter, {@see 'themes_api'}, allows a plugin to override the WordPress.org Theme API entirely. If $action is 'query_themes', 'theme_information', or 'feature_list', an object MUST be passed. If $action is 'hot_tags', an array should be passed.<\/p> <p>Finally, the third filter, {@see 'themes_api_result'}, makes it possible to filter the response object or array, depending on the $action type.<\/p> <p>Supported arguments per action:<\/p> Argument Name 'query_themes' 'theme_information' 'hot_tags' 'feature_list' $slug No Yes No No $per_page Yes No No No $page Yes No No No $number No No Yes No $search Yes No No No $tag Yes No No No $author Yes No No No $user Yes No No No $browse Yes No No No $locale Yes Yes No No $fields Yes Yes No No ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "API action to perform: 'query_themes', 'theme_information', 'hot_tags' or 'feature_list'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or object of arguments to serialize for the Themes API. <ul><li><b>'slug'<\/b><br\/><i>(string)<\/i> The theme slug. <\/li> <li><b>'per_page'<\/b><br\/><i>(int)<\/i> Number of themes per page. Default 24.<\/li> <li><b>'page'<\/b><br\/><i>(int)<\/i> Number of current page. Default 1.<\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> Number of tags to be queried.<\/li> <li><b>'search'<\/b><br\/><i>(string)<\/i> A search term. <\/li> <li><b>'tag'<\/b><br\/><i>(string)<\/i> Tag to filter themes. <\/li> <li><b>'author'<\/b><br\/><i>(string)<\/i> Username of an author to filter themes. <\/li> <li><b>'user'<\/b><br\/><i>(string)<\/i> Username to query for their favorites. <\/li> <li><b>'browse'<\/b><br\/><i>(string)<\/i> Browse view: 'featured', 'popular', 'updated', 'favorites'.<\/li> <li><b>'locale'<\/b><br\/><i>(string)<\/i> Locale to provide context-sensitive results. Default is the value of get_locale().<\/li> <li><b>'fields'<\/b><br\/><i>(array)<\/i> Array of fields which should or should not be returned.<ul> <li><b>'description'<\/b><br\/><i>(bool)<\/i> Whether to return the theme full description. Default false.<\/li> <li><b>'sections'<\/b><br\/><i>(bool)<\/i> Whether to return the theme readme sections: description, installation, FAQ, screenshots, other notes, and changelog. Default false.<\/li> <li><b>'rating'<\/b><br\/><i>(bool)<\/i> Whether to return the rating in percent and total number of ratings. Default false.<\/li> <li><b>'ratings'<\/b><br\/><i>(bool)<\/i> Whether to return the number of rating for each star (1-5). Default false.<\/li> <li><b>'downloaded'<\/b><br\/><i>(bool)<\/i> Whether to return the download count. Default false.<\/li> <li><b>'downloadlink'<\/b><br\/><i>(bool)<\/i> Whether to return the download link for the package. Default false.<\/li> <li><b>'last_updated'<\/b><br\/><i>(bool)<\/i> Whether to return the date of the last update. Default false.<\/li> <li><b>'tags'<\/b><br\/><i>(bool)<\/i> Whether to return the assigned tags. Default false.<\/li> <li><b>'homepage'<\/b><br\/><i>(bool)<\/i> Whether to return the theme homepage link. Default false.<\/li> <li><b>'screenshots'<\/b><br\/><i>(bool)<\/i> Whether to return the screenshots. Default false.<\/li> <li><b>'screenshot_count'<\/b><br\/><i>(int)<\/i> Number of screenshots to return. Default 1.<\/li> <li><b>'screenshot_url'<\/b><br\/><i>(bool)<\/i> Whether to return the URL of the first screenshot. Default false.<\/li> <li><b>'photon_screenshots'<\/b><br\/><i>(bool)<\/i> Whether to return the screenshots via Photon. Default false.<\/li> <li><b>'template'<\/b><br\/><i>(bool)<\/i> Whether to return the slug of the parent theme. Default false.<\/li> <li><b>'parent'<\/b><br\/><i>(bool)<\/i> Whether to return the slug, name and homepage of the parent theme. Default false.<\/li> <li><b>'versions'<\/b><br\/><i>(bool)<\/i> Whether to return the list of all available versions. Default false.<\/li> <li><b>'theme_url'<\/b><br\/><i>(bool)<\/i> Whether to return theme's URL. Default false.<\/li> <li><b>'extended_author'<\/b><br\/><i>(bool)<\/i> Whether to return nicename or nicename and display name. Default false. <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array",
            "WP_Error"
        ],
        "return_description": "Response object or array on success, WP_Error on failure. See the         {@link <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/themes_api\/\">https:\/\/developer.wordpress.org\/reference\/functions\/themes_api\/<\/a> function reference article}         for more information on the make-up of possible return objects depending on the value of <code>$action<\/code>.",
        "rank": 0
    },
    "timer_stop": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "timer_stop",
        "summary": "Retrieve or display the time from the page start to when function is called.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to echo or return the results. Accepts 0|false for return, 1|true for echo. Default 0|false.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "0",
                "required": true
            },
            "precision": {
                "label": "precision",
                "description": "The number of digits from the right of the decimal to display.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "3",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The &quot;second.microsecond&quot; finished time calculation. The number is formatted                for human consumption, both localized and rounded.",
        "rank": 0
    },
    "touch_time": {
        "since": "0.71",
        "group": "Administration",
        "type": "efct",
        "name": "touch_time",
        "summary": "Print out HTML form date elements for editing post or comment publish date.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "edit": {
                "label": "edit",
                "description": "Accepts 1|true for editing the date, 0|false for adding the date.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "1",
                "required": false
            },
            "for_post": {
                "label": "for_post",
                "description": "Accepts 1|true for applying the date to a post, 0|false for a comment.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "1",
                "required": false
            },
            "tab_index": {
                "label": "tab_index",
                "description": "The tabindex attribute to add. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "multi": {
                "label": "multi",
                "description": "Whether the additional fields and buttons should be added. Default 0|false.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "trackback": {
        "since": "0.71",
        "group": "Comment",
        "type": "efct",
        "name": "trackback",
        "summary": "Send a Trackback.",
        "description": "<p>Updates database when sending trackback to prevent duplicates.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "trackback_url": {
                "label": "trackback_url",
                "description": "URL to send trackbacks.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Title of post.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "excerpt": {
                "label": "excerpt",
                "description": "Excerpt of post.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "ID": {
                "label": "ID",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false",
            "void"
        ],
        "return_description": "Database query from update.",
        "rank": 0
    },
    "trackback_rdf": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "trackback_rdf",
        "summary": "Generate and display the RDF for the trackback information of current post.",
        "description": "<p>Deprecated in 3.0.0, and restored in 3.0.1.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used (Was $timezone = 0).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "trackback_response": {
        "since": "0.71",
        "group": "Trackbacks",
        "type": "efct",
        "name": "trackback_response",
        "summary": "Response to a trackback.",
        "description": "<p>Responds with an error or success XML message.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "error": {
                "label": "error",
                "description": "Whether there was an error. Default '0'. Accepts '0' or '1', true or false.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "0",
                "required": true
            },
            "error_message": {
                "label": "error_message",
                "description": "Error message if an error occurred.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "trackback_url": {
        "since": "0.71",
        "group": "Template",
        "type": "efct",
        "name": "trackback_url",
        "summary": "Display the current post's trackback URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated_echo": {
                "label": "deprecated_echo",
                "description": "Not used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "void",
            "string"
        ],
        "return_description": "Should only be used to echo the trackback URL, use get_trackback_url()                     for the result instead.",
        "rank": 0
    },
    "trackback_url_list": {
        "since": "1.0.0",
        "group": "Post",
        "type": "efct",
        "name": "trackback_url_list",
        "summary": "Do trackbacks for a list of URLs.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tb_list": {
                "label": "tb_list",
                "description": "Comma separated list of URLs.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "trailingslashit": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "trailingslashit",
        "summary": "Appends a trailing slash.",
        "description": "<p>Will remove trailing forward and backslashes if it exists already before adding a trailing forward slash. This prevents double slashing a string or path.<\/p> <p>The primary use of this is for paths and thus should be used for paths. It is not restricted to paths and offers no specific path support.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "What to add the trailing slash to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String with trailing slash added.",
        "rank": 0
    },
    "translate": {
        "since": "2.2.0",
        "group": "i18n",
        "type": "efct",
        "name": "translate",
        "summary": "Retrieve the translation of $text.",
        "description": "<p>If there is no translation, or the text domain isn't loaded, the original text is returned.<\/p> <p><em>Note:<\/em> Don't use translate() directly, use __() or related functions.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text",
        "rank": 0
    },
    "translate_level_to_role": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "translate_level_to_role",
        "summary": "Translate user level to user role name.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "level": {
                "label": "level",
                "description": "User level.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "User role name.",
        "rank": 0
    },
    "translate_nooped_plural": {
        "since": "3.1.0",
        "group": "i18n",
        "type": "efct",
        "name": "translate_nooped_plural",
        "summary": "Translates and retrieves the singular or plural form of a string that's been registered with _n_noop() or _nx_noop().",
        "description": "<p>Used when you want to use a translatable plural string once the number is known.<\/p> <p>Example:<\/p> $message = _n_noop( '%s post', '%s posts', 'text-domain' ); ... printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "nooped_plural": {
                "label": "nooped_plural",
                "description": "Array with singular, plural, and context keys, usually the result of _n_noop() or _nx_noop().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "count": {
                "label": "count",
                "description": "Number of objects.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings. If $nooped_plural contains a text domain passed to _n_noop() or _nx_noop(), it will override this value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Either $single or $plural translated text.",
        "rank": 0
    },
    "translate_smiley": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "translate_smiley",
        "summary": "Convert one smiley code to the icon graphic file equivalent.",
        "description": "<p>Callback handler for convert_smilies().<\/p> <p>Looks up one smiley code in the $wpsmiliestrans global array and returns an &lt;img&gt; string for that smiley.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "Single match. Smiley code to convert to image.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Image string for smiley.",
        "rank": 0
    },
    "translate_user_role": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "translate_user_role",
        "summary": "Translates role name.",
        "description": "<p>Since the role names are in the database and not in the source there are dummy gettext calls to get them into the POT file and this function properly translates them back.<\/p> <p>The before_last_bar() call is needed, because older installations keep the roles using the old context format: 'Role name|User role' and just skipping the content after the last bar is easier than fixing them in the DB. New installations won't suffer from that problem.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The role name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated role name on success, original name on failure.",
        "rank": 0
    },
    "translate_with_gettext_context": {
        "since": "2.8.0",
        "group": "i18n",
        "type": "efct",
        "name": "translate_with_gettext_context",
        "summary": "Retrieve the translation of $text in the context defined in $context.",
        "description": "<p>If there is no translation, or the text domain isn't loaded the original text is returned.<\/p> <p><em>Note:<\/em> Don't use translate_with_gettext_context() directly, use _x() or related functions.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to translate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "Context information for the translators.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Translated text on success, original text on failure.",
        "rank": 0
    },
    "translations_api": {
        "since": "4.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "translations_api",
        "summary": "Retrieve translations from WordPress Translation API.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Type of translations. Accepts 'plugins', 'themes', 'core'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Translation API arguments. Optional.",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "WP_Error"
        ],
        "return_description": "On success an object of translations, WP_Error on failure.",
        "rank": 0
    },
    "undismiss_core_update": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "undismiss_core_update",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "version": {
                "label": "version",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "locale": {
                "label": "locale",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "unescape_invalid_shortcodes": {
        "since": "4.2.3",
        "group": "Shortcodes",
        "type": "efct",
        "name": "unescape_invalid_shortcodes",
        "summary": "Remove placeholders added by do_shortcodes_in_html_tags().",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to search for placeholders.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with placeholders removed.",
        "rank": 0
    },
    "uninstall_plugin": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "uninstall_plugin",
        "summary": "Uninstall a single plugin.",
        "description": "<p>Calls the uninstall hook, if it is available.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "True if a plugin's uninstall.php file has been found and included.",
        "rank": 0
    },
    "unload_textdomain": {
        "since": "3.0.0",
        "group": "i18n",
        "type": "efct",
        "name": "unload_textdomain",
        "summary": "Unload translations for a text domain.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "Text domain. Unique identifier for retrieving translated strings.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether textdomain was unloaded.",
        "rank": 0
    },
    "unregister_block_type": {
        "since": "5.0.0",
        "group": "Blocks",
        "type": "efct",
        "name": "unregister_block_type",
        "summary": "Unregisters a block type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Block type name including namespace, or alternatively a complete WP_Block_Type instance.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Block_Type",
            "false"
        ],
        "return_description": "The unregistered block type on success, or false on failure.",
        "rank": 0
    },
    "unregister_default_headers": {
        "since": "3.0.0",
        "group": "Theme",
        "type": "efct",
        "name": "unregister_default_headers",
        "summary": "Unregister default headers.",
        "description": "<p>This function must be called after register_default_headers() has already added the header you want to remove.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "header": {
                "label": "header",
                "description": "The header string id (key of array) to remove, or an array thereof.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "void"
        ],
        "return_description": "A single header returns true on success, false on failure.                   There is currently no return value for multiple headers.",
        "rank": 0
    },
    "unregister_meta_key": {
        "since": "4.6.0",
        "group": "Meta",
        "type": "efct",
        "name": "unregister_meta_key",
        "summary": "Unregisters a meta key from the list of registered keys.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_type": {
                "label": "object_type",
                "description": "The type of object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_subtype": {
                "label": "object_subtype",
                "description": "The subtype of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if successful. False if the meta key was not registered.",
        "rank": 0
    },
    "unregister_nav_menu": {
        "since": "3.1.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "unregister_nav_menu",
        "summary": "Unregisters a navigation menu location for a theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "The menu location identifier.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "unregister_post_meta": {
        "since": "4.9.8",
        "group": "Post",
        "type": "efct",
        "name": "unregister_post_meta",
        "summary": "Unregisters a meta key for posts.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type the meta key is currently registered for. Pass an empty string if the meta key is registered across all existing post types.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key to unregister.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false if the meta key was not previously registered.",
        "rank": 0
    },
    "unregister_post_type": {
        "since": "4.5.0",
        "group": "Post",
        "type": "efct",
        "name": "unregister_post_type",
        "summary": "Unregisters a post type.",
        "description": "<p>Can not be used to unregister built-in post types.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type to unregister.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, WP_Error on failure or if the post type doesn't exist.",
        "rank": 0
    },
    "unregister_setting": {
        "since": "2.7.0",
        "group": "Option",
        "type": "efct",
        "name": "unregister_setting",
        "summary": "Unregister a setting.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option_group": {
                "label": "option_group",
                "description": "The settings group name used during registration.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "The name of the option to unregister.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "unregister_sidebar": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "unregister_sidebar",
        "summary": "Removes a sidebar from the list.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sidebar_id": {
                "label": "sidebar_id",
                "description": "The ID of the sidebar when it was registered.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "unregister_taxonomy": {
        "since": "4.5.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "unregister_taxonomy",
        "summary": "Unregisters a taxonomy.",
        "description": "<p>Can not be used to unregister built-in taxonomies.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, WP_Error on failure or if the taxonomy doesn't exist.",
        "rank": 0
    },
    "unregister_taxonomy_for_object_type": {
        "since": "3.7.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "unregister_taxonomy_for_object_type",
        "summary": "Remove an already registered taxonomy from an object type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Name of taxonomy object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "Name of the object type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if successful, false if not.",
        "rank": 0
    },
    "unregister_term_meta": {
        "since": "4.9.8",
        "group": "Taxonomy",
        "type": "efct",
        "name": "unregister_term_meta",
        "summary": "Unregisters a meta key for terms.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy the meta key is currently registered for. Pass an empty string if the meta key is registered across all existing taxonomies.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "The meta key to unregister.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false if the meta key was not previously registered.",
        "rank": 0
    },
    "unregister_widget": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "unregister_widget",
        "summary": "Unregisters a widget.",
        "description": "<p>Unregisters a WP_Widget widget. Useful for un-registering default widgets. Run within a function hooked to the {@see 'widgets_init'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget": {
                "label": "widget",
                "description": "Either the name of a WP_Widget subclass or an instance of a WP_Widget subclass.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "unstick_post": {
        "since": "2.7.0",
        "group": "Post",
        "type": "efct",
        "name": "unstick_post",
        "summary": "Un-stick a post.",
        "description": "<p>Sticky posts should be displayed at the top of the front page.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "untrailingslashit": {
        "since": "2.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "untrailingslashit",
        "summary": "Removes trailing forward slashes and backslashes if they exist.",
        "description": "<p>The primary use of this is for paths and thus should be used for paths. It is not restricted to paths and offers no specific path support.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "What to remove the trailing slashes from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String without the trailing slashes.",
        "rank": 0
    },
    "unzip_file": {
        "since": "2.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "unzip_file",
        "summary": "Unzips a specified ZIP file to a location on the filesystem via the WordPress Filesystem Abstraction.",
        "description": "<p>Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present.<\/p> <p>Attempts to increase the PHP memory limit to 256M before uncompressing. However, the most memory required shouldn't be much larger than the archive itself.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Full path and filename of ZIP archive.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "to": {
                "label": "to",
                "description": "Full path on the filesystem to extract archive to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "True on success, WP_Error on failure.",
        "rank": 0
    },
    "update_archived": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "update_archived",
        "summary": "Update the 'archived' status of a particular blog.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The blog id",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "archived": {
                "label": "archived",
                "description": "The new status",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "$archived",
        "rank": 0
    },
    "update_attached_file": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "update_attached_file",
        "summary": "Update attachment file path based on attachment ID.",
        "description": "<p>Used to update the file path of the attachment, which uses post meta name '_wp_attached_file' to store the path of the attachment.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "file": {
                "label": "file",
                "description": "File path for the attachment.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "update_blog_details": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "update_blog_details",
        "summary": "Update the details for a blog. Updates the blogs table for a given blog id.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "Blog ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "details": {
                "label": "details",
                "description": "Array of details keyed by blogs table field names.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if update succeeds, false otherwise.",
        "rank": 0
    },
    "update_blog_option": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "update_blog_option",
        "summary": "Update an option for a particular blog.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The blog id.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "The option key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The option value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "update_blog_public": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "update_blog_public",
        "summary": "Update this blog's 'public' setting in the global blogs table.",
        "description": "<p>Public blogs have a setting of 1, private blogs are 0.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "old_value": {
                "label": "old_value",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The new public value",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_blog_status": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_blog_status",
        "summary": "Update a blog details field.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "BLog ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "pref": {
                "label": "pref",
                "description": "A field name",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Value for $pref",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "",
                "type": "null",
                "types": [
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "$value",
        "rank": 0
    },
    "update_comment_cache": {
        "since": "2.3.0",
        "group": "Comment",
        "type": "efct",
        "name": "update_comment_cache",
        "summary": "Updates the comment cache of given comments.",
        "description": "<p>Will add the comments in $comments to the cache. If comment ID already exists in the comment cache then it will not be updated. The comment is added to the cache using the comment group with the key using the ID of the comments.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comments": {
                "label": "comments",
                "description": "Array of comment objects",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "update_meta_cache": {
                "label": "update_meta_cache",
                "description": "Whether to update commentmeta cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_comment_meta": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "update_comment_meta",
        "summary": "Update comment meta field based on comment ID.",
        "description": "<p>Use the $prev_value parameter to differentiate between meta fields with the same key and comment ID.<\/p> <p>If the meta field for the comment does not exist, it will be added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "Previous value to check before removing.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "Meta ID if the key didn't exist, true on successful update, false on failure.",
        "rank": 0
    },
    "update_core": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_core",
        "summary": "Upgrades the core of WordPress.",
        "description": "<p>This will create a .maintenance file at the base of the WordPress directory to ensure that people can not access the web site, when the files are being copied to their locations.<\/p> <p>The files in the $_old_files list will be removed and the new files copied from the zip file after the database is upgraded.<\/p> <p>The files in the $_new_bundled_files list will be added to the installation if the version is greater than or equal to the old version being upgraded.<\/p> <p>The steps for the upgrader for after the new release is downloaded and unzipped is:<\/p> <li>Test unzipped location for select files to ensure that unzipped worked.<\/li> <li>Create the .maintenance file in current WordPress base.<\/li> <li>Copy new WordPress directory over old WordPress files.<\/li> <li>Upgrade WordPress to new version. 4.1. Copy all files\/folders other than wp-content 4.2. Copy any language files to WP_LANG_DIR (which may differ from WP_CONTENT_DIR 4.3. Copy any new bundled themes\/plugins to their respective locations<\/li> <li>Delete new WordPress directory path.<\/li> <li>Delete .maintenance file.<\/li> <li>Remove old files.<\/li> <li>Delete 'update_core' option.<\/li> <p>There are several areas of failure. For instance if PHP times out before step 6, then you will not be able to access any portion of your site. Also, since the upgrade will not continue where it left off, you will not be able to automatically remove old files and remove the 'update_core' option. This isn't that bad.<\/p> <p>If the copy of the new WordPress over the old fails, then the worse is that the new WordPress directory will remain.<\/p> <p>If it is assumed that every file will be copied over, including plugins and themes, then if you edit the default theme, you should rename it, so that your changes remain.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "from": {
                "label": "from",
                "description": "New release unzipped path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "to": {
                "label": "to",
                "description": "Path to old WordPress installation.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "null"
        ],
        "return_description": "WP_Error on failure, null on success.",
        "rank": 0
    },
    "update_gallery_tab": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_gallery_tab",
        "summary": "Adds the gallery tab back to the tabs array if post has image attachments",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tabs": {
                "label": "tabs",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$tabs with gallery if post has image attachment",
        "rank": 0
    },
    "update_home_siteurl": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_home_siteurl",
        "summary": "Flushes rewrite rules if siteurl, home or page_on_front changed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "old_value": {
                "label": "old_value",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_meta": {
        "since": "1.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_meta",
        "summary": "Update post meta data by meta ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_id": {
                "label": "meta_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Expect Slashed",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Expect Slashed",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "update_meta_cache": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "efct",
        "name": "update_meta_cache",
        "summary": "Update the metadata cache for the specified objects.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_ids": {
                "label": "object_ids",
                "description": "Array or comma delimited list of object IDs to update cache for",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Metadata cache for the specified objects, or false on failure.",
        "rank": 0
    },
    "update_metadata": {
        "since": "2.9.0",
        "group": "Meta",
        "type": "efct",
        "name": "update_metadata",
        "summary": "Update metadata for the specified object. If no value already exists for the specified object ID and metadata key, the metadata will be added.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_id": {
                "label": "object_id",
                "description": "ID of the object metadata is for",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "If specified, only update existing metadata entries with the specified value. Otherwise, update all entries.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "The new meta field ID if a field with the given key didn't exist and was                  therefore added, true on successful update, false on failure.",
        "rank": 0
    },
    "update_metadata_by_mid": {
        "since": "3.3.0",
        "group": "Meta",
        "type": "efct",
        "name": "update_metadata_by_mid",
        "summary": "Update meta data by meta ID",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "meta_type": {
                "label": "meta_type",
                "description": "Type of object metadata is for (e.g., comment, post, term, or user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_id": {
                "label": "meta_id",
                "description": "ID for a specific meta row",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "you can provide a meta key to update it",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on successful update, false on failure.",
        "rank": 0
    },
    "update_nag": {
        "since": false,
        "group": "Administration",
        "type": "fct",
        "name": "update_nag",
        "summary": "",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "update_network_cache": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_network_cache",
        "summary": "Updates the network cache of given networks.",
        "description": "<p>Will add the networks in $networks to the cache. If network ID already exists in the network cache then it will not be updated. The network is added to the cache using the network group with the key using the ID of the networks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "networks": {
                "label": "networks",
                "description": "Array of network row objects.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_network_option": {
        "since": "4.4.0",
        "group": "Option",
        "type": "efct",
        "name": "update_network_option",
        "summary": "Update the value of a network option that was already added.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Can be null to default to the current network ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option": {
                "label": "option",
                "description": "Name of option. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if value was not updated and true if value was updated.",
        "rank": 0
    },
    "update_network_option_new_admin_email": {
        "since": "4.9.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_network_option_new_admin_email",
        "summary": "Send a confirmation request email when a change of network admin email address is attempted.",
        "description": "<p>The new network admin address will not become active until confirmed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "old_value": {
                "label": "old_value",
                "description": "The old network admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The proposed new network admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_object_term_cache": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "update_object_term_cache",
        "summary": "Updates the cache for the given term object ID(s).",
        "description": "<p>Note: Due to performance concerns, great care should be taken to only update term caches when necessary. Processing time can increase exponentially depending on both the number of passed term IDs and the number of taxonomies those terms belong to.<\/p> <p>Caches will only be updated for terms not already cached.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_ids": {
                "label": "object_ids",
                "description": "Comma-separated list or array of term object IDs.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "The taxonomy object type.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "void",
            "false"
        ],
        "return_description": "False if all of the terms in <code>$object_ids<\/code> are already cached.",
        "rank": 0
    },
    "update_option": {
        "since": "1.0.0",
        "group": "Option",
        "type": "efct",
        "name": "update_option",
        "summary": "Update the value of an option that was already added.",
        "description": "<p>You do not need to serialize values. If the value needs to be serialized, then it will be serialized before it is inserted into the database. Remember, resources can not be serialized or added as an option.<\/p> <p>If the option does not exist, then the option will be added with the option value, with an $autoload value of 'yes'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Option name. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "autoload": {
                "label": "autoload",
                "description": "Whether to load the option when WordPress starts up. For existing options, $autoload can only be updated using update_option() if $value is also changed. Accepts 'yes'|true to enable or 'no'|false to disable. For non-existent options, the default value is 'yes'.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if value was not updated and true if value was updated.",
        "rank": 0
    },
    "update_option_new_admin_email": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_option_new_admin_email",
        "summary": "Send a confirmation request email when a change of site admin email address is attempted.",
        "description": "<p>The new site admin address will not become active until confirmed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "old_value": {
                "label": "old_value",
                "description": "The old site admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The proposed new site admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_post_cache": {
        "since": "1.5.1",
        "group": "Post",
        "type": "efct",
        "name": "update_post_cache",
        "summary": "Updates posts in cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "posts": {
                "label": "posts",
                "description": "Array of post objects (passed by reference).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_post_caches": {
        "since": "1.5.0",
        "group": "Post",
        "type": "efct",
        "name": "update_post_caches",
        "summary": "Call major cache updating functions for list of Post objects.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "posts": {
                "label": "posts",
                "description": "Array of Post objects",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "update_term_cache": {
                "label": "update_term_cache",
                "description": "Whether to update the term cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "update_meta_cache": {
                "label": "update_meta_cache",
                "description": "Whether to update the meta cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_post_meta": {
        "since": "1.5.0",
        "group": "Post",
        "type": "efct",
        "name": "update_post_meta",
        "summary": "Updates a post meta field based on the given post ID.",
        "description": "<p>Use the $prev_value parameter to differentiate between meta fields with the same key and post ID.<\/p> <p>If the meta field for the post does not exist, it will be added and its ID returned.<\/p> <p>Can be used in place of add_post_meta().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "Previous value to check before updating.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "The new meta field ID if a field with the given key didn't exist and was                  therefore added, true on successful update, false on failure.",
        "rank": 0
    },
    "update_post_thumbnail_cache": {
        "since": "3.2.0",
        "group": "Template",
        "type": "efct",
        "name": "update_post_thumbnail_cache",
        "summary": "Update cache for thumbnails in the current loop.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_query": {
                "label": "wp_query",
                "description": "A WP_Query instance. Defaults to the $wp_query global.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_postmeta_cache": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "update_postmeta_cache",
        "summary": "Updates metadata cache for list of post IDs.",
        "description": "<p>Performs SQL query to retrieve the metadata for the post IDs and updates the metadata cache for the posts. Therefore, the functions, which call this function, do not need to perform SQL queries on their own.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_ids": {
                "label": "post_ids",
                "description": "List of post IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Returns false if there is nothing to update or an array                     of metadata.",
        "rank": 0
    },
    "update_posts_count": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "update_posts_count",
        "summary": "Update a blog's post count.",
        "description": "<p>WordPress MS stores a blog's post count as an option so as to avoid extraneous COUNTs when a blog's details are fetched with get_site(). This function is called when posts are published or unpublished to make sure the count stays current.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_recently_edited": {
        "since": "1.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "update_recently_edited",
        "summary": "Update the \"recently-edited\" file for the plugin or theme editor.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_site_cache": {
        "since": "4.6.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_site_cache",
        "summary": "Updates sites in cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sites": {
                "label": "sites",
                "description": "Array of site objects.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "update_meta_cache": {
                "label": "update_meta_cache",
                "description": "Whether to update site meta cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_site_meta": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_site_meta",
        "summary": "Updates metadata for a site.",
        "description": "<p>Use the $prev_value parameter to differentiate between meta fields with the same key and site ID.<\/p> <p>If the meta field for the site does not exist, it will be added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value. Must be serializable if non-scalar.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "Previous value to check before removing.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "Meta ID if the key didn't exist, true on successful update,                  false on failure.",
        "rank": 0
    },
    "update_site_option": {
        "since": "2.8.0",
        "group": "Option",
        "type": "efct",
        "name": "update_site_option",
        "summary": "Update the value of an option that was already added for the current network.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Name of option. Expected to not be SQL-escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "Option value. Expected to not be SQL-escaped.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if value was not updated. True if value was updated.",
        "rank": 0
    },
    "update_sitemeta_cache": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_sitemeta_cache",
        "summary": "Updates metadata cache for list of site IDs.",
        "description": "<p>Performs SQL query to retrieve all metadata for the sites matching $site_ids and stores them in the cache. Subsequent calls to get_site_meta() will not need to query the database.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_ids": {
                "label": "site_ids",
                "description": "List of site IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Returns false if there is nothing to update. Returns an array of metadata on success.",
        "rank": 0
    },
    "update_term_cache": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "update_term_cache",
        "summary": "Updates Terms to Taxonomy in cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "List of term objects to change.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Update Term to this taxonomy in cache.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "update_term_meta": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "update_term_meta",
        "summary": "Updates term metadata.",
        "description": "<p>Use the $prev_value parameter to differentiate between meta fields with the same key and term ID.<\/p> <p>If the meta field for the term does not exist, it will be added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "Previous value to check before removing.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error",
            "bool"
        ],
        "return_description": "Meta ID if the key didn't previously exist. True on successful update.                           WP_Error when term_id is ambiguous between taxonomies. False on failure.",
        "rank": 0
    },
    "update_termmeta_cache": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "update_termmeta_cache",
        "summary": "Updates metadata cache for list of term IDs.",
        "description": "<p>Performs SQL query to retrieve all metadata for the terms matching $term_ids and stores them in the cache. Subsequent calls to get_term_meta() will not need to query the database.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_ids": {
                "label": "term_ids",
                "description": "List of term IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Returns false if there is nothing to update. Returns an array of metadata on success.",
        "rank": 0
    },
    "update_user_caches": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "update_user_caches",
        "summary": "Update all user caches",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "User object to be cached",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "Returns false on failure.",
        "rank": 0
    },
    "update_user_meta": {
        "since": "3.0.0",
        "group": "Users",
        "type": "efct",
        "name": "update_user_meta",
        "summary": "Update user meta field based on user ID.",
        "description": "<p>Use the $prev_value parameter to differentiate between meta fields with the same key and user ID.<\/p> <p>If the meta field for the user does not exist, it will be added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "Metadata key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta_value": {
                "label": "meta_value",
                "description": "Metadata value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "prev_value": {
                "label": "prev_value",
                "description": "Previous value to check before removing.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "Meta ID if the key didn't exist, true on successful update, false on failure.",
        "rank": 0
    },
    "update_user_option": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "update_user_option",
        "summary": "Update user option with global blog capability.",
        "description": "<p>User options are just like user metadata except that they have support for global blog options. If the 'global' parameter is false, which it is by default it will prepend the WordPress table prefix to the option name.<\/p> <p>Deletes the user option if $newvalue is empty.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "User option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "newvalue": {
                "label": "newvalue",
                "description": "User option value.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "global": {
                "label": "global",
                "description": "Whether option name is global or blog specific. Default false (blog specific).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "User meta ID if the option didn't exist, true on successful update,                  false on failure.",
        "rank": 0
    },
    "update_user_status": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "update_user_status",
        "summary": "Update the status of a user in the database.",
        "description": "<p>Used in core to mark a user as spam or &quot;ham&quot; (not spam) in Multisite.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The user ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "pref": {
                "label": "pref",
                "description": "The column in the wp_users table to update the user's status in (presumably user_status, spam, or deleted).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The new status for the user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Deprecated as of 3.0.2 and should not be used.",
                "type": "null",
                "types": [
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The initially passed $value.",
        "rank": 0
    },
    "upload_is_file_too_big": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "upload_is_file_too_big",
        "summary": "Check whether an upload is too big.",
        "description": "",
        "inputs": {
            "upload": {
                "label": "upload",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "If the upload is under the size limit, $upload is returned. Otherwise returns an error message.",
        "rank": 0
    },
    "upload_is_user_over_quota": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "upload_is_user_over_quota",
        "summary": "Check whether a site has used its allotted upload space.",
        "description": "",
        "inputs": {
            "echo": {
                "label": "echo",
                "description": "If $echo is set and the quota is exceeded, a warning message is echoed. Default is true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if user is over upload space quota, otherwise false.",
        "rank": 0
    },
    "upload_size_limit_filter": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "upload_size_limit_filter",
        "summary": "Filters the maximum upload file size allowed, in bytes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Upload size limit in bytes.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Upload size limit in bytes.",
        "rank": 0
    },
    "upload_space_setting": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "upload_space_setting",
        "summary": "Displays the site upload space quota setting form on the Edit Site Settings screen.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The ID of the site to display the setting for.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "url_shorten": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "url_shorten",
        "summary": "Shorten a URL, to be used as link text.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL to shorten.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "length": {
                "label": "length",
                "description": "Maximum length of the shortened URL. Default 35 characters.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "35",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Shortened URL.",
        "rank": 0
    },
    "url_to_postid": {
        "since": "1.0.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "url_to_postid",
        "summary": "Examine a URL and try to determine the post ID it represents.",
        "description": "<p>Checks are supposedly from the hosted site blog.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Permalink to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Post ID, or 0 on failure.",
        "rank": 0
    },
    "urldecode_deep": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "urldecode_deep",
        "summary": "Navigates through an array, object, or scalar, and decodes URL-encoded values",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The array or string to be decoded.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "$value The decoded value.",
        "rank": 0
    },
    "urlencode_deep": {
        "since": "2.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "urlencode_deep",
        "summary": "Navigates through an array, object, or scalar, and encodes the values to be used in a URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "The array or string to be encoded.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "$value The encoded value.",
        "rank": 0
    },
    "use_block_editor_for_post": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "use_block_editor_for_post",
        "summary": "Return whether the post can be edited in the block editor.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post can be edited in the block editor.",
        "rank": 0
    },
    "use_block_editor_for_post_type": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "use_block_editor_for_post_type",
        "summary": "Return whether a post type is compatible with the block editor.",
        "description": "<p>The block editor depends on the REST API, and if the post type is not shown in the REST API, then it won't work with the block editor.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_type": {
                "label": "post_type",
                "description": "The post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the post type can be edited with the block editor.",
        "rank": 0
    },
    "use_ssl_preference": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "use_ssl_preference",
        "summary": "Optional SSL preference that can be turned on by hooking to the 'personal_options' action.",
        "description": "<p>See the {@see 'personal_options'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "User data object.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "user_admin_url": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "user_admin_url",
        "summary": "Retrieves the URL to the admin area for the current user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path relative to the admin URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Admin URL link with optional path appended.",
        "rank": 0
    },
    "user_can": {
        "since": "3.1.0",
        "group": "Users",
        "type": "fct",
        "name": "user_can",
        "summary": "Whether a particular user has a specific capability.",
        "description": "",
        "inputs": {
            "user": {
                "label": "user",
                "description": "User ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "capability": {
                "label": "capability",
                "description": "Capability name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the user has the given capability.",
        "rank": 0
    },
    "user_can_richedit": {
        "since": "2.0.0",
        "group": "Template",
        "type": "fct",
        "name": "user_can_richedit",
        "summary": "Whether the user can access the visual editor.",
        "description": "<p>Checks if the user can access the visual editor and that it's supported by the user's browser.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the user can access the visual editor, false otherwise.",
        "rank": 0
    },
    "user_trailingslashit": {
        "since": "2.2.0",
        "group": "Template",
        "type": "efct",
        "name": "user_trailingslashit",
        "summary": "Retrieves a trailing-slashed string if the site is set for adding trailing slashes.",
        "description": "<p>Conditionally adds a trailing slash if the permalink structure has a trailing slash, strips the trailing slash if not. The string is passed through the {@see 'user_trailingslashit'} filter. Will remove trailing slash from string, if site is not set to have them.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "URL with or without a trailing slash.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "type_of_url": {
                "label": "type_of_url",
                "description": "The type of URL being considered (e.g. single, category, etc) for use in the filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The URL with the trailing slash appended or stripped.",
        "rank": 0
    },
    "username_exists": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "username_exists",
        "summary": "Determines whether the given username exists.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "username": {
                "label": "username",
                "description": "Username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "The user's ID on success, and false on failure.",
        "rank": 0
    },
    "users_can_register_signup_filter": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "fct",
        "name": "users_can_register_signup_filter",
        "summary": "Check whether users can self-register, based on Network settings.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "utf8_uri_encode": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "utf8_uri_encode",
        "summary": "Encode the Unicode values to be used in the URI.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "utf8_string": {
                "label": "utf8_string",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "length": {
                "label": "length",
                "description": "Max length of the string",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String with Unicode encoded for URI.",
        "rank": 0
    },
    "valid_unicode": {
        "since": "2.7.0",
        "group": "External",
        "type": "efct",
        "name": "valid_unicode",
        "summary": "Determines if a Unicode codepoint is valid.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "i": {
                "label": "i",
                "description": "Unicode codepoint.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether or not the codepoint is a valid Unicode codepoint.",
        "rank": 0
    },
    "validate_active_plugins": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "validate_active_plugins",
        "summary": "Validate active plugins",
        "description": "<p>Validate all active plugins, deactivates invalid and returns an array of deactivated ones.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "invalid plugins, plugin as key, error as value",
        "rank": 0
    },
    "validate_another_blog_signup": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "fct",
        "name": "validate_another_blog_signup",
        "summary": "Validate a new site signup for an existing user.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "bool"
        ],
        "return_description": "True if site signup was validated, false if error.                   The function halts all execution if the user is not logged in.",
        "rank": 0
    },
    "validate_blog_form": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "fct",
        "name": "validate_blog_form",
        "summary": "Validate the new site signup",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Contains the new site data and error messages.",
        "rank": 1
    },
    "validate_blog_signup": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "fct",
        "name": "validate_blog_signup",
        "summary": "Validate new site signup",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the site signup was validated, false if error",
        "rank": 0
    },
    "validate_current_theme": {
        "since": "1.5.0",
        "group": "Theme",
        "type": "fct",
        "name": "validate_current_theme",
        "summary": "Checks that current theme files 'index.php' and 'style.css' exists.",
        "description": "<p>Does not initially check the default theme, which is the fallback and should always exist. But if it doesn't exist, it'll fall back to the latest core default theme that does exist. Will switch theme to the fallback theme if current theme does not validate.<\/p> <p>You can use the {@see 'validate_current_theme'} filter to return false to disable this functionality.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "validate_file": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "validate_file",
        "summary": "Validates a file name and path against an allowed set of rules.",
        "description": "<p>A return value of 1 means the file path contains directory traversal.<\/p> <p>A return value of 2 means the file path contains a Windows drive path.<\/p> <p>A return value of 3 means the file is not in the allowed files list.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "File path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_files": {
                "label": "allowed_files",
                "description": "List of allowed files.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "0 means nothing is wrong, greater than 0 means something was wrong.",
        "rank": 0
    },
    "validate_file_to_edit": {
        "since": "1.5.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "validate_file_to_edit",
        "summary": "Makes sure that the file that was requested to be edited is allowed to be edited.",
        "description": "<p>Function will die if you are not allowed to edit the file.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "File the user is attempting to edit.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_files": {
                "label": "allowed_files",
                "description": "Array of allowed files to edit. $file must match an entry exactly.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Returns the file name on success, dies on failure.",
        "rank": 0
    },
    "validate_plugin": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "validate_plugin",
        "summary": "Validate the plugin path.",
        "description": "<p>Checks that the main plugin file exists and is a valid plugin. See validate_file().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "int"
        ],
        "return_description": "0 on success, WP_Error on failure.",
        "rank": 0
    },
    "validate_user_form": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "fct",
        "name": "validate_user_form",
        "summary": "Validate user signup name and email",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Contains username, email, and error messages.",
        "rank": 1
    },
    "validate_user_signup": {
        "since": "MU (3.0.0)",
        "group": "WordPress",
        "type": "fct",
        "name": "validate_user_signup",
        "summary": "Validate the new user signup",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if new user signup was validated, false if error",
        "rank": 0
    },
    "validate_username": {
        "since": "2.0.1",
        "group": "Users",
        "type": "efct",
        "name": "validate_username",
        "summary": "Checks whether a username is valid.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "username": {
                "label": "username",
                "description": "Username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether username given is valid",
        "rank": 0
    },
    "verify_file_md5": {
        "since": "3.7.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "verify_file_md5",
        "summary": "Calculates and compares the MD5 of a file to its expected value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "The filename to check the MD5 of.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "expected_md5": {
                "label": "expected_md5",
                "description": "The expected MD5 of the file, either a base64-encoded raw md5, or a hex-encoded md5.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, false when the MD5 format is unknown\/unexpected,                       WP_Error on failure.",
        "rank": 0
    },
    "walk_category_dropdown_tree": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "walk_category_dropdown_tree",
        "summary": "Retrieve HTML dropdown (select) content for category list.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "walk_category_tree": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "walk_category_tree",
        "summary": "Retrieve HTML list content for category list.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "walk_nav_menu_tree": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "walk_nav_menu_tree",
        "summary": "Retrieve the HTML list content for nav menu items.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "items": {
                "label": "items",
                "description": "The menu items, sorted by each menu item's menu order.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "depth": {
                "label": "depth",
                "description": "Depth of the item in reference to parents.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "r": {
                "label": "r",
                "description": "An object containing wp_nav_menu() arguments.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTML list content for the menu items.",
        "rank": 0
    },
    "walk_page_dropdown_tree": {
        "since": "2.1.0",
        "group": "Template",
        "type": "fct",
        "name": "walk_page_dropdown_tree",
        "summary": "Retrieve HTML dropdown (select) content for page list.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "walk_page_tree": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "walk_page_tree",
        "summary": "Retrieve HTML list content for page list.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pages": {
                "label": "pages",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "depth": {
                "label": "depth",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "current_page": {
                "label": "current_page",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "r": {
                "label": "r",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "weblog_ping": {
        "since": "1.2.0",
        "group": "Comment",
        "type": "efct",
        "name": "weblog_ping",
        "summary": "Send a pingback.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "server": {
                "label": "server",
                "description": "Host of blog to connect to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path to send the ping.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "welcome_user_msg_filter": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "welcome_user_msg_filter",
        "summary": "Ensure that the welcome message is not empty. Currently unused.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "win_is_writable": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "win_is_writable",
        "summary": "Workaround for Windows bug in is_writable() function",
        "description": "<p>PHP has issues with Windows ACL's for determine if a directory is writable or not, this works around them by checking the ability to open files rather than relying upon PHP to interprate the OS ACL.<\/p>",
        "inputs": {
            "path": {
                "label": "path",
                "description": "Windows path to check for write-ability.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the path is writable.",
        "rank": 0
    },
    "wp": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp",
        "summary": "Set up the WordPress query.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "query_vars": {
                "label": "query_vars",
                "description": "Default WP_Query arguments.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_add_dashboard_widget": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_add_dashboard_widget",
        "summary": "Adds a new dashboard widget.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "Widget ID (used in the 'id' attribute for the widget).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "widget_name": {
                "label": "widget_name",
                "description": "Title of the widget.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "Function that fills the widget with the desired content. The function should echo its output.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "control_callback": {
                "label": "control_callback",
                "description": "Function that outputs controls for the widget.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "null",
                "required": false
            },
            "callback_args": {
                "label": "callback_args",
                "description": "Data that should be set as the $args property of the widget array (which is the second parameter passed to your callback).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_add_id3_tag_data": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_add_id3_tag_data",
        "summary": "Parse ID3v2, ID3v1, and getID3 comments to extract usable data",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "metadata": {
                "label": "metadata",
                "description": "An existing array with data",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "Data supplied by ID3 tags",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_add_inline_script": {
        "since": "4.5.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_add_inline_script",
        "summary": "Adds extra code to a registered script.",
        "description": "<p>Code will only be added if the script is already in the queue. Accepts a string $data containing the Code. If two or more code blocks are added to the same script $handle, they will be printed in the order they were added, i.e. the latter added code can redeclare the previous.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script to add the inline script to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "String containing the javascript to be added.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "position": {
                "label": "position",
                "description": "Whether to add the inline script before the handle or after.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'after'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_add_inline_style": {
        "since": "3.3.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_add_inline_style",
        "summary": "Add extra CSS styles to a registered stylesheet.",
        "description": "<p>Styles will only be added if the stylesheet is already in the queue. Accepts a string $data containing the CSS. If two or more CSS code blocks are added to the same stylesheet $handle, they will be printed in the order they were added, i.e. the latter added styles can redeclare the previous.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet to add the extra styles to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "String containing the CSS styles to be added.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_add_object_terms": {
        "since": "3.6.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_add_object_terms",
        "summary": "Add term(s) associated with a given object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_id": {
                "label": "object_id",
                "description": "The ID of the object to which the terms will be added.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "terms": {
                "label": "terms",
                "description": "The slug(s) or ID(s) of the term(s) to add.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Term taxonomy IDs of the affected terms.",
        "rank": 0
    },
    "wp_add_post_tags": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_add_post_tags",
        "summary": "Add tags to a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "tags": {
                "label": "tags",
                "description": "An array of tags to set for the post, or a string of tags separated by commas.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of affected term IDs. WP_Error or false on failure.",
        "rank": 0
    },
    "wp_add_privacy_policy_content": {
        "since": "4.9.6",
        "group": "Administration",
        "type": "efct",
        "name": "wp_add_privacy_policy_content",
        "summary": "Helper function for adding content to the Privacy Policy Guide.",
        "description": "<p>Plugins and themes should suggest text for inclusion in the site's privacy policy. The suggested text should contain information about any functionality that affects user privacy, and will be shown on the Privacy Policy Guide screen.<\/p> <p>A plugin or theme can use this function multiple times as long as it will help to better present the suggested policy content. For example modular plugins such as WooCommerse or Jetpack can add or remove suggested content depending on the modules\/extensions that are enabled. For more information see the Plugin Handbook: https:\/\/developer.wordpress.org\/plugins\/privacy\/suggesting-text-for-the-site-privacy-policy\/.<\/p> <p>Intended for use with the 'admin_init' action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "plugin_name": {
                "label": "plugin_name",
                "description": "The name of the plugin or theme that is suggesting content for the site's privacy policy.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "policy_text": {
                "label": "policy_text",
                "description": "The suggested content for inclusion in the policy.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_add_secondary_groups": {
        "since": "3.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_add_secondary_groups",
        "summary": "Add secondary menus.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_appearance_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_appearance_menu",
        "summary": "Add appearance submenu items to the \"Site Name\" menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_comments_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_comments_menu",
        "summary": "Add edit comments link with awaiting moderation count bubble.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_customize_menu": {
        "since": "4.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_customize_menu",
        "summary": "Adds the \"Customize\" link to the Toolbar.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "WP_Admin_Bar instance.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_edit_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_edit_menu",
        "summary": "Provide an edit link for posts and terms.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_my_account_item": {
        "since": "3.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_my_account_item",
        "summary": "Add the \"My Account\" item.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_my_account_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_my_account_menu",
        "summary": "Add the \"My Account\" submenu items.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_my_sites_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_my_sites_menu",
        "summary": "Add the \"My Sites\/[Site Name]\" menu and all submenus.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_new_content_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_new_content_menu",
        "summary": "Add \"Add New\" menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_search_menu": {
        "since": "3.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_search_menu",
        "summary": "Add search form.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_shortlink_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_shortlink_menu",
        "summary": "Provide a shortlink.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_sidebar_toggle": {
        "since": "3.8.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_sidebar_toggle",
        "summary": "Add the sidebar toggle button.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_site_menu": {
        "since": "3.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_site_menu",
        "summary": "Add the \"Site Name\" menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_updates_menu": {
        "since": "3.1.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_updates_menu",
        "summary": "Provide an update link if theme\/plugin\/core updates are available.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_bar_wp_menu": {
        "since": "3.3.0",
        "group": "Toolbar",
        "type": "efct",
        "name": "wp_admin_bar_wp_menu",
        "summary": "Add the WordPress logo menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wp_admin_bar": {
                "label": "wp_admin_bar",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_css": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_admin_css",
        "summary": "Enqueues or directly prints a stylesheet link to the specified CSS file.",
        "description": "<p>&quot;Intelligently&quot; decides to enqueue or to print the CSS file. If the {@see 'wp_print_styles'} action has <em>not<\/em> yet been called, the CSS file will be enqueued. If the {@see 'wp_print_styles'} action has been called, the CSS link will be printed. Printing may be forced by passing true as the $force_echo (second) parameter.<\/p> <p>For backward compatibility with WordPress 2.3 calling method: If the $file (first) parameter does not correspond to a registered CSS file, we assume $file is a file relative to wp-admin\/ without its &quot;.css&quot; extension. A stylesheet link to that generated URL is printed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Style handle name or file name (without &quot;.css&quot; extension) relative to wp-admin\/. Defaults to 'wp-admin'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'wp-admin'",
                "required": false
            },
            "force_echo": {
                "label": "force_echo",
                "description": "Force the stylesheet link to be printed rather than enqueued.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_css_color": {
        "since": "2.5.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_admin_css_color",
        "summary": "Registers an admin color scheme css file.",
        "description": "<p>Allows a plugin to register a new admin color scheme. For example:<\/p> wp_admin_css_color( 'classic', __( 'Classic' ), admin_url( \"css\/colors-classic.css\" ), array( '#07273E', '#14568A', '#D54E21', '#2683AE' ) );",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The unique key for this theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "The name of the theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The URL of the CSS file containing the color scheme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "colors": {
                "label": "colors",
                "description": "An array of CSS color definition strings which are used to give the user a feel for the theme.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "icons": {
                "label": "icons",
                "description": "CSS color definitions used to color any SVG icons. <ul><li><b>'base'<\/b><br\/><i>(string)<\/i> SVG icon base color.<\/li> <li><b>'focus'<\/b><br\/><i>(string)<\/i> SVG icon color on focus.<\/li> <li><b>'current'<\/b><br\/><i>(string)<\/i> SVG icon color of current admin menu link.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_admin_css_uri": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_admin_css_uri",
        "summary": "Displays the URL of a WordPress admin CSS file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "file relative to wp-admin\/ without its &quot;.css&quot; extension.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'wp-admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_add_link_category": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_add_link_category",
        "summary": "Ajax handler for adding a link category.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_add_user": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_add_user",
        "summary": "Ajax handler for adding a user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_delete_page": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_delete_page",
        "summary": "Ajax handler to delete a page.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_delete_post": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_delete_post",
        "summary": "Ajax handler for deleting a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_get_comments": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_get_comments",
        "summary": "Ajax handler for getting comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_replyto_comment": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_replyto_comment",
        "summary": "Ajax handler for replying to a comment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_trash_post": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_trash_post",
        "summary": "Ajax handler for sending a post to the trash.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_ajax_untrash_post": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_ajax_untrash_post",
        "summary": "Ajax handler to restore a post from the trash.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action to perform.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_allow_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_allow_comment",
        "summary": "Validates whether this comment is allowed to be made.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commentdata": {
                "label": "commentdata",
                "description": "Contains information on the comment.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "avoid_die": {
                "label": "avoid_die",
                "description": "When true, a disallowed comment will result in the function returning a WP_Error object, rather than executing wp_die().",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "string",
            "WP_Error"
        ],
        "return_description": "Allowed comments return the approval status (0|1|'spam').                             If <code>$avoid_die<\/code> is true, disallowed comments return a WP_Error.",
        "rank": 0
    },
    "wp_allowed_protocols": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_allowed_protocols",
        "summary": "Retrieve a list of protocols to allow in HTML attributes.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string[]",
                "label": "string[]"
            }
        },
        "return": [
            "string[]"
        ],
        "return_description": "Array of allowed protocols. Defaults to an array containing 'http', 'https',                  'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet',                  'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'. This covers                  all common link protocols, except for 'javascript' which should not be                  allowed for untrusted users.",
        "rank": 0
    },
    "wp_array_slice_assoc": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_array_slice_assoc",
        "summary": "Extract a slice of an array, given a list of keys.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "array": {
                "label": "array",
                "description": "The original array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "keys": {
                "label": "keys",
                "description": "The list of keys.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The array slice.",
        "rank": 0
    },
    "wp_attachment_is": {
        "since": "4.2.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_attachment_is",
        "summary": "Verifies an attachment is of a given type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Attachment type. Accepts 'image', 'audio', or 'video'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Attachment ID or object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if one of the accepted types, false otherwise.",
        "rank": 0
    },
    "wp_attachment_is_image": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_attachment_is_image",
        "summary": "Determines whether an attachment is an image.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Attachment ID or object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the attachment is an image.",
        "rank": 0
    },
    "wp_audio_shortcode": {
        "since": "3.6.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_audio_shortcode",
        "summary": "Builds the Audio shortcode output.",
        "description": "<p>This implements the functionality of the Audio Shortcode for displaying WordPress mp3s in a post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes of the audio shortcode. <ul><li><b>'src'<\/b><br\/><i>(string)<\/i> URL to the source of the audio file. Default empty.<\/li> <li><b>'loop'<\/b><br\/><i>(string)<\/i> The 'loop' attribute for the &lt;audio&gt; element. Default empty.<\/li> <li><b>'autoplay'<\/b><br\/><i>(string)<\/i> The 'autoplay' attribute for the &lt;audio&gt; element. Default empty.<\/li> <li><b>'preload'<\/b><br\/><i>(string)<\/i> The 'preload' attribute for the &lt;audio&gt; element. Default 'none'.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> The 'class' attribute for the &lt;audio&gt; element. Default 'wp-audio-shortcode'.<\/li> <li><b>'style'<\/b><br\/><i>(string)<\/i> The 'style' attribute for the &lt;audio&gt; element. Default 'width: 100%;'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "content": {
                "label": "content",
                "description": "Shortcode content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML content to display audio.",
        "rank": 0
    },
    "wp_auth_check": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_auth_check",
        "summary": "Check whether a user is still logged in, for the heartbeat.",
        "description": "<p>Send a result that shows a log-in box if the user is no longer logged in, or if their cookie is within the grace period.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$response The Heartbeat response with 'wp-auth-check' value set.",
        "rank": 0
    },
    "wp_authenticate": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_authenticate",
        "summary": "Authenticate a user, confirming the login credentials are valid.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "username": {
                "label": "username",
                "description": "User's username or email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "User's password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User object if the credentials are valid,                          otherwise WP_Error.",
        "rank": 0
    },
    "wp_authenticate_cookie": {
        "since": "2.8.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_authenticate_cookie",
        "summary": "Authenticate the user using the WordPress auth cookie.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "WP_User or WP_Error object from a previous callback. Default null.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed",
                    "null"
                ],
                "default": null,
                "required": true
            },
            "username": {
                "label": "username",
                "description": "Username. If not empty, cancels the cookie authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "Password. If not empty, cancels the cookie authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User on success, WP_Error on failure.",
        "rank": 0
    },
    "wp_authenticate_email_password": {
        "since": "4.5.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_authenticate_email_password",
        "summary": "Authenticates a user using the email and password.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "WP_User or WP_Error object if a previous callback failed authentication.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed",
                    "null"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "Email address for authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "Password for authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User on success, WP_Error on failure.",
        "rank": 0
    },
    "wp_authenticate_spam_check": {
        "since": "3.7.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_authenticate_spam_check",
        "summary": "For Multisite blogs, check if the authenticated user has been marked as a spammer, or if the user's primary blog has been marked as spam.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "WP_User or WP_Error object from a previous callback. Default null.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed",
                    "null"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User on success, WP_Error if the user is considered a spammer.",
        "rank": 0
    },
    "wp_authenticate_username_password": {
        "since": "2.8.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_authenticate_username_password",
        "summary": "Authenticate a user, confirming the username and password are valid.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "WP_User or WP_Error object from a previous callback. Default null.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "mixed",
                    "null"
                ],
                "default": null,
                "required": true
            },
            "username": {
                "label": "username",
                "description": "Username for authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "Password for authentication.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User on success, WP_Error on failure.",
        "rank": 0
    },
    "wp_autosave": {
        "since": "3.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_autosave",
        "summary": "Save a post submitted with XHR",
        "description": "<p>Intended for use with heartbeat and autosave.js<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "Associative array of the submitted post data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The value 0 or WP_Error on failure. The saved post ID on success.               The ID can be the draft post_id or the autosave revision post_id.",
        "rank": 0
    },
    "wp_basename": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_basename",
        "summary": "i18n friendly version of basename()",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "A path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "suffix": {
                "label": "suffix",
                "description": "If the filename ends in suffix this will also be cut off.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_blacklist_check": {
        "since": "1.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_blacklist_check",
        "summary": "Does comment contain blacklisted characters or words.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "author": {
                "label": "author",
                "description": "The author of the comment",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "The email of the comment",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The url used in the comment",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "comment": {
                "label": "comment",
                "description": "The comment content",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_ip": {
                "label": "user_ip",
                "description": "The comment author's IP address",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_agent": {
                "label": "user_agent",
                "description": "The author's browser user agent",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if comment contains blacklisted content, false if comment does not",
        "rank": 0
    },
    "wp_cache_add": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_add",
        "summary": "Adds data to the cache, if the cache key doesn't already exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The cache key to use for retrieval later.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The data to add to the cache.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "group": {
                "label": "group",
                "description": "The group to add the cache to. Enables the same key to be used across groups.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "expire": {
                "label": "expire",
                "description": "When the cache data should expire, in seconds. Default 0 (no expiration).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if cache key and group already exist, true on success.",
        "rank": 0
    },
    "wp_cache_add_global_groups": {
        "since": "2.6.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_add_global_groups",
        "summary": "Adds a group or set of groups to the list of global groups.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "groups": {
                "label": "groups",
                "description": "A group or an array of groups to add.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_cache_add_non_persistent_groups": {
        "since": "2.6.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_add_non_persistent_groups",
        "summary": "Adds a group or set of groups to the list of non-persistent groups.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "groups": {
                "label": "groups",
                "description": "A group or an array of groups to add.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_cache_close": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "fct",
        "name": "wp_cache_close",
        "summary": "Closes the cache.",
        "description": "<p>This function has ceased to do anything since WordPress 2.5. The functionality was removed along with the rest of the persistent cache.<\/p> <p>This does not mean that plugins can't implement this function when they need to make sure that the cache is cleaned up after WordPress no longer needs it.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Always returns true.",
        "rank": 0
    },
    "wp_cache_decr": {
        "since": "3.3.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_decr",
        "summary": "Decrements numeric cache item's value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The cache key to decrement.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "offset": {
                "label": "offset",
                "description": "The amount by which to decrement the item's value.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "group": {
                "label": "group",
                "description": "The group the key is in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False on failure, the item's new value on success.",
        "rank": 0
    },
    "wp_cache_delete": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_delete",
        "summary": "Removes the cache contents matching key and group.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "What the contents in the cache are called.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "group": {
                "label": "group",
                "description": "Where the cache contents are grouped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on successful removal, false on failure.",
        "rank": 0
    },
    "wp_cache_flush": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "fct",
        "name": "wp_cache_flush",
        "summary": "Removes all cache items.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False on failure, true on success",
        "rank": 0
    },
    "wp_cache_get": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_get",
        "summary": "Retrieves the cache contents from the cache by key and group.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The key under which the cache contents are stored.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "group": {
                "label": "group",
                "description": "Where the cache contents are grouped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "force": {
                "label": "force",
                "description": "Whether to force an update of the local cache from the persistent cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "found": {
                "label": "found",
                "description": "Whether the key was found in the cache (passed by reference). Disambiguates a return of false, a storable value.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "mixed"
        ],
        "return_description": "False on failure to retrieve contents or the cache                    contents on success",
        "rank": 0
    },
    "wp_cache_get_last_changed": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_cache_get_last_changed",
        "summary": "Get last changed date for the specified cache group.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "group": {
                "label": "group",
                "description": "Where the cache contents are grouped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "$last_changed UNIX timestamp with microseconds representing when the group was last changed.",
        "rank": 0
    },
    "wp_cache_incr": {
        "since": "3.3.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_incr",
        "summary": "Increment numeric cache item's value",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The key for the cache contents that should be incremented.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "offset": {
                "label": "offset",
                "description": "The amount by which to increment the item's value.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "group": {
                "label": "group",
                "description": "The group the key is in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False on failure, the item's new value on success.",
        "rank": 0
    },
    "wp_cache_replace": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_replace",
        "summary": "Replaces the contents of the cache with new data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The key for the cache data that should be replaced.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The new data to store in the cache.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "group": {
                "label": "group",
                "description": "The group for the cache data that should be replaced.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "expire": {
                "label": "expire",
                "description": "When to expire the cache contents, in seconds. Default 0 (no expiration).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if original value does not exist, true if contents were replaced",
        "rank": 0
    },
    "wp_cache_set": {
        "since": "2.0.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_set",
        "summary": "Saves the data to the cache.",
        "description": "<p>Differs from wp_cache_add() and wp_cache_replace() in that it will always write data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The cache key to use for retrieval later.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The contents to store in the cache.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "group": {
                "label": "group",
                "description": "Where to group the cache contents. Enables the same key to be used across groups.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "expire": {
                "label": "expire",
                "description": "When to expire the cache contents, in seconds. Default 0 (no expiration).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False on failure, true on success",
        "rank": 0
    },
    "wp_cache_switch_to_blog": {
        "since": "3.5.0",
        "group": "Cache",
        "type": "efct",
        "name": "wp_cache_switch_to_blog",
        "summary": "Switches the internal blog ID.",
        "description": "<p>This changes the blog id used to create keys in blog specific groups.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_calculate_image_sizes": {
        "since": "4.4.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_calculate_image_sizes",
        "summary": "Creates a 'sizes' attribute value for an image.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size to retrieve. Accepts any valid image size, or an array of width and height values in pixels (in that order). Default 'medium'.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "image_src": {
                "label": "image_src",
                "description": "The URL to the image file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "image_meta": {
                "label": "image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID. Either $image_meta or $attachment_id is needed when using the image size name as argument for $size. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "A valid source size value for use in a 'sizes' attribute or false.",
        "rank": 0
    },
    "wp_calculate_image_srcset": {
        "since": "4.4.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_calculate_image_srcset",
        "summary": "A helper function to calculate the image sources to include in a 'srcset' attribute.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "size_array": {
                "label": "size_array",
                "description": "Array of width and height values in pixels (in that order).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "image_src": {
                "label": "image_src",
                "description": "The 'src' of the image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "image_meta": {
                "label": "image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "The image attachment ID to pass to the filter. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "The 'srcset' attribute value. False on error or when only one source exists.",
        "rank": 0
    },
    "wp_can_install_language_pack": {
        "since": "4.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_can_install_language_pack",
        "summary": "Check if WordPress has access to the filesystem without asking for credentials.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Returns true on success, false on failure.",
        "rank": 0
    },
    "wp_caption_input_textarea": {
        "since": "3.4.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_caption_input_textarea",
        "summary": "Output a textarea element for inputting an attachment caption.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "edit_post": {
                "label": "edit_post",
                "description": "Attachment WP_Post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML markup for the textarea element.",
        "rank": 0
    },
    "wp_category_checklist": {
        "since": "2.5.1",
        "group": "Administration",
        "type": "efct",
        "name": "wp_category_checklist",
        "summary": "Output an unordered list of checkbox input elements labeled with category names.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post to generate a categories checklist for. Default 0. $selected_cats must not be an array. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "descendants_and_self": {
                "label": "descendants_and_self",
                "description": "ID of the category to output along with its descendants. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "selected_cats": {
                "label": "selected_cats",
                "description": "Array of category IDs to mark as checked.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "popular_cats": {
                "label": "popular_cats",
                "description": "Array of category IDs to receive the &quot;popular-category&quot; class.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "walker": {
                "label": "walker",
                "description": "Walker object to use to build the output. Default is a Walker_Category_Checklist instance.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": "null",
                "required": false
            },
            "checked_ontop": {
                "label": "checked_ontop",
                "description": "Whether to move checked items out of the hierarchy and to the top of the list.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_check_browser_version": {
        "since": "3.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_check_browser_version",
        "summary": "Check if the user needs a browser update",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "False on failure, array of browser data on success.",
        "rank": 0
    },
    "wp_check_comment_data_max_lengths": {
        "since": "4.7.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_check_comment_data_max_lengths",
        "summary": "Compares the lengths of comment data against the maximum character limits.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_data": {
                "label": "comment_data",
                "description": "Array of arguments for inserting a comment.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "true"
        ],
        "return_description": "WP_Error when a comment field exceeds the limit,                       otherwise true.",
        "rank": 0
    },
    "wp_check_comment_flood": {
        "since": "4.7.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_check_comment_flood",
        "summary": "Checks whether comment flooding is occurring.",
        "description": "<p>Won't run, if current user can manage options, so to not block administrators.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "is_flood": {
                "label": "is_flood",
                "description": "Is a comment flooding occurring?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "ip": {
                "label": "ip",
                "description": "Comment author's IP address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "Comment author's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "date": {
                "label": "date",
                "description": "MySQL time string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "avoid_die": {
                "label": "avoid_die",
                "description": "When true, a disallowed comment will result in the function returning a WP_Error object, rather than executing wp_die().",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether comment flooding is occurring.",
        "rank": 0
    },
    "wp_check_filetype": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_check_filetype",
        "summary": "Retrieve the file type from the file name.",
        "description": "<p>You can optionally define the mime array, if needed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "File name or path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "mimes": {
                "label": "mimes",
                "description": "Key is the file extension with value as the mime type.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Values with extension first and mime type.",
        "rank": 0
    },
    "wp_check_filetype_and_ext": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_check_filetype_and_ext",
        "summary": "Attempt to determine the real file type of a file.",
        "description": "<p>If unable to, the file name extension will be used to determine type.<\/p> <p>If it's determined that the extension does not match the file's real type, then the &quot;proper_filename&quot; value will be set with a proper filename and extension.<\/p> <p>Currently this function only supports renaming images validated via wp_get_image_mime().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Full path to the file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "filename": {
                "label": "filename",
                "description": "The name of the file (may differ from $file due to $file being in a tmp directory).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "mimes": {
                "label": "mimes",
                "description": "Key is the file extension with value as the mime type.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Values for the extension, MIME, and either a corrected filename or false               if original $filename is valid.",
        "rank": 0
    },
    "wp_check_for_changed_dates": {
        "since": "4.9.3",
        "group": "Post",
        "type": "efct",
        "name": "wp_check_for_changed_dates",
        "summary": "Check for changed dates for published post objects and save the old date.",
        "description": "<p>The function is used when a post object of any type is updated, by comparing the current and previous post objects.<\/p> <p>If the date was changed and not already part of the old dates then it will be added to the post meta field ('_wp_old_date') for storing old dates for that post.<\/p> <p>The most logically usage of this function is redirecting changed post objects, so that those that linked to an changed post will be redirected to the new post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "The Post Object",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "post_before": {
                "label": "post_before",
                "description": "The Previous Post Object",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_check_for_changed_slugs": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_check_for_changed_slugs",
        "summary": "Check for changed slugs for published post objects and save the old slug.",
        "description": "<p>The function is used when a post object of any type is updated, by comparing the current and previous post objects.<\/p> <p>If the slug was changed and not already part of the old slugs then it will be added to the post meta field ('_wp_old_slug') for storing old slugs for that post.<\/p> <p>The most logically usage of this function is redirecting changed post objects, so that those that linked to an changed post will be redirected to the new post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "The Post Object",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "post_before": {
                "label": "post_before",
                "description": "The Previous Post Object",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_check_invalid_utf8": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_check_invalid_utf8",
        "summary": "Checks for invalid UTF8 in a string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "The text which is to be checked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "strip": {
                "label": "strip",
                "description": "Whether to attempt to strip out invalid UTF8. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The checked text.",
        "rank": 0
    },
    "wp_check_jsonp_callback": {
        "since": "4.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_check_jsonp_callback",
        "summary": "Checks that a JSONP callback is a valid JavaScript callback.",
        "description": "<p>Only allows alphanumeric characters and the dot character in callback function names. This helps to mitigate XSS attacks caused by directly outputting user input.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "callback": {
                "label": "callback",
                "description": "Supplied JSONP callback function.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if valid callback, otherwise false.",
        "rank": 0
    },
    "wp_check_locked_posts": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_check_locked_posts",
        "summary": "Check lock status for posts displayed on the Posts screen",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The $_POST data sent.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "screen_id": {
                "label": "screen_id",
                "description": "The screen id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The Heartbeat response.",
        "rank": 0
    },
    "wp_check_password": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_check_password",
        "summary": "Checks the plaintext password against the encrypted Password.",
        "description": "<p>Maintains compatibility between old version and the new cookie authentication protocol using PHPass library. The $hash parameter is the encrypted password and the function compares the plain text password when encrypted similarly against the already encrypted password to see if they match.<\/p> <p>For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "password": {
                "label": "password",
                "description": "Plaintext user's password",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "hash": {
                "label": "hash",
                "description": "Hash of the user's password to check against.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False, if the $password does not match the hashed password",
        "rank": 0
    },
    "wp_check_php_version": {
        "since": "5.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_check_php_version",
        "summary": "Checks if the user needs to update PHP.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "$response Array of PHP version data. False on failure.",
        "rank": 0
    },
    "wp_check_post_hierarchy_for_loops": {
        "since": "3.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_check_post_hierarchy_for_loops",
        "summary": "Check the given subset of the post hierarchy for hierarchy loops.",
        "description": "<p>Prevents loops from forming and breaks those that it finds. Attached to the {@see 'wp_insert_post_parent'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_parent": {
                "label": "post_parent",
                "description": "ID of the parent for the post we're checking.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_ID": {
                "label": "post_ID",
                "description": "ID of the post we're checking.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The new post_parent for the post, 0 otherwise.",
        "rank": 0
    },
    "wp_check_post_lock": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_check_post_lock",
        "summary": "Check to see if the post is currently being edited by another user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "ID of the post to check for editing.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "ID of the user with lock. False if the post does not exist, post is not locked,                   the user with lock does not exist, or the post is locked by current user.",
        "rank": 0
    },
    "wp_check_site_meta_support_prefilter": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_check_site_meta_support_prefilter",
        "summary": "Aborts calls to site meta if it is not supported.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "check": {
                "label": "check",
                "description": "Skip-value for whether to proceed site meta function execution.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Original value of $check, or false if site meta is not supported.",
        "rank": 0
    },
    "wp_check_term_hierarchy_for_loops": {
        "since": "3.1.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_check_term_hierarchy_for_loops",
        "summary": "Checks the given subset of the term hierarchy for hierarchy loops.",
        "description": "<p>Prevents loops from forming and breaks those that it finds.<\/p> <p>Attached to the {@see 'wp_update_term_parent'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "parent": {
                "label": "parent",
                "description": "term_id of the parent for the term we're checking.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "term_id": {
                "label": "term_id",
                "description": "The term we're checking.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy of the term we're checking.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The new parent for the term.",
        "rank": 0
    },
    "wp_check_term_meta_support_prefilter": {
        "since": "5.0.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_check_term_meta_support_prefilter",
        "summary": "Aborts calls to term meta if it is not supported.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "check": {
                "label": "check",
                "description": "Skip-value for whether to proceed term meta function execution.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Original value of $check, or false if term meta is not supported.",
        "rank": 0
    },
    "wp_checkdate": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_checkdate",
        "summary": "Test if the supplied date is valid for the Gregorian calendar.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "month": {
                "label": "month",
                "description": "Month number.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "day": {
                "label": "day",
                "description": "Day number.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "year": {
                "label": "year",
                "description": "Year number.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "source_date": {
                "label": "source_date",
                "description": "The date to filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if valid date, false if not valid date.",
        "rank": 0
    },
    "wp_clean_plugins_cache": {
        "since": "3.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_clean_plugins_cache",
        "summary": "Clears the Plugins cache used by get_plugins() and by default, the Plugin Update cache.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "clear_update_cache": {
                "label": "clear_update_cache",
                "description": "Whether to clear the Plugin updates cache",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_clean_themes_cache": {
        "since": "3.5.0",
        "group": "Theme",
        "type": "efct",
        "name": "wp_clean_themes_cache",
        "summary": "Clears the cache held by get_theme_roots() and WP_Theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "clear_update_cache": {
                "label": "clear_update_cache",
                "description": "Whether to clear the Theme updates cache",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_clear_scheduled_hook": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_clear_scheduled_hook",
        "summary": "Unschedules all events attached to the hook with the specified arguments.",
        "description": "<p>Warning: This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE. For information about casting to booleans see the {@link https:\/\/php.net\/manual\/en\/language.types.boolean.php PHP documentation}. Use the === operator for testing the return value of this function.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hook": {
                "label": "hook",
                "description": "Action hook, the execution of which will be unscheduled.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments that were to be passed to the hook's callback function.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int"
        ],
        "return_description": "On success an integer indicating number of events unscheduled (0 indicates no                  events were registered with the hook and arguments combination), false if                  unscheduling one or more events fail.",
        "rank": 0
    },
    "wp_comment_reply": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_comment_reply",
        "summary": "Outputs the in-line comment reply-to form in the Comments list table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "position": {
                "label": "position",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            },
            "checkbox": {
                "label": "checkbox",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "mode": {
                "label": "mode",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'single'",
                "required": false
            },
            "table_row": {
                "label": "table_row",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_comments_personal_data_eraser": {
        "since": "4.9.6",
        "group": "Comment",
        "type": "efct",
        "name": "wp_comments_personal_data_eraser",
        "summary": "Erases personal data associated with an email address from the comments table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "The comment author email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "Comment page.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_comments_personal_data_exporter": {
        "since": "4.9.6",
        "group": "Comment",
        "type": "efct",
        "name": "wp_comments_personal_data_exporter",
        "summary": "Finds and exports personal data associated with an email address from the comments table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "The comment author email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "Comment page.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$return An array of personal data.",
        "rank": 0
    },
    "wp_constrain_dimensions": {
        "since": "2.5.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_constrain_dimensions",
        "summary": "Calculates the new dimensions for a down-sampled image.",
        "description": "<p>If either width or height are empty, no constraint is applied on that dimension.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "current_width": {
                "label": "current_width",
                "description": "Current width of the image.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "current_height": {
                "label": "current_height",
                "description": "Current height of the image.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "max_width": {
                "label": "max_width",
                "description": "Max width in pixels to constrain to. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "max_height": {
                "label": "max_height",
                "description": "Max height in pixels to constrain to. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "First item is the width, the second item is the height.",
        "rank": 0
    },
    "wp_convert_hr_to_bytes": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_convert_hr_to_bytes",
        "summary": "Converts a shorthand byte value to an integer byte value.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "A (PHP ini) byte value, either shorthand or ordinary.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "An integer byte value.",
        "rank": 0
    },
    "wp_convert_widget_settings": {
        "since": "2.8.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_convert_widget_settings",
        "summary": "Convert the widget settings from single to multi-widget format.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "base_name": {
                "label": "base_name",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "settings": {
                "label": "settings",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_count_attachments": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_count_attachments",
        "summary": "Count number of attachments for the mime type(s).",
        "description": "<p>If you set the optional mime_type parameter, then an array will still be returned, but will only have the item you are looking for. It does not give you the number of attachments that are children of a post. You can get that by counting the number of children that post has.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mime_type": {
                "label": "mime_type",
                "description": "Array or comma-separated list of MIME patterns.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "An object containing the attachment counts by mime type.",
        "rank": 0
    },
    "wp_count_comments": {
        "since": "2.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_count_comments",
        "summary": "Retrieve total comments for blog or single post.",
        "description": "<p>The properties of the returned object contain the 'moderated', 'approved', and spam comments for either the entire blog or single post. Those properties contain the amount of comments that match the status. The 'total_comments' property contains the integer of total comments.<\/p> <p>The comment stats are cached and then retrieved, if they already exist in the cache.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "object",
            "array"
        ],
        "return_description": "Comment stats.",
        "rank": 0
    },
    "wp_count_posts": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_count_posts",
        "summary": "Count number of posts of a post type and if user has permissions to view.",
        "description": "<p>This function provides an efficient method of finding the amount of post's type a blog has. Another method is to count the amount of items in get_posts(), but that method has a lot of overhead with doing so. Therefore, when developing for 2.5+, use this function instead.<\/p> <p>The $perm parameter checks for 'readable' value and if the user can read private posts, it will display that for the user that is signed in.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Post type to retrieve count.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "perm": {
                "label": "perm",
                "description": "'readable' or empty.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "Number of posts for each status.",
        "rank": 0
    },
    "wp_count_terms": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_count_terms",
        "summary": "Count how many terms are in Taxonomy.",
        "description": "<p>Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' =&gt; true).<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of arguments that get passed to get_terms().",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "int",
            "WP_Error"
        ],
        "return_description": "Number of terms in that taxonomy or WP_Error if the taxonomy does not exist.",
        "rank": 0
    },
    "wp_create_categories": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_create_categories",
        "summary": "Create categories for the given post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "categories": {
                "label": "categories",
                "description": "Array of category names to create.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "The post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of categories to create for the given post.",
        "rank": 0
    },
    "wp_create_category": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_create_category",
        "summary": "Add a new category to the database if it does not already exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cat_name": {
                "label": "cat_name",
                "description": "",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "parent": {
                "label": "parent",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_create_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_create_nav_menu",
        "summary": "Creates a navigation menu.",
        "description": "<p>Note that $menu_name is expected to be pre-slashed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_name": {
                "label": "menu_name",
                "description": "Menu name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Menu ID on success, WP_Error object on failure.",
        "rank": 0
    },
    "wp_create_nonce": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_create_nonce",
        "summary": "Creates a cryptographic token tied to a specific action, user, user session, and window of time.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Scalar value to add context to the nonce.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "-1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The token.",
        "rank": 0
    },
    "wp_create_post_autosave": {
        "since": "2.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_create_post_autosave",
        "summary": "Creates autosave data for the specified post from $_POST data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_data": {
                "label": "post_data",
                "description": "Associative array containing the post data or int post ID.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The autosave revision ID. WP_Error or 0 on error.",
        "rank": 0
    },
    "wp_create_tag": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_create_tag",
        "summary": "Add a new tag to the database if it does not already exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag_name": {
                "label": "tag_name",
                "description": "",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_create_term": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_create_term",
        "summary": "Add a new term to the database if it does not already exist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag_name": {
                "label": "tag_name",
                "description": "",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy for which to retrieve terms.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_tag'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_create_user": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_create_user",
        "summary": "A simpler way of inserting a user into the database.",
        "description": "<p>Creates a new user with just the username, password, and email. For more complex user creation use wp_insert_user() to specify more information.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "username": {
                "label": "username",
                "description": "The user's username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "The user's password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "The user's email.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The newly created user's ID or a WP_Error object if the user could not                      be created.",
        "rank": 0
    },
    "wp_create_user_request": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_create_user_request",
        "summary": "Create and log a user request to perform a specific action.",
        "description": "<p>Requests are stored inside a post type named user_request since they can apply to both users on the site, or guests without a user account.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "User email address. This can be the address of a registered or non-registered user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "action_name": {
                "label": "action_name",
                "description": "Name of the action that is being confirmed. Required.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "request_data": {
                "label": "request_data",
                "description": "Misc data you want to send with the verification request and pass to the actions once the request is confirmed.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Returns the request ID if successful, or a WP_Error object on failure.",
        "rank": 0
    },
    "wp_credits": {
        "since": "3.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_credits",
        "summary": "Retrieve the contributor credits.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "A list of all of the contributors, or false on error.",
        "rank": 0
    },
    "wp_cron": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_cron",
        "summary": "Run scheduled callbacks or spawn cron for all scheduled events.",
        "description": "<p>Warning: This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE. For information about casting to booleans see the {@link https:\/\/php.net\/manual\/en\/language.types.boolean.php PHP documentation}. Use the === operator for testing the return value of this function.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int"
        ],
        "return_description": "On success an integer indicating number of events spawned (0 indicates no                  events needed to be spawned), false if spawning fails for one or more events.",
        "rank": 0
    },
    "wp_crop_image": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_crop_image",
        "summary": "Crop an Image to a given size.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "src": {
                "label": "src",
                "description": "The source file or Attachment ID.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "src_x": {
                "label": "src_x",
                "description": "The start x position to crop from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "src_y": {
                "label": "src_y",
                "description": "The start y position to crop from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "src_w": {
                "label": "src_w",
                "description": "The width to crop.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "src_h": {
                "label": "src_h",
                "description": "The height to crop.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "dst_w": {
                "label": "dst_w",
                "description": "The destination width.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "dst_h": {
                "label": "dst_h",
                "description": "The destination height.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "src_abs": {
                "label": "src_abs",
                "description": "If the source crop points are absolute.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            },
            "dst_file": {
                "label": "dst_file",
                "description": "The destination file to write to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "New filepath on success, WP_Error on failure.",
        "rank": 0
    },
    "wp_customize_url": {
        "since": "3.4.0",
        "group": "Theme",
        "type": "efct",
        "name": "wp_customize_url",
        "summary": "Returns a URL to load the Customizer.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "stylesheet": {
                "label": "stylesheet",
                "description": "Theme to customize. Defaults to current theme. The theme's stylesheet will be urlencoded if necessary.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_cached_rss_widget": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_cached_rss_widget",
        "summary": "Checks to see if all of the feed url in $check_urls are cached.",
        "description": "<p>If $check_urls is empty, look for the rss feed url found in the dashboard widget options of $widget_id. If cached, call $callback, a function that echoes out output for this widget. If not cache, echo a &quot;Loading...&quot; stub which is later replaced by Ajax call (see top of \/wp-admin\/index.php)<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "check_urls": {
                "label": "check_urls",
                "description": "RSS feeds",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False on failure. True on success.",
        "rank": 0
    },
    "wp_dashboard_primary_output": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_primary_output",
        "summary": "Display the WordPress events and news feeds.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "Widget ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "feeds": {
                "label": "feeds",
                "description": "Array of RSS feeds.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_quick_press": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_quick_press",
        "summary": "The Quick Draft widget display and creation of drafts.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "error_msg": {
                "label": "error_msg",
                "description": "Error message.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_quota": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_dashboard_quota",
        "summary": "Display file upload quota on dashboard.",
        "description": "<p>Runs on the {@see 'activity_box_end'} hook in wp_dashboard_right_now().<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "null"
        ],
        "return_description": "True if not multisite, user can't upload files, or the space check option is disabled.",
        "rank": 0
    },
    "wp_dashboard_recent_comments": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_recent_comments",
        "summary": "Show Comments section.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "total_items": {
                "label": "total_items",
                "description": "Number of comments to query.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "5",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if no comments were found. True otherwise.",
        "rank": 0
    },
    "wp_dashboard_recent_drafts": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_recent_drafts",
        "summary": "Show recent drafts of the user on the dashboard.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "drafts": {
                "label": "drafts",
                "description": "Array of posts to display.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_recent_posts": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_recent_posts",
        "summary": "Generates Publishing Soon and Recently Published sections.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "An array of query and display arguments. <ul><li><b>'max'<\/b><br\/><i>(int)<\/i> Number of posts to display.<\/li> <li><b>'status'<\/b><br\/><i>(string)<\/i> Post status.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Designates ascending ('ASC') or descending ('DESC') order.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Section title.<\/li> <li><b>'id'<\/b><br\/><i>(string)<\/i> The container id.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if no posts were found. True otherwise.",
        "rank": 0
    },
    "wp_dashboard_rss_control": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_rss_control",
        "summary": "The RSS dashboard widget control.",
        "description": "<p>Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data from RSS-type widgets.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "form_inputs": {
                "label": "form_inputs",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_rss_output": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_rss_output",
        "summary": "Display generic dashboard RSS widget feed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_id": {
                "label": "widget_id",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dashboard_trigger_widget_control": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dashboard_trigger_widget_control",
        "summary": "Calls widget control callback.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_control_id": {
                "label": "widget_control_id",
                "description": "Registered Widget ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_debug_backtrace_summary": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_debug_backtrace_summary",
        "summary": "Return a comma-separated string of functions that have been called to get to the current point in code.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ignore_class": {
                "label": "ignore_class",
                "description": "A class to ignore all function calls within - useful when you want to just give info about the callee.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "skip_frames": {
                "label": "skip_frames",
                "description": "A number of stack frames to skip - useful for unwinding back to the source of the issue. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "pretty": {
                "label": "pretty",
                "description": "Whether or not you want a comma separated string or raw array returned.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Either a string containing a reversed comma separated trace or an array                      of individual calls.",
        "rank": 0
    },
    "wp_default_editor": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_default_editor",
        "summary": "Find out which editor should be displayed by default.",
        "description": "<p>Works out which of the two editors to display as the current editor for a user. The 'html' setting is for the &quot;Text&quot; editor tab.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Either 'tinymce', or 'html', or 'test'",
        "rank": 0
    },
    "wp_default_packages": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_packages",
        "summary": "Registers all the WordPress packages scripts.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_default_packages_inline_scripts": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_packages_inline_scripts",
        "summary": "Adds inline scripts required for the WordPress JavaScript packages.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_default_packages_scripts": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_packages_scripts",
        "summary": "Registers all the WordPress packages scripts that are in the standardized `js\/dist\/` location.",
        "description": "<p>For the order of $scripts-&gt;add see wp_default_scripts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_default_packages_vendor": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_packages_vendor",
        "summary": "Registers all the WordPress vendor scripts that are in the standardized `js\/dist\/vendor\/` location.",
        "description": "<p>For the order of $scripts-&gt;add see wp_default_scripts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_default_scripts": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_scripts",
        "summary": "Register all WordPress scripts.",
        "description": "<p>Localizes some of them. args order: $scripts-&gt;add( 'handle', 'url', 'dependencies', 'query-string', 1 ); when last arg === 1 queues the script for the footer<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_default_styles": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_default_styles",
        "summary": "Assign default styles to $styles object.",
        "description": "<p>Nothing is returned, because the $styles parameter is passed by reference. Meaning that whatever object is passed will be updated without having to reassign the variable that was passed back to the same value. This saves memory.<\/p> <p>Adding default styles is not the only task, it also assigns the base_url property, the default version, and text direction for the object.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "styles": {
                "label": "styles",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_defer_comment_counting": {
        "since": "2.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_defer_comment_counting",
        "summary": "Whether to defer comment counting.",
        "description": "<p>When setting $defer to true, all post comment counts will not be updated until $defer is set to false. When $defer is set to false, then all previously deferred updated post comment counts will then be automatically updated without having to call wp_update_comment_count() after.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "defer": {
                "label": "defer",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_defer_term_counting": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_defer_term_counting",
        "summary": "Enable or disable term counting.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "defer": {
                "label": "defer",
                "description": "Enable if true, disable if false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether term counting is enabled or disabled.",
        "rank": 0
    },
    "wp_delete_attachment": {
        "since": "2.0.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_delete_attachment",
        "summary": "Trash or delete an attachment.",
        "description": "<p>When an attachment is permanently deleted, the file will also be removed. Deletion removes all post meta fields, taxonomy, comments, etc. associated with the attachment (except the main post).<\/p> <p>The attachment is moved to the trash instead of permanently deleted unless trash for media is disabled, item is already in the trash, or $force_delete is true.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "force_delete": {
                "label": "force_delete",
                "description": "Whether to bypass trash and force deletion.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "false",
            "null"
        ],
        "return_description": "Post data on success, false or null on failure.",
        "rank": 0
    },
    "wp_delete_attachment_files": {
        "since": "4.9.7",
        "group": "Post",
        "type": "efct",
        "name": "wp_delete_attachment_files",
        "summary": "Deletes all files that belong to the given attachment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "The attachment's meta data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "backup_sizes": {
                "label": "backup_sizes",
                "description": "The meta data for the attachment's backup images.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "file": {
                "label": "file",
                "description": "Absolute path to the attachment's file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_delete_category": {
        "since": "2.0.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_delete_category",
        "summary": "Deletes one existing category.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cat_ID": {
                "label": "cat_ID",
                "description": "Category term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int",
            "WP_Error"
        ],
        "return_description": "Returns true if completes delete action; false if term doesn't exist;  Zero on attempted deletion of default Category; WP_Error object is also a possibility.",
        "rank": 0
    },
    "wp_delete_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_delete_comment",
        "summary": "Trashes or deletes a comment.",
        "description": "<p>The comment is moved to trash instead of permanently deleted unless trash is disabled, item is already in the trash, or $force_delete is true.<\/p> <p>The post comment count will be updated if the comment was approved and has a post ID available.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "force_delete": {
                "label": "force_delete",
                "description": "Whether to bypass trash and force deletion. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_delete_file": {
        "since": "4.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_delete_file",
        "summary": "Delete a file",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "The path to the file to delete.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_delete_file_from_directory": {
        "since": "4.9.7",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_delete_file_from_directory",
        "summary": "Deletes a file if its path is within the given directory.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Absolute path to the file to delete.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "directory": {
                "label": "directory",
                "description": "Absolute path to a directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_delete_link": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_delete_link",
        "summary": "Deletes a specified link from the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link_id": {
                "label": "link_id",
                "description": "ID of the link to delete",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Always true.",
        "rank": 0
    },
    "wp_delete_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_delete_nav_menu",
        "summary": "Delete a Navigation Menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu": {
                "label": "menu",
                "description": "Menu ID, slug, name, or object.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, false or WP_Error object on failure.",
        "rank": 0
    },
    "wp_delete_object_term_relationships": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_delete_object_term_relationships",
        "summary": "Will unlink the object from the taxonomy or taxonomies.",
        "description": "<p>Will remove all relationships between the object and any terms in a particular taxonomy or taxonomies. Does not remove the term or taxonomy itself.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_id": {
                "label": "object_id",
                "description": "The term Object Id that refers to the term.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomies": {
                "label": "taxonomies",
                "description": "List of Taxonomy Names or single Taxonomy name.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_delete_post": {
        "since": "1.0.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_delete_post",
        "summary": "Trash or delete a post or page.",
        "description": "<p>When the post and page is permanently deleted, everything that is tied to it is deleted also. This includes comments, post meta fields, and terms associated with the post.<\/p> <p>The post or page is moved to trash instead of permanently deleted unless trash is disabled, item is already in the trash, or $force_delete is true.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "postid": {
                "label": "postid",
                "description": "Post ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "force_delete": {
                "label": "force_delete",
                "description": "Whether to bypass trash and force deletion.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "false",
            "null"
        ],
        "return_description": "Post data on success, false or null on failure.",
        "rank": 0
    },
    "wp_delete_post_revision": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "efct",
        "name": "wp_delete_post_revision",
        "summary": "Deletes a revision.",
        "description": "<p>Deletes the row from the posts table corresponding to the specified revision.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "revision_id": {
                "label": "revision_id",
                "description": "Revision ID or revision object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Post",
            "WP_Error",
            "null"
        ],
        "return_description": "Null or WP_Error if error, deleted post if success.",
        "rank": 0
    },
    "wp_delete_site": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_delete_site",
        "summary": "Deletes a site from the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "ID of the site that should be deleted.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Site",
            "WP_Error"
        ],
        "return_description": "The deleted site object on success, or error object on failure.",
        "rank": 0
    },
    "wp_delete_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_delete_term",
        "summary": "Removes a term from the database.",
        "description": "<p>If the term is a parent of other terms, then the children will be updated to that term's parent.<\/p> <p>Metadata associated with the term will be deleted.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy Name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of arguments to override the default term ID. <ul><li><b>'default'<\/b><br\/><i>(int)<\/i> The term ID to make the default term. This will only override the terms found if there is only one term found. Any other and the found terms are used.<\/li> <li><b>'force_default'<\/b><br\/><i>(bool)<\/i> Optional. Whether to force the supplied term as default to be assigned even if the object was not going to be term-less. Default false.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int",
            "WP_Error"
        ],
        "return_description": "True on success, false if term does not exist. Zero on attempted                           deletion of default Category. WP_Error if the taxonomy does not exist.",
        "rank": 0
    },
    "wp_delete_user": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_delete_user",
        "summary": "Remove user and optionally reassign posts and links to another user.",
        "description": "<p>If the $reassign parameter is not assigned to a User ID, then all posts will be deleted of that user. The action {@see 'delete_user'} that is passed the User ID being deleted will be run after the posts are either reassigned or deleted. The user meta will also be deleted that are for that User ID.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "reassign": {
                "label": "reassign",
                "description": "Reassign posts and links to new User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True when finished.",
        "rank": 0
    },
    "wp_dependencies_unique_hosts": {
        "since": "4.6.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_dependencies_unique_hosts",
        "summary": "Retrieves a list of unique hosts of all enqueued scripts and styles.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of unique hosts of enqueued scripts and styles.",
        "rank": 0
    },
    "wp_dequeue_script": {
        "since": "3.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_dequeue_script",
        "summary": "Remove a previously enqueued script.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script to be removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dequeue_style": {
        "since": "3.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_dequeue_style",
        "summary": "Remove a previously enqueued CSS stylesheet.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet to be removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_deregister_script": {
        "since": "2.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_deregister_script",
        "summary": "Remove a registered script.",
        "description": "<p>Note: there are intentional safeguards in place to prevent critical admin scripts, such as jQuery core, from being unregistered.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script to be removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_deregister_style": {
        "since": "2.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_deregister_style",
        "summary": "Remove a registered stylesheet.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet to be removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_die": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_die",
        "summary": "Kill WordPress execution and display HTML message with error message.",
        "description": "<p>This function complements the die() PHP function. The difference is that HTML will be displayed to the user. It is recommended to use this function only when the execution should not continue any further. It is not recommended to call this function very often, and try to handle as many errors as possible silently or more gracefully.<\/p> <p>As a shorthand, the desired HTTP response code may be passed as an integer to the $title parameter (the default title would apply) or the $args parameter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "message": {
                "label": "message",
                "description": "Error message. If this is a WP_Error object, and not an Ajax or XML-RPC request, the error's messages are used.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "title": {
                "label": "title",
                "description": "Error title. If $message is a WP_Error object, error data with the key 'title' may be used to specify the title. If $title is an integer, then it is treated as the response code.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "''",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments to control behavior. If $args is an integer, then it is treated as the response code. <ul><li><b>'response'<\/b><br\/><i>(int)<\/i> The HTTP response code. Default 200 for Ajax requests, 500 otherwise.<\/li> <li><b>'link_url'<\/b><br\/><i>(string)<\/i> A URL to include a link to. Only works in combination with $link_text. Default empty string.<\/li> <li><b>'link_text'<\/b><br\/><i>(string)<\/i> A label for the link to include. Only works in combination with $link_url. Default empty string.<\/li> <li><b>'back_link'<\/b><br\/><i>(bool)<\/i> Whether to include a link to go back. Default false.<\/li> <li><b>'text_direction'<\/b><br\/><i>(string)<\/i> The text direction. This is only useful internally, when WordPress is still loading and the site's locale is not set up yet. Accepts 'rtl'. Default is the value of is_rtl().<\/li> <li><b>'code'<\/b><br\/><i>(string)<\/i> Error code to use. Default is 'wp_die', or the main error code if $message is a WP_Error.<\/li> <li><b>'exit'<\/b><br\/><i>(bool)<\/i> Whether to exit the process after completion. Default true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "int"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_doc_link_parse": {
        "since": "2.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_doc_link_parse",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_doing_ajax": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_doing_ajax",
        "summary": "Determines whether the current request is a WordPress Ajax request.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if it's a WordPress Ajax request, false otherwise.",
        "rank": 0
    },
    "wp_doing_cron": {
        "since": "4.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_doing_cron",
        "summary": "Determines whether the current request is a WordPress cron request.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if it's a WordPress cron request, false otherwise.",
        "rank": 0
    },
    "wp_download_language_pack": {
        "since": "4.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_download_language_pack",
        "summary": "Download a language pack.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "download": {
                "label": "download",
                "description": "Language code to download.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "Returns the language code if successfully downloaded                     (or already installed), or false on failure.",
        "rank": 0
    },
    "wp_dropdown_categories": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_dropdown_categories",
        "summary": "Display or retrieve the HTML dropdown list of categories.",
        "description": "<p>The 'hierarchical' argument, which is disabled by default, will override the depth argument, unless it is true. When the argument is false, it will display all of the categories. When it is enabled it will use the value in the 'depth' argument.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments to generate a categories drop-down element. See WP_Term_Query::__construct() for information on additional accepted arguments. <ul><li><b>'show_option_all'<\/b><br\/><i>(string)<\/i> Text to display for showing all categories. <\/li> <li><b>'show_option_none'<\/b><br\/><i>(string)<\/i> Text to display for showing no categories. <\/li> <li><b>'option_none_value'<\/b><br\/><i>(string)<\/i> Value to use when no category is selected. <\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> Which column to use for ordering categories. See get_terms() for a list of accepted values. Default 'id' (term_id).<\/li> <li><b>'pad_counts'<\/b><br\/><i>(bool)<\/i> See get_terms() for an argument description. Default false.<\/li> <li><b>'show_count'<\/b><br\/><i>(bool|int)<\/i> Whether to include post counts. Accepts 0, 1, or their bool equivalents. Default 0.<\/li> <li><b>'echo'<\/b><br\/><i>(bool|int)<\/i> Whether to echo or return the generated markup. Accepts 0, 1, or their bool equivalents. Default 1.<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool|int)<\/i> Whether to traverse the taxonomy hierarchy. Accepts 0, 1, or their bool equivalents. Default 0.<\/li> <li><b>'depth'<\/b><br\/><i>(int)<\/i> Maximum depth. Default 0.<\/li> <li><b>'tab_index'<\/b><br\/><i>(int)<\/i> Tab index for the select element. Default 0 (no tabindex).<\/li> <li><b>'name'<\/b><br\/><i>(string)<\/i> Value for the 'name' attribute of the select element. Default 'cat'.<\/li> <li><b>'id'<\/b><br\/><i>(string)<\/i> Value for the 'id' attribute of the select element. Defaults to the value of $name.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> Value for the 'class' attribute of the select element. Default 'postform'.<\/li> <li><b>'selected'<\/b><br\/><i>(int|string)<\/i> Value of the option that should be selected. Default 0.<\/li> <li><b>'value_field'<\/b><br\/><i>(string)<\/i> Term field that should be used to populate the 'value' attribute of the option elements. Accepts any valid term field: 'term_id', 'name', 'slug', 'term_group', 'term_taxonomy_id', 'taxonomy', 'description', 'parent', 'count'. Default 'term_id'.<\/li> <li><b>'taxonomy'<\/b><br\/><i>(string|array)<\/i> Name of the category or categories to retrieve. Default 'category'.<\/li> <li><b>'hide_if_empty'<\/b><br\/><i>(bool)<\/i> True to skip generating markup if no categories are found. Default false (create select element even if no categories are found).<\/li> <li><b>'required'<\/b><br\/><i>(bool)<\/i> Whether the &lt;select&gt; element should have the HTML5 'required' attribute. Default false.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content only if 'echo' argument is 0.",
        "rank": 0
    },
    "wp_dropdown_languages": {
        "since": "4.0.0",
        "group": "i18n",
        "type": "efct",
        "name": "wp_dropdown_languages",
        "summary": "Language selector.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for outputting the language selector. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> ID attribute of the select element. Default 'locale'.<\/li> <li><b>'name'<\/b><br\/><i>(string)<\/i> Name attribute of the select element. Default 'locale'.<\/li> <li><b>'languages'<\/b><br\/><i>(array)<\/i> List of installed languages, contain only the locales. <\/li> <li><b>'translations'<\/b><br\/><i>(array)<\/i> List of available translations. Default result of wp_get_available_translations().<\/li> <li><b>'selected'<\/b><br\/><i>(string)<\/i> Language which should be selected. <\/li> <li><b>'echo'<\/b><br\/><i>(bool|int)<\/i> Whether to echo the generated markup. Accepts 0, 1, or their boolean equivalents. Default 1.<\/li> <li><b>'show_available_translations'<\/b><br\/><i>(bool)<\/i> Whether to show available translations. Default true.<\/li> <li><b>'show_option_site_default'<\/b><br\/><i>(bool)<\/i> Whether to show an option to fall back to the site's locale. Default false.<\/li> <li><b>'show_option_en_us'<\/b><br\/><i>(bool)<\/i> Whether to show an option for English (United States). Default true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content",
        "rank": 0
    },
    "wp_dropdown_pages": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_dropdown_pages",
        "summary": "Retrieve or display a list of pages as a dropdown (select list).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments to generate a page dropdown. See get_pages() for additional arguments. <ul><li><b>'depth'<\/b><br\/><i>(int)<\/i> Maximum depth. Default 0.<\/li> <li><b>'child_of'<\/b><br\/><i>(int)<\/i> Page ID to retrieve child pages of. Default 0.<\/li> <li><b>'selected'<\/b><br\/><i>(int|string)<\/i> Value of the option that should be selected. Default 0.<\/li> <li><b>'echo'<\/b><br\/><i>(bool|int)<\/i> Whether to echo or return the generated markup. Accepts 0, 1, or their bool equivalents. Default 1.<\/li> <li><b>'name'<\/b><br\/><i>(string)<\/i> Value for the 'name' attribute of the select element. Default 'page_id'.<\/li> <li><b>'id'<\/b><br\/><i>(string)<\/i> Value for the 'id' attribute of the select element.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> Value for the 'class' attribute of the select element. Default: none. Defaults to the value of $name.<\/li> <li><b>'show_option_none'<\/b><br\/><i>(string)<\/i> Text to display for showing no pages. Default empty (does not display).<\/li> <li><b>'show_option_no_change'<\/b><br\/><i>(string)<\/i> Text to display for &quot;no change&quot; option. Default empty (does not display).<\/li> <li><b>'option_none_value'<\/b><br\/><i>(string)<\/i> Value to use when no page is selected. <\/li> <li><b>'value_field'<\/b><br\/><i>(string)<\/i> Post field used to populate the 'value' attribute of the option elements. Accepts any valid post field. Default 'ID'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content, if not displaying.",
        "rank": 0
    },
    "wp_dropdown_roles": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_dropdown_roles",
        "summary": "Print out option html elements for role selectors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "selected": {
                "label": "selected",
                "description": "Slug for the role that should be already selected.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_dropdown_users": {
        "since": "2.3.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_dropdown_users",
        "summary": "Create dropdown HTML content of users.",
        "description": "<p>The content can either be displayed, which it is by default or retrieved by setting the 'echo' argument. The 'include' and 'exclude' arguments do not need to be used; all users will be displayed in that case. Only one can be used, either 'include' or 'exclude', but not both.<\/p> <p>The available arguments are as follows:<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments to generate a drop-down of users. See WP_User_Query::prepare_query() for additional available arguments. <ul><li><b>'show_option_all'<\/b><br\/><i>(string)<\/i> Text to show as the drop-down default (all). <\/li> <li><b>'show_option_none'<\/b><br\/><i>(string)<\/i> Text to show as the drop-down default when no users were found. <\/li> <li><b>'option_none_value'<\/b><br\/><i>(int|string)<\/i> Value to use for $show_option_non when no users were found. Default -1.<\/li> <li><b>'hide_if_only_one_author'<\/b><br\/><i>(string)<\/i> Whether to skip generating the drop-down if only one user was found. <\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> Field to order found users by. Accepts user fields. Default 'display_name'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Whether to order users in ascending or descending order. Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.<\/li> <li><b>'include'<\/b><br\/><i>(array|string)<\/i> Array or comma-separated list of user IDs to include. <\/li> <li><b>'exclude'<\/b><br\/><i>(array|string)<\/i> Array or comma-separated list of user IDs to exclude. <\/li> <li><b>'multi'<\/b><br\/><i>(bool|int)<\/i> Whether to skip the ID attribute on the 'select' element. Accepts 1|true or 0|false. Default 0|false.<\/li> <li><b>'show'<\/b><br\/><i>(string)<\/i> User data to display. If the selected item is empty then the 'user_login' will be displayed in parentheses. Accepts any user field, or 'display_name_with_login' to show the display name with user_login in parentheses. Default 'display_name'.<\/li> <li><b>'echo'<\/b><br\/><i>(int|bool)<\/i> Whether to echo or return the drop-down. Accepts 1|true (echo) or 0|false (return). Default 1|true.<\/li> <li><b>'selected'<\/b><br\/><i>(int)<\/i> Which user ID should be selected. Default 0.<\/li> <li><b>'include_selected'<\/b><br\/><i>(bool)<\/i> Whether to always include the selected user ID in the drop- down. Default false.<\/li> <li><b>'name'<\/b><br\/><i>(string)<\/i> Name attribute of select element. Default 'user'.<\/li> <li><b>'id'<\/b><br\/><i>(string)<\/i> ID attribute of the select element. Default is the value of $name.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> Class attribute of the select element. <\/li> <li><b>'blog_id'<\/b><br\/><i>(int)<\/i> ID of blog (Multisite only). Default is ID of the current blog.<\/li> <li><b>'who'<\/b><br\/><i>(string)<\/i> Which type of users to query. Accepts only an empty string or 'authors'. <\/li> <li><b>'role'<\/b><br\/><i>(string|array)<\/i> An array or a comma-separated list of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. <\/li> <li><b>'role__in'<\/b><br\/><i>(array)<\/i> An array of role names. Matched users must have at least one of these roles. Default empty array.<\/li> <li><b>'role__not_in'<\/b><br\/><i>(array)<\/i> An array of role names to exclude. Users matching one or more of these roles will not be included in results. Default empty array.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "String of HTML content.",
        "rank": 0
    },
    "wp_edit_attachments_query": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_edit_attachments_query",
        "summary": "Executes a query for attachments. An array of WP_Query arguments can be passed in, which will override the arguments set by this function.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "q": {
                "label": "q",
                "description": "Array of query variables to use to build the query or false to use $_GET superglobal.",
                "type": "array",
                "types": [
                    "array",
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_edit_attachments_query_vars": {
        "since": "4.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_edit_attachments_query_vars",
        "summary": "Get the query variables for the current attachments request.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "q": {
                "label": "q",
                "description": "Array of query variables to use to build the query or false to use $_GET superglobal.",
                "type": "array",
                "types": [
                    "array",
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The parsed query vars.",
        "rank": 0
    },
    "wp_edit_posts_query": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_edit_posts_query",
        "summary": "Run the wp query to fetch the posts for listing on the edit posts page",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "q": {
                "label": "q",
                "description": "Array of query variables to use to build the query or false to use $_GET superglobal.",
                "type": "array",
                "types": [
                    "array",
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_edit_theme_plugin_file": {
        "since": "4.9.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_edit_theme_plugin_file",
        "summary": "Attempt to edit a file for a theme or plugin.",
        "description": "<p>When editing a PHP file, loopback requests will be made to the admin and the homepage to attempt to see if there is a fatal error introduced. If so, the PHP change will be reverted.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Args. Note that all of the arg values are already unslashed. They are, however, coming straight from $_POST and are not validated or sanitized in any way. <ul><li><b>'file'<\/b><br\/><i>(string)<\/i> Relative path to file.<\/li> <li><b>'plugin'<\/b><br\/><i>(string)<\/i> Path to the plugin file relative to the plugins directory.<\/li> <li><b>'theme'<\/b><br\/><i>(string)<\/i> Theme being edited.<\/li> <li><b>'newcontent'<\/b><br\/><i>(string)<\/i> New content for the file.<\/li> <li><b>'nonce'<\/b><br\/><i>(string)<\/i> Nonce.<\/li> <\/li><\/ul>",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "True on success or <code>WP_Error<\/code> on failure.",
        "rank": 0
    },
    "wp_editor": {
        "since": "3.3.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_editor",
        "summary": "Renders an editor.",
        "description": "<p>Using this function is the proper way to output all needed components for both TinyMCE and Quicktags. _WP_Editors should not be used directly. See https:\/\/core.trac.wordpress.org\/ticket\/17144.<\/p> <p>NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason running wp_editor() inside of a meta box is not a good idea unless only Quicktags is used. On the post edit screen several actions can be used to include additional editors containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'. See https:\/\/core.trac.wordpress.org\/ticket\/19173 for more information.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Initial content for the editor.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "editor_id": {
                "label": "editor_id",
                "description": "HTML ID attribute value for the textarea and TinyMCE. Can only be \/[a-z]+\/.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "settings": {
                "label": "settings",
                "description": "See _WP_Editors::editor().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_embed_defaults": {
        "since": "2.9.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_defaults",
        "summary": "Creates default array of embed parameters.",
        "description": "<p>The width defaults to the content width as specified by the theme. If the theme does not specify a content width, then 500px is used.<\/p> <p>The default height is 1.5 times the width, or 1000px, whichever is smaller.<\/p> <p>The {@see 'embed_defaults'} filter can be used to adjust either of these values.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL that should be embedded.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Default embed parameters.",
        "rank": 0
    },
    "wp_embed_excerpt_attachment": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_excerpt_attachment",
        "summary": "Filters the post excerpt for the embed template.",
        "description": "<p>Shows players for video and audio attachments.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The current post excerpt.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The modified post excerpt.",
        "rank": 0
    },
    "wp_embed_excerpt_more": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_excerpt_more",
        "summary": "Filters the string in the 'more' link displayed after a trimmed excerpt.",
        "description": "<p>Replaces '[...]' (appended to automatically generated excerpts) with an ellipsis and a &quot;Continue reading&quot; link in the embed template.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "more_string": {
                "label": "more_string",
                "description": "Default 'more' string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "'Continue reading' link prepended with an ellipsis.",
        "rank": 0
    },
    "wp_embed_handler_audio": {
        "since": "3.6.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_handler_audio",
        "summary": "Audio embed handler callback.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "The RegEx matches from the provided regex when calling wp_embed_register_handler().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attr": {
                "label": "attr",
                "description": "Embed attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The original URL that was matched by the regex.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "rawattr": {
                "label": "rawattr",
                "description": "The original unmodified attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The embed HTML.",
        "rank": 0
    },
    "wp_embed_handler_video": {
        "since": "3.6.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_handler_video",
        "summary": "Video embed handler callback.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "The RegEx matches from the provided regex when calling wp_embed_register_handler().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attr": {
                "label": "attr",
                "description": "Embed attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The original URL that was matched by the regex.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "rawattr": {
                "label": "rawattr",
                "description": "The original unmodified attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The embed HTML.",
        "rank": 0
    },
    "wp_embed_handler_youtube": {
        "since": "4.0.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_handler_youtube",
        "summary": "YouTube iframe embed handler callback.",
        "description": "<p>Catches YouTube iframe embed URLs that are not parsable by oEmbed but can be translated into a URL that is.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "The RegEx matches from the provided regex when calling wp_embed_register_handler().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attr": {
                "label": "attr",
                "description": "Embed attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The original URL that was matched by the regex.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "rawattr": {
                "label": "rawattr",
                "description": "The original unmodified attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The embed HTML.",
        "rank": 0
    },
    "wp_embed_register_handler": {
        "since": "2.9.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_register_handler",
        "summary": "Registers an embed handler.",
        "description": "<p>Should probably only be used for sites that do not support oEmbed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "An internal ID\/name for the handler. Needs to be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "regex": {
                "label": "regex",
                "description": "The regex that will be used to see if this handler should be used for a URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "callback": {
                "label": "callback",
                "description": "The callback function that will be called if the regex is matched.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "Used to specify the order in which the registered handlers will be tested.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_embed_unregister_handler": {
        "since": "2.9.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_embed_unregister_handler",
        "summary": "Unregisters a previously-registered embed handler.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The handler ID that should be removed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "priority": {
                "label": "priority",
                "description": "The priority of the handler to be removed.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_encode_emoji": {
        "since": "4.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_encode_emoji",
        "summary": "Convert emoji characters to their equivalent HTML entity.",
        "description": "<p>This allows us to store emoji in a DB using the utf8 character set.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The content to encode.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The encoded content.",
        "rank": 0
    },
    "wp_enqueue_code_editor": {
        "since": "4.9.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_enqueue_code_editor",
        "summary": "Enqueue assets needed by the code editor for the given settings.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Args. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> The MIME type of the file to be edited.<\/li> <li><b>'file'<\/b><br\/><i>(string)<\/i> Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to $type param.<\/li> <li><b>'theme'<\/b><br\/><i>(WP_Theme)<\/i> Theme being edited when on theme editor.<\/li> <li><b>'plugin'<\/b><br\/><i>(string)<\/i> Plugin being edited when on plugin editor.<\/li> <li><b>'codemirror'<\/b><br\/><i>(array)<\/i> Additional CodeMirror setting overrides.<\/li> <li><b>'csslint'<\/b><br\/><i>(array)<\/i> CSSLint rule overrides.<\/li> <li><b>'jshint'<\/b><br\/><i>(array)<\/i> JSHint rule overrides.<\/li> <li><b>'htmlhint'<\/b><br\/><i>(array)<\/i> JSHint rule overrides.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Settings for the enqueued code editor, or false if the editor was not enqueued.",
        "rank": 0
    },
    "wp_enqueue_media": {
        "since": "3.5.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_enqueue_media",
        "summary": "Enqueues all scripts, styles, settings, and templates necessary to use all media JS APIs.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments for enqueuing media scripts. <ul><li><b>'A'<\/b><br\/><i>(int|WP_Post)<\/i> post object or ID.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_enqueue_script": {
        "since": "2.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_enqueue_script",
        "summary": "Enqueue a script.",
        "description": "<p>Registers the script if $src provided (does NOT overwrite), and enqueues it.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script. Should be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "src": {
                "label": "src",
                "description": "Full URL of the script, or path of the script relative to the WordPress root directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deps": {
                "label": "deps",
                "description": "An array of registered script handles this script depends on.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "ver": {
                "label": "ver",
                "description": "String specifying script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "null"
                ],
                "default": "false",
                "required": false
            },
            "in_footer": {
                "label": "in_footer",
                "description": "Whether to enqueue the script before &lt;\/body&gt; instead of in the &lt;head&gt;. Default 'false'.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_enqueue_style": {
        "since": "2.6.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_enqueue_style",
        "summary": "Enqueue a CSS stylesheet.",
        "description": "<p>Registers the style if source provided (does NOT overwrite) and enqueues.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet. Should be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "src": {
                "label": "src",
                "description": "Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deps": {
                "label": "deps",
                "description": "An array of registered stylesheet handles this stylesheet depends on.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "ver": {
                "label": "ver",
                "description": "String specifying stylesheet version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "null"
                ],
                "default": "false",
                "required": false
            },
            "media": {
                "label": "media",
                "description": "The media for which this stylesheet has been defined. Accepts media types like 'all', 'print' and 'screen', or media queries like '(orientation: portrait)' and '(max-width: 640px)'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_exif_date2ts": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_exif_date2ts",
        "summary": "Convert the exif date format to a unix timestamp.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_exif_frac2dec": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_exif_frac2dec",
        "summary": "Convert a fraction string to a decimal.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "float"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_expand_dimensions": {
        "since": "2.9.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_expand_dimensions",
        "summary": "Based on a supplied width\/height example, return the biggest possible dimensions based on the max width\/height.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "example_width": {
                "label": "example_width",
                "description": "The width of an example embed.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "example_height": {
                "label": "example_height",
                "description": "The height of an example embed.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "max_width": {
                "label": "max_width",
                "description": "The maximum allowed width.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "max_height": {
                "label": "max_height",
                "description": "The maximum allowed height.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The maximum possible width and height based on the example ratio.",
        "rank": 0
    },
    "wp_ext2type": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_ext2type",
        "summary": "Retrieve the file type based on the extension name.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ext": {
                "label": "ext",
                "description": "The extension to search.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The file type, example: audio, video, document, spreadsheet, etc.",
        "rank": 0
    },
    "wp_extract_urls": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_extract_urls",
        "summary": "Use RegEx to extract URLs from arbitrary content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "Content to extract URLs from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "URLs found in passed string.",
        "rank": 0
    },
    "wp_filter_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_filter_comment",
        "summary": "Filters and sanitizes comment data.",
        "description": "<p>Sets the comment data 'filtered' field to true when finished. This can be checked as to whether the comment should be filtered and to keep from filtering the same comment more than once.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commentdata": {
                "label": "commentdata",
                "description": "Contains information on the comment.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Parsed comment information.",
        "rank": 0
    },
    "wp_filter_kses": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_filter_kses",
        "summary": "Sanitize content with allowed HTML KSES rules.",
        "description": "<p>This function expects slashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Content to filter, expected to be escaped with slashes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content.",
        "rank": 0
    },
    "wp_filter_nohtml_kses": {
        "since": "2.1.0",
        "group": "External",
        "type": "efct",
        "name": "wp_filter_nohtml_kses",
        "summary": "Strips all HTML from a text string.",
        "description": "<p>This function expects slashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Content to strip all HTML from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content without any HTML.",
        "rank": 0
    },
    "wp_filter_object_list": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_filter_object_list",
        "summary": "Filters a list of objects, based on a set of key => value arguments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "An array of objects to filter",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "An array of key =&gt; value arguments to match against each object.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. 'or' means only one element from the array needs to match; 'and' means all elements must match; 'not' means no elements may match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'and'",
                "required": false
            },
            "field": {
                "label": "field",
                "description": "A field from the object to place instead of the entire object.",
                "type": "bool",
                "types": [
                    "bool",
                    "string"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "A list of objects or object fields.",
        "rank": 0
    },
    "wp_filter_oembed_result": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_filter_oembed_result",
        "summary": "Filters the given oEmbed HTML.",
        "description": "<p>If the $url isn't on the trusted providers list, we need to filter the HTML heavily for security.<\/p> <p>Only filters 'rich' and 'html' response types.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "result": {
                "label": "result",
                "description": "The oEmbed HTML result.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "A data object result from an oEmbed provider.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The URL of the content to be embedded.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The filtered and sanitized oEmbed result.",
        "rank": 0
    },
    "wp_filter_post_kses": {
        "since": "2.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_filter_post_kses",
        "summary": "Sanitizes content for allowed HTML tags for post content.",
        "description": "<p>Post content refers to the page contents of the 'post' type and not $_POST data from forms.<\/p> <p>This function expects slashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Post content to filter, expected to be escaped with slashes.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered post content with allowed HTML tags and attributes intact.",
        "rank": 0
    },
    "wp_filter_pre_oembed_result": {
        "since": "4.5.3",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_filter_pre_oembed_result",
        "summary": "Filters the oEmbed result before any HTTP requests are made.",
        "description": "<p>If the URL belongs to the current site, the result is fetched directly instead of going through the oEmbed discovery process.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "result": {
                "label": "result",
                "description": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.",
                "type": "null",
                "types": [
                    "null",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "url": {
                "label": "url",
                "description": "The URL that should be inspected for discovery &lt;link&gt; tags.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "oEmbed remote get arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "string"
        ],
        "return_description": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.                     Null if the URL does not belong to the current site.",
        "rank": 0
    },
    "wp_finalize_scraping_edited_file_errors": {
        "since": "4.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_finalize_scraping_edited_file_errors",
        "summary": "Finalize scraping for edited file errors.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scrape_key": {
                "label": "scrape_key",
                "description": "Scrape key.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_generate_attachment_metadata": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_generate_attachment_metadata",
        "summary": "Generate post thumbnail attachment meta data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment Id to process.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "file": {
                "label": "file",
                "description": "Filepath of the Attached image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Metadata for attachment.",
        "rank": 0
    },
    "wp_generate_auth_cookie": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_generate_auth_cookie",
        "summary": "Generate authentication cookie contents.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "expiration": {
                "label": "expiration",
                "description": "The time the cookie expires as a UNIX timestamp.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "scheme": {
                "label": "scheme",
                "description": "The cookie scheme to use: auth, secure_auth, or logged_in",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'auth'",
                "required": false
            },
            "token": {
                "label": "token",
                "description": "User's session token to use for this cookie",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Authentication cookie contents. Empty string if user does not exist.",
        "rank": 0
    },
    "wp_generate_password": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_generate_password",
        "summary": "Generates a random password drawn from the defined set of characters.",
        "description": "<p>Uses wp_rand() is used to create passwords with far less predictability than similar native PHP functions like rand() or mt_rand().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "length": {
                "label": "length",
                "description": "The length of password to generate.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "12",
                "required": false
            },
            "special_chars": {
                "label": "special_chars",
                "description": "Whether to include standard special characters.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "extra_special_chars": {
                "label": "extra_special_chars",
                "description": "Whether to include other special characters. Used when generating secret keys and salts.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The random password.",
        "rank": 0
    },
    "wp_generate_tag_cloud": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_generate_tag_cloud",
        "summary": "Generates a tag cloud (heatmap) from provided data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tags": {
                "label": "tags",
                "description": "Array of WP_Term objects to generate the tag cloud for.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for generating a tag cloud. <ul><li><b>'smallest'<\/b><br\/><i>(int)<\/i> Smallest font size used to display tags. Paired with the value of $unit, to determine CSS text size unit. Default 8 (pt).<\/li> <li><b>'largest'<\/b><br\/><i>(int)<\/i> Largest font size used to display tags. Paired with the value of $unit, to determine CSS text size unit. Default 22 (pt).<\/li> <li><b>'unit'<\/b><br\/><i>(string)<\/i> CSS text size unit to use with the $smallest and $largest values. Accepts any valid CSS text size unit. Default 'pt'.<\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> The number of tags to return. Accepts any positive integer or zero to return all. Default 0.<\/li> <li><b>'format'<\/b><br\/><i>(string)<\/i> Format to display the tag cloud in. Accepts 'flat' (tags separated with spaces), 'list' (tags displayed in an unordered list), or 'array' (returns an array). Default 'flat'.<\/li> <li><b>'separator'<\/b><br\/><i>(string)<\/i> HTML or text to separate the tags. Default &quot;n&quot; (newline).<\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> Value to order tags by. Accepts 'name' or 'count'. Default 'name'. The &#039;tag_cloud_sort&#039; filter can also affect how tags are sorted.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> How to order the tags. Accepts 'ASC' (ascending), 'DESC' (descending), or 'RAND' (random). Default 'ASC'.<\/li> <li><b>'filter'<\/b><br\/><i>(int|bool)<\/i> Whether to enable filtering of the final output via &#039;wp_generate_tag_cloud&#039;. Default 1|true.<\/li> <li><b>'topic_count_text'<\/b><br\/><i>(string)<\/i> Nooped plural text from _n_noop() to supply to tag counts. Default null.<\/li> <li><b>'topic_count_text_callback'<\/b><br\/><i>(callable)<\/i> Callback used to generate nooped plural text for tag counts based on the count. Default null.<\/li> <li><b>'topic_count_scale_callback'<\/b><br\/><i>(callable)<\/i> Callback used to determine the tag count scaling value. Default default_topic_count_scale().<\/li> <li><b>'show_count'<\/b><br\/><i>(bool|int)<\/i> Whether to display the tag counts. Default 0. Accepts 0, 1, or their bool equivalents.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Tag cloud as a string or an array, depending on 'format' argument.",
        "rank": 0
    },
    "wp_generate_user_request_key": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_generate_user_request_key",
        "summary": "Returns a confirmation key for a user action and stores the hashed version for future comparison.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "Request ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Confirmation key.",
        "rank": 0
    },
    "wp_generate_uuid4": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_generate_uuid4",
        "summary": "Generate a random UUID (version 4).",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "UUID.",
        "rank": 0
    },
    "wp_get_additional_image_sizes": {
        "since": "4.7.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_additional_image_sizes",
        "summary": "Retrieve additional image sizes.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Additional images size data.",
        "rank": 0
    },
    "wp_get_all_sessions": {
        "since": "4.0.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_all_sessions",
        "summary": "Retrieve a list of sessions for the current user.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of sessions.",
        "rank": 0
    },
    "wp_get_archives": {
        "since": "1.2.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_archives",
        "summary": "Display archive links based on type and format.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Default archive links arguments. Optional. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> Type of archive to retrieve. Accepts 'daily', 'weekly', 'monthly', 'yearly', 'postbypost', or 'alpha'. Both 'postbypost' and 'alpha' display the same archive link list as well as post titles instead of displaying dates. The difference between the two is that 'alpha' will order by post title and 'postbypost' will order by post date. Default 'monthly'.<\/li> <li><b>'limit'<\/b><br\/><i>(string|int)<\/i> Number of links to limit the query to. Default empty (no limit).<\/li> <li><b>'format'<\/b><br\/><i>(string)<\/i> Format each link should take using the $before and $after args. Accepts 'link' (&lt;link&gt; tag), 'option' (&lt;option&gt; tag), 'html' (&lt;li&gt; tag), or a custom format, which generates a link anchor with $before preceding and $after succeeding. Default 'html'.<\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> Markup to prepend to the beginning of each link. <\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> Markup to append to the end of each link. <\/li> <li><b>'show_post_count'<\/b><br\/><i>(bool)<\/i> Whether to display the post count alongside the link. Default false.<\/li> <li><b>'echo'<\/b><br\/><i>(bool|int)<\/i> Whether to echo or return the links list. Default 1|true to echo.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Whether to use ascending or descending order. Accepts 'ASC', or 'DESC'. Default 'DESC'.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> Post type. Default 'post'.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when retrieving.",
        "rank": 0
    },
    "wp_get_associated_nav_menu_items": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_associated_nav_menu_items",
        "summary": "Get the menu items associated with a particular object.",
        "description": "",
        "inputs": {
            "object_id": {
                "label": "object_id",
                "description": "The ID of the original object.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "object_type": {
                "label": "object_type",
                "description": "The type of object, such as &quot;taxonomy&quot; or &quot;post_type.&quot;",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_type'",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "If $object_type is &quot;taxonomy&quot;, $taxonomy is the name of the tax that $object_id belongs to",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The array of menu item IDs; empty array if none;",
        "rank": 0
    },
    "wp_get_attachment_caption": {
        "since": "4.6.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_attachment_caption",
        "summary": "Retrieves the caption for an attachment.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID. Default is the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False on failure. Attachment caption on success.",
        "rank": 0
    },
    "wp_get_attachment_id3_keys": {
        "since": "3.9.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_id3_keys",
        "summary": "Returns useful keys to use to lookup data from an attachment's stored metadata.",
        "description": "",
        "inputs": {
            "attachment": {
                "label": "attachment",
                "description": "The current attachment, provided for context.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "context": {
                "label": "context",
                "description": "The context. Accepts 'edit', 'display'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'display'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Key\/value pairs of field keys to labels.",
        "rank": 0
    },
    "wp_get_attachment_image": {
        "since": "2.5.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_image",
        "summary": "Get an HTML img element representing an image attachment",
        "description": "<p>While $size will accept an array, it is better to register a size with add_image_size() so that a cropped version is generated. It's much more efficient than having to find the closest-sized image and then having the browser scale down the image.<\/p>",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "icon": {
                "label": "icon",
                "description": "Whether the image should be treated as an icon.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes for the image markup.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML img element or empty string on failure.",
        "rank": 0
    },
    "wp_get_attachment_image_sizes": {
        "since": "4.4.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_image_sizes",
        "summary": "Retrieves the value for an image attachment's 'sizes' attribute.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'medium'",
                "required": false
            },
            "image_meta": {
                "label": "image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "A valid source size value for use in a 'sizes' attribute or false.",
        "rank": 0
    },
    "wp_get_attachment_image_src": {
        "since": "2.5.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_image_src",
        "summary": "Retrieve an image to represent an attachment.",
        "description": "<p>A mime icon for files, thumbnail or intermediate size for images.<\/p> <p>The returned array contains four values: the URL of the attachment image src, the width of the image file, the height of the image file, and a boolean representing whether the returned array describes an intermediate (generated) image size or the original, full-sized upload.<\/p>",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "icon": {
                "label": "icon",
                "description": "Whether the image should be treated as an icon.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "Returns an array (url, width, height, is_intermediate), or false, if no image is available.",
        "rank": 0
    },
    "wp_get_attachment_image_srcset": {
        "since": "4.4.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_image_srcset",
        "summary": "Retrieves the value for an image attachment's 'srcset' attribute.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "'medium'",
                "required": false
            },
            "image_meta": {
                "label": "image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "bool"
        ],
        "return_description": "A 'srcset' value string or false.",
        "rank": 0
    },
    "wp_get_attachment_image_url": {
        "since": "4.4.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_attachment_image_url",
        "summary": "Get the URL of an image attachment.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "size": {
                "label": "size",
                "description": "Image size to retrieve. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "icon": {
                "label": "icon",
                "description": "Whether the image should be treated as an icon.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Attachment URL or false if no image is available.",
        "rank": 0
    },
    "wp_get_attachment_link": {
        "since": "2.5.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_attachment_link",
        "summary": "Retrieve an attachment page link using an image or icon, if possible.",
        "description": "",
        "inputs": {
            "id": {
                "label": "id",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "size": {
                "label": "size",
                "description": "Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'thumbnail'",
                "required": false
            },
            "permalink": {
                "label": "permalink",
                "description": "Whether to add permalink to image.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "icon": {
                "label": "icon",
                "description": "Whether the attachment is an icon.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Link text to use. Activated by passing a string, false otherwise.",
                "type": "string",
                "types": [
                    "string",
                    "mixed"
                ],
                "default": "false",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Array or string of attributes.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML content.",
        "rank": 0
    },
    "wp_get_attachment_metadata": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_attachment_metadata",
        "summary": "Retrieve attachment meta field for attachment ID.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment post ID. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "unfiltered": {
                "label": "unfiltered",
                "description": "If true, filters are not run.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "Attachment meta field. False on failure.",
        "rank": 0
    },
    "wp_get_attachment_thumb_file": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_attachment_thumb_file",
        "summary": "Retrieve thumbnail for an attachment.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False on failure. Thumbnail file path on success.",
        "rank": 0
    },
    "wp_get_attachment_thumb_url": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_attachment_thumb_url",
        "summary": "Retrieve URL for an attachment thumbnail.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Attachment ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False on failure. Thumbnail URL on success.",
        "rank": 0
    },
    "wp_get_attachment_url": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_attachment_url",
        "summary": "Retrieve the URL for an attachment.",
        "description": "",
        "inputs": {
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment post ID. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Attachment URL, otherwise false.",
        "rank": 0
    },
    "wp_get_audio_extensions": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_audio_extensions",
        "summary": "Returns a filtered list of WP-supported audio formats.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Supported audio formats.",
        "rank": 0
    },
    "wp_get_available_translations": {
        "since": "4.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_available_translations",
        "summary": "Get available translations from the WordPress.org API.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of translations, each an array of data. If the API response results               in an error, an empty array will be returned.",
        "rank": 0
    },
    "wp_get_canonical_url": {
        "since": "4.6.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_canonical_url",
        "summary": "Returns the canonical URL for a post.",
        "description": "<p>When the post is the same as the current requested page the function will handle the pagination arguments too.<\/p>",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The canonical URL, or false if the post does not exist or has not                      been published yet.",
        "rank": 0
    },
    "wp_get_code_editor_settings": {
        "since": "5.0.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_code_editor_settings",
        "summary": "Generate and return code editor settings.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Args. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> The MIME type of the file to be edited.<\/li> <li><b>'file'<\/b><br\/><i>(string)<\/i> Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to $type param.<\/li> <li><b>'theme'<\/b><br\/><i>(WP_Theme)<\/i> Theme being edited when on theme editor.<\/li> <li><b>'plugin'<\/b><br\/><i>(string)<\/i> Plugin being edited when on plugin editor.<\/li> <li><b>'codemirror'<\/b><br\/><i>(array)<\/i> Additional CodeMirror setting overrides.<\/li> <li><b>'csslint'<\/b><br\/><i>(array)<\/i> CSSLint rule overrides.<\/li> <li><b>'jshint'<\/b><br\/><i>(array)<\/i> JSHint rule overrides.<\/li> <li><b>'htmlhint'<\/b><br\/><i>(array)<\/i> JSHint rule overrides.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Settings for the code editor.",
        "rank": 0
    },
    "wp_get_comment_fields_max_lengths": {
        "since": "4.5.0",
        "group": "Comment",
        "type": "fct",
        "name": "wp_get_comment_fields_max_lengths",
        "summary": "Retrieves the maximum character lengths for the comment form fields.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Maximum character length for the comment form fields.",
        "rank": 0
    },
    "wp_get_comment_status": {
        "since": "1.0.0",
        "group": "Comment",
        "type": "fct",
        "name": "wp_get_comment_status",
        "summary": "The status of a comment by ID.",
        "description": "",
        "inputs": {
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure.",
        "rank": 0
    },
    "wp_get_current_commenter": {
        "since": "2.0.4",
        "group": "Comment",
        "type": "fct",
        "name": "wp_get_current_commenter",
        "summary": "Get current commenter's name, email, and URL.",
        "description": "<p>Expects cookies content to already be sanitized. User of this function might wish to recheck the returned array for validity.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Comment author, email, url respectively.",
        "rank": 0
    },
    "wp_get_current_user": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_current_user",
        "summary": "Retrieve the current user object.",
        "description": "<p>Will set the current user, if the current user is not set. The current user will be set to the logged-in person. If no user is logged-in, then it will set the current user to 0, which is invalid and won't have any permissions.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_User",
                "label": "WP_User"
            }
        },
        "return": [
            "WP_User"
        ],
        "return_description": "Current WP_User instance.",
        "rank": 0
    },
    "wp_get_custom_css": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "wp_get_custom_css",
        "summary": "Fetch the saved Custom CSS content for rendering.",
        "description": "",
        "inputs": {
            "stylesheet": {
                "label": "stylesheet",
                "description": "A theme object stylesheet name. Defaults to the current theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The Custom CSS Post content.",
        "rank": 0
    },
    "wp_get_custom_css_post": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "fct",
        "name": "wp_get_custom_css_post",
        "summary": "Fetch the `custom_css` post for a given theme.",
        "description": "",
        "inputs": {
            "stylesheet": {
                "label": "stylesheet",
                "description": "A theme object stylesheet name. Defaults to the current theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "null"
        ],
        "return_description": "The custom_css post or null if none exists.",
        "rank": 0
    },
    "wp_get_db_schema": {
        "since": "3.3.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_db_schema",
        "summary": "Retrieve the SQL for creating database tables.",
        "description": "",
        "inputs": {
            "scope": {
                "label": "scope",
                "description": "The tables for which to retrieve SQL. Can be all, global, ms_global, or blog tables. Defaults to all.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "The site ID for which to retrieve SQL. Default is the current site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The SQL needed to create the requested tables.",
        "rank": 0
    },
    "wp_get_document_title": {
        "since": "4.4.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_document_title",
        "summary": "Returns document title for the current page.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Tag with the document title.",
        "rank": 0
    },
    "wp_get_ext_types": {
        "since": "4.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_ext_types",
        "summary": "Retrieves the list of common file extensions and their types.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of file extensions types keyed by the type of file.",
        "rank": 0
    },
    "wp_get_http_headers": {
        "since": "1.5.1",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_http_headers",
        "summary": "Retrieve HTTP Headers from URL.",
        "description": "",
        "inputs": {
            "url": {
                "label": "url",
                "description": "URL to retrieve HTTP headers from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not Used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "string"
        ],
        "return_description": "False on failure, headers on success.",
        "rank": 0
    },
    "wp_get_image_editor": {
        "since": "3.5.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_image_editor",
        "summary": "Returns a WP_Image_Editor instance and loads file into it.",
        "description": "",
        "inputs": {
            "path": {
                "label": "path",
                "description": "Path to the file to load.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Additional arguments for retrieving the image editor.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Image_Editor",
            "WP_Error"
        ],
        "return_description": "The WP_Image_Editor object if successful, an WP_Error                                  object otherwise.",
        "rank": 0
    },
    "wp_get_image_mime": {
        "since": "4.7.1",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_image_mime",
        "summary": "Returns the real mime type of an image file.",
        "description": "<p>This depends on exif_imagetype() or getimagesize() to determine real mime types.<\/p>",
        "inputs": {
            "file": {
                "label": "file",
                "description": "Full path to the file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The actual mime type or false if the type cannot be determined.",
        "rank": 0
    },
    "wp_get_installed_translations": {
        "since": "3.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "wp_get_installed_translations",
        "summary": "Get installed translations.",
        "description": "<p>Looks in the wp-content\/languages directory for translations of plugins or themes.<\/p>",
        "inputs": {
            "type": {
                "label": "type",
                "description": "What to search for. Accepts 'plugins', 'themes', 'core'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of language data.",
        "rank": 0
    },
    "wp_get_link_cats": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_link_cats",
        "summary": "Retrieves the link categories associated with the link specified.",
        "description": "",
        "inputs": {
            "link_id": {
                "label": "link_id",
                "description": "Link ID to look up",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The requested link's categories",
        "rank": 0
    },
    "wp_get_media_creation_timestamp": {
        "since": "4.9.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_media_creation_timestamp",
        "summary": "Parse creation date from media metadata.",
        "description": "<p>The getID3 library doesn't have a standard method for getting creation dates, so the location of this data can vary based on the MIME type.<\/p>",
        "inputs": {
            "metadata": {
                "label": "metadata",
                "description": "The metadata returned by getID3::analyze().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "A UNIX timestamp for the media's creation date if available                  or a boolean FALSE if a timestamp could not be determined.",
        "rank": 0
    },
    "wp_get_mime_types": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_mime_types",
        "summary": "Retrieve list of mime types and file extensions.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of mime types keyed by the file extension regex corresponding to those types.",
        "rank": 0
    },
    "wp_get_nav_menu_items": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_nav_menu_items",
        "summary": "Retrieves all menu items of a navigation menu.",
        "description": "<p>Note: Most arguments passed to the $args parameter \u2013 save for 'output_key' \u2013 are specifically for retrieving nav_menu_item posts from get_posts() and may only indirectly affect the ultimate ordering and content of the resulting nav menu items that get returned from this function.<\/p>",
        "inputs": {
            "menu": {
                "label": "menu",
                "description": "Menu ID, slug, name, or object.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments to pass to get_posts(). <ul><li><b>'order'<\/b><br\/><i>(string)<\/i> How to order nav menu items as queried with get_posts(). Will be ignored if 'output' is ARRAY_A. Default 'ASC'.<\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> Field to order menu items by as retrieved from get_posts(). Supply an orderby field via 'output_key' to affect the output order of nav menu items. Default 'menu_order'.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> Menu items post type. Default 'nav_menu_item'.<\/li> <li><b>'post_status'<\/b><br\/><i>(string)<\/i> Menu items post status. Default 'publish'.<\/li> <li><b>'output'<\/b><br\/><i>(string)<\/i> How to order outputted menu items. Default ARRAY_A.<\/li> <li><b>'output_key'<\/b><br\/><i>(string)<\/i> Key to use for ordering the actual menu items that get returned. Note that that is not a get_posts() argument and will only affect output of menu items processed in this function. Default 'menu_order'.<\/li> <li><b>'nopaging'<\/b><br\/><i>(bool)<\/i> Whether to retrieve all menu items (true) or paginate (false). Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "array"
        ],
        "return_description": "$items Array of menu items, otherwise false.",
        "rank": 0
    },
    "wp_get_nav_menu_name": {
        "since": "4.9.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_nav_menu_name",
        "summary": "Returns the name of a navigation menu.",
        "description": "",
        "inputs": {
            "location": {
                "label": "location",
                "description": "Menu location identifier.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Menu name.",
        "rank": 0
    },
    "wp_get_nav_menu_object": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_nav_menu_object",
        "summary": "Returns a navigation menu object.",
        "description": "",
        "inputs": {
            "menu": {
                "label": "menu",
                "description": "Menu ID, slug, name, or object.",
                "type": "int",
                "types": [
                    "int",
                    "string",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Term",
            "false"
        ],
        "return_description": "False if $menu param isn't supplied or term does not exist, menu object if successful.",
        "rank": 0
    },
    "wp_get_nav_menu_to_edit": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_nav_menu_to_edit",
        "summary": "Returns the menu formatted to edit.",
        "description": "",
        "inputs": {
            "menu_id": {
                "label": "menu_id",
                "description": "The ID of the menu to format. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "WP_Error"
        ],
        "return_description": "$output The menu formatted to edit or error object on failure.",
        "rank": 0
    },
    "wp_get_nav_menus": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_get_nav_menus",
        "summary": "Returns all navigation menu objects.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Array of arguments passed on to get_terms().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Menu objects.",
        "rank": 0
    },
    "wp_get_nocache_headers": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_nocache_headers",
        "summary": "Get the header information to prevent caching.",
        "description": "<p>The several different headers cover the different ways cache prevention is handled by different browsers<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The associative array of header names and field values.",
        "rank": 0
    },
    "wp_get_object_terms": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "wp_get_object_terms",
        "summary": "Retrieves the terms associated with the given object(s), in the supplied taxonomies.",
        "description": "",
        "inputs": {
            "object_ids": {
                "label": "object_ids",
                "description": "The ID(s) of the object(s) to retrieve.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomies": {
                "label": "taxonomies",
                "description": "The taxonomies to retrieve terms from.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "See WP_Term_Query::__construct() for supported arguments.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "The requested term data or empty array if no terms found.                        WP_Error if any of the $taxonomies don't exist.",
        "rank": 0
    },
    "wp_get_original_referer": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_original_referer",
        "summary": "Retrieve original referer that was posted, if it exists.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False if no original referer or original referer if set.",
        "rank": 0
    },
    "wp_get_password_hint": {
        "since": "4.1.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_password_hint",
        "summary": "Gets the text suggesting how to create strong passwords.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The password hint text.",
        "rank": 0
    },
    "wp_get_plugin_file_editable_extensions": {
        "since": "4.9.0",
        "group": "Filesystem",
        "type": "fct",
        "name": "wp_get_plugin_file_editable_extensions",
        "summary": "Get list of file extensions that are editable in plugins.",
        "description": "",
        "inputs": {
            "plugin": {
                "label": "plugin",
                "description": "Path to the plugin file relative to the plugins directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string[]",
                "label": "string[]"
            }
        },
        "return": [
            "string[]"
        ],
        "return_description": "Array of editable file extensions.",
        "rank": 0
    },
    "wp_get_pomo_file_data": {
        "since": "3.7.0",
        "group": "i18n",
        "type": "fct",
        "name": "wp_get_pomo_file_data",
        "summary": "Extract headers from a PO file.",
        "description": "",
        "inputs": {
            "po_file": {
                "label": "po_file",
                "description": "Path to PO file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "PO file headers.",
        "rank": 0
    },
    "wp_get_popular_importers": {
        "since": "3.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_popular_importers",
        "summary": "Returns a list from WordPress.org of popular importer plugins.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Importers with metadata for each.",
        "rank": 0
    },
    "wp_get_post_autosave": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "fct",
        "name": "wp_get_post_autosave",
        "summary": "Retrieve the autosaved data of the specified post.",
        "description": "<p>Returns a post object containing the information that was autosaved for the specified post. If the optional $user_id is passed, returns the autosave for that user otherwise returns the latest autosave.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "The post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "The post author ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "false"
        ],
        "return_description": "The autosaved data or false on failure or when no autosave exists.",
        "rank": 0
    },
    "wp_get_post_categories": {
        "since": "2.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_post_categories",
        "summary": "Retrieve the list of categories for a post.",
        "description": "<p>Compatibility layer for themes and plugins. Also an easy layer of abstraction away from the complexity of the taxonomy layer.<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Category query parameters. See WP_Term_Query::__construct() for supported arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "List of categories. If the <code>$fields<\/code> argument passed via <code>$args<\/code> is 'all' or                        'all_with_object_id', an array of WP_Term objects will be returned. If <code>$fields<\/code>                        is 'ids', an array of category ids. If <code>$fields<\/code> is 'names', an array of category names.                        WP_Error object if 'category' taxonomy doesn't exist.",
        "rank": 0
    },
    "wp_get_post_parent_id": {
        "since": "3.1.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_post_parent_id",
        "summary": "Returns the ID of the post's parent.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Post parent ID (which can be 0 if there is no parent), or false if the post does not exist.",
        "rank": 0
    },
    "wp_get_post_revision": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "fct",
        "name": "wp_get_post_revision",
        "summary": "Gets a post revision.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "The post ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "OBJECT",
                "required": false
            },
            "filter": {
                "label": "filter",
                "description": "sanitation filter. See sanitize_post().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'raw'",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "array",
            "null"
        ],
        "return_description": "WP_Post (or array) on success, or null on failure.",
        "rank": 0
    },
    "wp_get_post_revisions": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "fct",
        "name": "wp_get_post_revisions",
        "summary": "Returns all revisions of specified post.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments for retrieving post revisions.",
                "type": "array",
                "types": [
                    "array",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of revisions, or an empty array if none.",
        "rank": 0
    },
    "wp_get_post_tags": {
        "since": "2.3.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_post_tags",
        "summary": "Retrieve the tags for a post.",
        "description": "<p>There is only one default for this function, called 'fields' and by default is set to 'all'. There are other defaults that can be overridden in wp_get_object_terms().<\/p>",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Tag query parameters. See WP_Term_Query::__construct() for supported arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Array of WP_Term objects on success or empty array if no tags were found.                        WP_Error object if 'post_tag' taxonomy doesn't exist.",
        "rank": 0
    },
    "wp_get_post_terms": {
        "since": "2.8.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_post_terms",
        "summary": "Retrieves the terms for a post.",
        "description": "",
        "inputs": {
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy slug or array of slugs for which to retrieve terms.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "'post_tag'",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Term query parameters. See WP_Term_Query::__construct() for supported arguments. <ul><li><b>'fields'<\/b><br\/><i>(string)<\/i> Term fields to retrieve. Default 'all'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Array of WP_Term objects on success or empty array if no terms were found.                        WP_Error object if <code>$taxonomy<\/code> doesn't exist.",
        "rank": 0
    },
    "wp_get_raw_referer": {
        "since": "4.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_raw_referer",
        "summary": "Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.",
        "description": "<p>Do not use for redirects, use wp_get_referer() instead.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Referer URL on success, false on failure.",
        "rank": 0
    },
    "wp_get_ready_cron_jobs": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_ready_cron_jobs",
        "summary": "Retrieve cron jobs ready to be run.",
        "description": "<p>Returns the results of _get_cron_array() limited to events ready to be run, ie, with a timestamp in the past.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Cron jobs ready to be run.",
        "rank": 0
    },
    "wp_get_recent_posts": {
        "since": "1.0.0",
        "group": "Post",
        "type": "fct",
        "name": "wp_get_recent_posts",
        "summary": "Retrieve a number of recent posts.",
        "description": "",
        "inputs": {
            "args": {
                "label": "args",
                "description": "Arguments to retrieve posts.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "output": {
                "label": "output",
                "description": "The required return type. One of OBJECT or ARRAY_A, which correspond to a WP_Post object or an associative array, respectively.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "ARRAY_A",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Array of recent posts, where the type of each element is determined by $output parameter.                     Empty array on failure.",
        "rank": 0
    },
    "wp_get_referer": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_referer",
        "summary": "Retrieve referer from '_wp_http_referer' or HTTP referer.",
        "description": "<p>If it's the same as the current request URL, will return false.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "False on failure. Referer URL on success.",
        "rank": 0
    },
    "wp_get_revision_ui_diff": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_get_revision_ui_diff",
        "summary": "Get the revision UI diff.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "The post object. Also accepts a post ID.",
                "type": "object",
                "types": [
                    "object",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "compare_from": {
                "label": "compare_from",
                "description": "The revision ID to compare from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "compare_to": {
                "label": "compare_to",
                "description": "The revision ID to come to.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "Associative array of a post's revisioned fields and their diffs.                    Or, false on failure.",
        "rank": 0
    },
    "wp_get_schedule": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_schedule",
        "summary": "Retrieve the recurrence schedule for an event.",
        "description": "",
        "inputs": {
            "hook": {
                "label": "hook",
                "description": "Action hook to identify the event.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments passed to the event's callback function.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "False, if no schedule. Schedule name on success.",
        "rank": 0
    },
    "wp_get_scheduled_event": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_scheduled_event",
        "summary": "Retrieve a scheduled event.",
        "description": "<p>Retrieve the full event object for a given event, if no timestamp is specified the next scheduled event is returned.<\/p>",
        "inputs": {
            "hook": {
                "label": "hook",
                "description": "Action hook of the event.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function. Although not passed to a callback, these arguments are used to uniquely identify the event, so they should be the same as those used when originally scheduling the event.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "timestamp": {
                "label": "timestamp",
                "description": "Unix timestamp (UTC) of the event. If not specified, the next scheduled event is returned.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "object"
        ],
        "return_description": "The event object. False if the event does not exist.",
        "rank": 0
    },
    "wp_get_schedules": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_schedules",
        "summary": "Retrieve supported event recurrence schedules.",
        "description": "<p>The default supported recurrences are 'hourly', 'twicedaily', and 'daily'. A plugin may add more by hooking into the {@see 'cron_schedules'} filter. The filter accepts an array of arrays. The outer array has a key that is the name of the schedule or for example 'weekly'. The value is an array with two keys, one is 'interval' and the other is 'display'.<\/p> <p>The 'interval' is a number in seconds of when the cron job should run. So for 'hourly', the time is 3600 or 60<em>60. For weekly, the value would be 60<\/em>60<em>24<\/em>7 or 604800. The value of 'interval' would then be 604800.<\/p> <p>The 'display' is the description. For the 'weekly' key, the 'display' would be __( 'Once Weekly' ).<\/p> <p>For your plugin, you will be passed an array. you can easily add your schedule by doing the following.<\/p> \/\/ Filter parameter variable name is 'array'. $array['weekly'] = array( 'interval' =&gt; 604800, 'display' =&gt; __( 'Once Weekly' ) );",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_get_script_polyfill": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_script_polyfill",
        "summary": "Returns contents of an inline script used in appending polyfill scripts for browsers which fail the provided tests. The provided array is a mapping from a condition to verify feature support to its polyfill script handle.",
        "description": "",
        "inputs": {
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "tests": {
                "label": "tests",
                "description": "Features to detect.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Conditional polyfill inline script.",
        "rank": 0
    },
    "wp_get_server_protocol": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_server_protocol",
        "summary": "Return the HTTP protocol sent by the server.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTTP protocol. Default: HTTP\/1.0.",
        "rank": 0
    },
    "wp_get_session_token": {
        "since": "4.0.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_session_token",
        "summary": "Retrieve the current session token from the logged_in cookie.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Token.",
        "rank": 0
    },
    "wp_get_shortlink": {
        "since": "3.0.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_get_shortlink",
        "summary": "Returns a shortlink for a post, page, attachment, or site.",
        "description": "<p>This function exists to provide a shortlink tag that all themes and plugins can target. A plugin must hook in to provide the actual shortlinks. Default shortlink support is limited to providing ?p= style links for posts. Plugins can short-circuit this function via the {@see 'pre_get_shortlink'} filter or filter the output via the {@see 'get_shortlink'} filter.<\/p>",
        "inputs": {
            "id": {
                "label": "id",
                "description": "A post or site id. Default is 0, which means the current post or site.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Whether the id is a 'site' id, 'post' id, or 'media' id. If 'post', the post_type of the post is consulted. If 'query', the current query is consulted to determine the id and context.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post'",
                "required": false
            },
            "allow_slugs": {
                "label": "allow_slugs",
                "description": "Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks                are not enabled.",
        "rank": 0
    },
    "wp_get_split_term": {
        "since": "4.2.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "wp_get_split_term",
        "summary": "Get the new term ID corresponding to a previously split term.",
        "description": "",
        "inputs": {
            "old_term_id": {
                "label": "old_term_id",
                "description": "Term ID. This is the old, pre-split term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy that the term belongs to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "If a previously split term is found corresponding to the old term_id and taxonomy,                   the new term_id will be returned. If no previously split term is found matching                   the parameters, returns false.",
        "rank": 0
    },
    "wp_get_split_terms": {
        "since": "4.2.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "wp_get_split_terms",
        "summary": "Get data about terms that previously shared a single term_id, but have since been split.",
        "description": "",
        "inputs": {
            "old_term_id": {
                "label": "old_term_id",
                "description": "Term ID. This is the old, pre-split term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of new term IDs, keyed by taxonomy.",
        "rank": 0
    },
    "wp_get_term_taxonomy_parent_id": {
        "since": "3.1.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "wp_get_term_taxonomy_parent_id",
        "summary": "Returns the term's parent's term_ID.",
        "description": "",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "False on error.",
        "rank": 0
    },
    "wp_get_theme": {
        "since": "3.4.0",
        "group": "Theme",
        "type": "fct",
        "name": "wp_get_theme",
        "summary": "Gets a WP_Theme object for a theme.",
        "description": "",
        "inputs": {
            "stylesheet": {
                "label": "stylesheet",
                "description": "Directory name for the theme. Optional. Defaults to current theme.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "theme_root": {
                "label": "theme_root",
                "description": "Absolute path of the theme root to look in. Optional. If not specified, get_raw_theme_root() is used to calculate the theme root for the $stylesheet provided (or current theme).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "WP_Theme",
                "label": "WP_Theme"
            }
        },
        "return": [
            "WP_Theme"
        ],
        "return_description": "Theme object. Be sure to check the object's exists() method if you need to confirm the theme's existence.",
        "rank": 0
    },
    "wp_get_theme_file_editable_extensions": {
        "since": false,
        "group": "Filesystem",
        "type": "fct",
        "name": "wp_get_theme_file_editable_extensions",
        "summary": "Get list of file extensions that are editable for a given theme.",
        "description": "",
        "inputs": {
            "theme": {
                "label": "theme",
                "description": "Theme object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "string[]",
                "label": "string[]"
            }
        },
        "return": [
            "string[]"
        ],
        "return_description": "Array of editable file extensions.",
        "rank": 0
    },
    "wp_get_themes": {
        "since": "3.4.0",
        "group": "Theme",
        "type": "fct",
        "name": "wp_get_themes",
        "summary": "Returns an array of WP_Theme objects based on the arguments.",
        "description": "<p>Despite advances over get_themes(), this function is quite expensive, and grows linearly with additional themes. Stick to wp_get_theme() if possible.<\/p>",
        "inputs": {
            "args": {
                "label": "args",
                "description": "The search arguments. <ul><li><b>'errors'<\/b><br\/><i>(mixed)<\/i> True to return themes with errors, false to return themes without errors, null to return all themes. Defaults to false.<\/li> <li><b>'allowed'<\/b><br\/><i>(mixed)<\/i> (Multisite) True to return only allowed themes for a site. False to return only disallowed themes for a site. 'site' to return only site-allowed themes. 'network' to return only network-allowed themes. Null to return all themes. Defaults to null.<\/li> <li><b>'blog_id'<\/b><br\/><i>(int)<\/i> (Multisite) The blog ID used to calculate which themes are allowed. Defaults to 0, synonymous for the current blog.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "WP_Theme[]",
                "label": "WP_Theme[]"
            }
        },
        "return": [
            "WP_Theme[]"
        ],
        "return_description": "Array of WP_Theme objects.",
        "rank": 0
    },
    "wp_get_translation_updates": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_translation_updates",
        "summary": "Retrieves a list of all language updates available.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "object[]",
                "label": "object[]"
            }
        },
        "return": [
            "object[]"
        ],
        "return_description": "Array of translation objects that have available updates.",
        "rank": 0
    },
    "wp_get_unapproved_comment_author_email": {
        "since": "5.1.0",
        "group": "Comment",
        "type": "fct",
        "name": "wp_get_unapproved_comment_author_email",
        "summary": "Get unapproved comment author's email.",
        "description": "<p>Used to allow the commenter to see their pending comment.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The unapproved comment author's email (when supplied).",
        "rank": 0
    },
    "wp_get_update_data": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_update_data",
        "summary": "Collect counts and UI strings for available updates",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_get_update_php_url": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_update_php_url",
        "summary": "Gets the URL to learn more about updating the PHP version the site is running on.",
        "description": "<p>This URL can be overridden by specifying an environment variable WP_UPDATE_PHP_URL or by using the {@see 'wp_update_php_url'} filter. Providing an empty string is not allowed and will result in the default URL being used. Furthermore the page the URL links to should preferably be localized in the site language.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "URL to learn more about updating PHP.",
        "rank": 0
    },
    "wp_get_upload_dir": {
        "since": "4.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_get_upload_dir",
        "summary": "Retrieves uploads directory information.",
        "description": "<p>Same as wp_upload_dir() but &quot;light weight&quot; as it doesn't attempt to create the uploads directory. Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases when not uploading files.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "See wp_upload_dir() for description.",
        "rank": 0
    },
    "wp_get_user_contact_methods": {
        "since": "3.7.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_user_contact_methods",
        "summary": "Set up the user contact methods.",
        "description": "<p>Default contact methods were removed in 3.6. A filter dictates contact methods.<\/p>",
        "inputs": {
            "user": {
                "label": "user",
                "description": "WP_User object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of contact methods and their labels.",
        "rank": 0
    },
    "wp_get_user_request_data": {
        "since": "4.9.6",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_user_request_data",
        "summary": "Return data about a user request.",
        "description": "",
        "inputs": {
            "request_id": {
                "label": "request_id",
                "description": "Request ID to get data about.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User_Request",
            "false"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_get_users_with_no_role": {
        "since": "4.4.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_get_users_with_no_role",
        "summary": "Get the user IDs of all users with no role on this site.",
        "description": "",
        "inputs": {
            "site_id": {
                "label": "site_id",
                "description": "The site ID to get users with no role for. Defaults to the current site.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of user IDs.",
        "rank": 0
    },
    "wp_get_video_extensions": {
        "since": "3.6.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_get_video_extensions",
        "summary": "Returns a filtered list of WP-supported video formats.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of supported video formats.",
        "rank": 0
    },
    "wp_guess_url": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_guess_url",
        "summary": "Guess the URL for the site.",
        "description": "<p>Will remove wp-admin links to retrieve only return URLs not in the wp-admin directory.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The guessed URL.",
        "rank": 0
    },
    "wp_handle_comment_submission": {
        "since": "4.4.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_handle_comment_submission",
        "summary": "Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form.",
        "description": "<p>This function expects unslashed data, as opposed to functions such as wp_new_comment() which expect slashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_data": {
                "label": "comment_data",
                "description": "Comment data. <ul><li><b>'comment_post_ID'<\/b><br\/><i>(string|int)<\/i> The ID of the post that relates to the comment.<\/li> <li><b>'author'<\/b><br\/><i>(string)<\/i> The name of the comment author.<\/li> <li><b>'email'<\/b><br\/><i>(string)<\/i> The comment author email address.<\/li> <li><b>'url'<\/b><br\/><i>(string)<\/i> The comment author URL.<\/li> <li><b>'comment'<\/b><br\/><i>(string)<\/i> The content of the comment.<\/li> <li><b>'comment_parent'<\/b><br\/><i>(string|int)<\/i> The ID of this comment's parent, if any. Default 0.<\/li> <li><b>'_wp_unfiltered_html_comment'<\/b><br\/><i>(string)<\/i> The nonce value for allowing unfiltered HTML.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Comment",
            "WP_Error"
        ],
        "return_description": "A WP_Comment object on success, a WP_Error object on failure.",
        "rank": 0
    },
    "wp_handle_sideload": {
        "since": "2.6.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_handle_sideload",
        "summary": "Wrapper for _wp_handle_upload().",
        "description": "<p>Passes the {@see 'wp_handle_sideload'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "An array similar to that of a PHP $_FILES POST array",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "overrides": {
                "label": "overrides",
                "description": "An associative array of names=&gt;values to override default variables.",
                "type": "array",
                "types": [
                    "array",
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "time": {
                "label": "time",
                "description": "Time formatted in 'yyyy\/mm'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "On success, returns an associative array of file attributes. On failure, returns               $overrides['upload_error_handler'](&amp;$file, $message ) or array( 'error'=&gt;$message ).",
        "rank": 0
    },
    "wp_handle_upload": {
        "since": "2.0.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_handle_upload",
        "summary": "Wrapper for _wp_handle_upload().",
        "description": "<p>Passes the {@see 'wp_handle_upload'} action.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Reference to a single element of $_FILES. Call the function once for each uploaded file.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "overrides": {
                "label": "overrides",
                "description": "An associative array of names=&gt;values to override default variables.",
                "type": "array",
                "types": [
                    "array",
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "time": {
                "label": "time",
                "description": "Time formatted in 'yyyy\/mm'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "On success, returns an associative array of file attributes. On failure, returns               $overrides['upload_error_handler'](&amp;$file, $message ) or array( 'error'=&gt;$message ).",
        "rank": 0
    },
    "wp_hash": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_hash",
        "summary": "Get hash of given string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Plain text to hash",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "scheme": {
                "label": "scheme",
                "description": "Authentication scheme (auth, secure_auth, logged_in, nonce)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'auth'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Hash of $data",
        "rank": 0
    },
    "wp_hash_password": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_hash_password",
        "summary": "Create a hash (encrypt) of a plain text password.",
        "description": "<p>For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "password": {
                "label": "password",
                "description": "Plain text user password to hash",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The hash string of the password",
        "rank": 0
    },
    "wp_heartbeat_set_suspension": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_heartbeat_set_suspension",
        "summary": "Disable suspension of Heartbeat on the Add\/Edit Post screens.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "settings": {
                "label": "settings",
                "description": "An array of Heartbeat settings.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Filtered Heartbeat settings.",
        "rank": 0
    },
    "wp_heartbeat_settings": {
        "since": "3.6.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_heartbeat_settings",
        "summary": "Default settings for heartbeat",
        "description": "<p>Outputs the nonce used in the heartbeat XHR<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "settings": {
                "label": "settings",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$settings",
        "rank": 0
    },
    "wp_html_excerpt": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_html_excerpt",
        "summary": "Safely extracts not more than the first $count characters from html string.",
        "description": "<p>UTF-8, tags and entities safe prefix extraction. Entities inside will <em>NOT<\/em> be counted as one character. For example &amp; will be counted as 4, &lt; as 3, etc.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "String to get the excerpt from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "count": {
                "label": "count",
                "description": "Maximum number of characters to take.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "more": {
                "label": "more",
                "description": "What to append if $str needs to be trimmed. Defaults to empty string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The excerpt.",
        "rank": 0
    },
    "wp_html_split": {
        "since": "4.2.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_html_split",
        "summary": "Separate HTML elements and comments from the text.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "input": {
                "label": "input",
                "description": "The text which has to be formatted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The formatted text.",
        "rank": 0
    },
    "wp_http_supports": {
        "since": "3.2.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_http_supports",
        "summary": "Determines if there is an HTTP Transport that can process this request.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "capabilities": {
                "label": "capabilities",
                "description": "Array of capabilities to test or a wp_remote_request() $args array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "If given, will check if the URL requires SSL and adds that requirement to the capabilities array.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_http_validate_url": {
        "since": "3.5.2",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_http_validate_url",
        "summary": "Validate a URL for safe use in the HTTP API.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "URL or false on failure.",
        "rank": 0
    },
    "wp_iframe": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_iframe",
        "summary": "Adds the iframe to display content for the media upload page",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content_func": {
                "label": "content_func",
                "description": "",
                "type": "string",
                "types": [
                    "string",
                    "callable"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_image_add_srcset_and_sizes": {
        "since": "4.4.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_image_add_srcset_and_sizes",
        "summary": "Adds 'srcset' and 'sizes' attributes to an existing 'img' element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "image": {
                "label": "image",
                "description": "An HTML 'img' element to be filtered.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "image_meta": {
                "label": "image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Image attachment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted 'img' element with 'srcset' and 'sizes' attributes added.",
        "rank": 0
    },
    "wp_image_editor": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_image_editor",
        "summary": "Loads the WP image-editing interface.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "msg": {
                "label": "msg",
                "description": "Message to display for image editor updates or errors.",
                "type": "bool",
                "types": [
                    "bool",
                    "object"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_image_editor_supports": {
        "since": "3.5.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_image_editor_supports",
        "summary": "Tests whether there is an editor that supports a given mime type or methods.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of arguments to retrieve the image editor supports.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if an eligible editor is found; false otherwise.",
        "rank": 0
    },
    "wp_image_matches_ratio": {
        "since": "4.6.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_image_matches_ratio",
        "summary": "Helper function to test if aspect ratios for two images match.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "source_width": {
                "label": "source_width",
                "description": "Width of the first image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "source_height": {
                "label": "source_height",
                "description": "Height of the first image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "target_width": {
                "label": "target_width",
                "description": "Width of the second image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "target_height": {
                "label": "target_height",
                "description": "Height of the second image in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if aspect ratios match within 1px. False if not.",
        "rank": 0
    },
    "wp_imagecreatetruecolor": {
        "since": "2.9.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_imagecreatetruecolor",
        "summary": "Create new GD image resource with transparency support",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "width": {
                "label": "width",
                "description": "Image width in pixels.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "height": {
                "label": "height",
                "description": "Image height in pixels..",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "resource",
                "label": "resource"
            }
        },
        "return": [
            "resource"
        ],
        "return_description": "The GD image resource.",
        "rank": 0
    },
    "wp_import_cleanup": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_import_cleanup",
        "summary": "Cleanup importer.",
        "description": "<p>Removes attachment based on ID.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Importer ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_import_handle_upload": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_import_handle_upload",
        "summary": "Handle importer uploading and add attachment.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Uploaded file's details on success, error message on failure",
        "rank": 0
    },
    "wp_import_upload_form": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_import_upload_form",
        "summary": "Outputs the form used by the importers to accept the data to be imported",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "The action attribute for the form.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_initialize_site": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_initialize_site",
        "summary": "Runs the initialization routine for a given site.",
        "description": "<p>This process includes creating the site's database tables and populating them with defaults.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Arguments to modify the initialization behavior. <ul><li><b>'user_id'<\/b><br\/><i>(int)<\/i> Required. User ID for the site administrator.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Site title. Default is 'Site %d' where %d is the site ID.<\/li> <li><b>'options'<\/b><br\/><i>(array)<\/i> Custom option $key =&gt; $value pairs to use. <\/li> <li><b>'meta'<\/b><br\/><i>(array)<\/i> Custom site metadata $key =&gt; $value pairs to use. <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, or error object on failure.",
        "rank": 0
    },
    "wp_insert_attachment": {
        "since": "2.0.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_insert_attachment",
        "summary": "Insert an attachment.",
        "description": "<p>If you set the 'ID' in the $args parameter, it will mean that you are updating and attempt to update the attachment. You can also set the attachment name or title by setting the key 'post_name' or 'post_title'.<\/p> <p>You can set the dates for the attachment manually by setting the 'post_date' and 'post_date_gmt' keys' values.<\/p> <p>By default, the comments will use the default settings for whether the comments are allowed. You can close them manually or keep them open by setting the value for the 'comment_status' key.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Arguments for inserting an attachment.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "file": {
                "label": "file",
                "description": "Filename.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "false",
                "required": false
            },
            "parent": {
                "label": "parent",
                "description": "Parent post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "wp_error": {
                "label": "wp_error",
                "description": "Whether to return a WP_Error on failure.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The attachment ID on success. The value 0 or WP_Error on failure.",
        "rank": 0
    },
    "wp_insert_category": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_insert_category",
        "summary": "Updates an existing Category or creates a new Category.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "catarr": {
                "label": "catarr",
                "description": "Array of arguments for inserting a new category. <ul><li><b>'cat_ID'<\/b><br\/><i>(int)<\/i> Category ID. A non-zero value updates an existing category. Default 0.<\/li> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy slug. Default 'category'.<\/li> <li><b>'cat_name'<\/b><br\/><i>(string)<\/i> Category name. Default empty.<\/li> <li><b>'category_description'<\/b><br\/><i>(string)<\/i> Category description. Default empty.<\/li> <li><b>'category_nicename'<\/b><br\/><i>(string)<\/i> Category nice (display) name. Default empty.<\/li> <li><b>'category_parent'<\/b><br\/><i>(int|string)<\/i> Category parent ID. Default empty.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "wp_error": {
                "label": "wp_error",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "object"
        ],
        "return_description": "The ID number of the new or updated Category on success. Zero or a WP_Error on failure,                    depending on param $wp_error.",
        "rank": 0
    },
    "wp_insert_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_insert_comment",
        "summary": "Inserts a comment into the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commentdata": {
                "label": "commentdata",
                "description": "Array of arguments for inserting a new comment. <ul><li><b>'comment_agent'<\/b><br\/><i>(string)<\/i> The HTTP user agent of the $comment_author when the comment was submitted. Default empty.<\/li> <li><b>'comment_approved'<\/b><br\/><i>(int|string)<\/i> Whether the comment has been approved. Default 1.<\/li> <li><b>'comment_author'<\/b><br\/><i>(string)<\/i> The name of the author of the comment. Default empty.<\/li> <li><b>'comment_author_email'<\/b><br\/><i>(string)<\/i> The email address of the $comment_author. Default empty.<\/li> <li><b>'comment_author_IP'<\/b><br\/><i>(string)<\/i> The IP address of the $comment_author. Default empty.<\/li> <li><b>'comment_author_url'<\/b><br\/><i>(string)<\/i> The URL address of the $comment_author. Default empty.<\/li> <li><b>'comment_content'<\/b><br\/><i>(string)<\/i> The content of the comment. Default empty.<\/li> <li><b>'comment_date'<\/b><br\/><i>(string)<\/i> The date the comment was submitted. To set the date manually, $comment_date_gmt must also be specified. Default is the current time.<\/li> <li><b>'comment_date_gmt'<\/b><br\/><i>(string)<\/i> The date the comment was submitted in the GMT timezone. Default is $comment_date in the site's GMT timezone.<\/li> <li><b>'comment_karma'<\/b><br\/><i>(int)<\/i> The karma of the comment. Default 0.<\/li> <li><b>'comment_parent'<\/b><br\/><i>(int)<\/i> ID of this comment's parent, if any. Default 0.<\/li> <li><b>'comment_post_ID'<\/b><br\/><i>(int)<\/i> ID of the post that relates to the comment, if any. Default 0.<\/li> <li><b>'comment_type'<\/b><br\/><i>(string)<\/i> Comment type. Default empty.<\/li> <li><b>'comment_meta'<\/b><br\/><i>(array)<\/i> Optional. Array of key\/value pairs to be stored in commentmeta for the new comment.<\/li> <li><b>'user_id'<\/b><br\/><i>(int)<\/i> ID of the user who submitted the comment. Default 0.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "The new comment's ID on success, false on failure.",
        "rank": 0
    },
    "wp_insert_link": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_insert_link",
        "summary": "Inserts\/updates links into\/in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "linkdata": {
                "label": "linkdata",
                "description": "Elements that make up the link to insert.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "wp_error": {
                "label": "wp_error",
                "description": "Whether to return a WP_Error object on failure.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Value 0 or WP_Error on failure. The link ID on success.",
        "rank": 0
    },
    "wp_insert_post": {
        "since": "1.0.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_insert_post",
        "summary": "Insert or update a post.",
        "description": "<p>If the $postarr parameter has 'ID' set to a value, then post will be updated.<\/p> <p>You can set the post date manually, by setting the values for 'post_date' and 'post_date_gmt' keys. You can close the comments or open the comments by setting the value for 'comment_status' key.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "postarr": {
                "label": "postarr",
                "description": "An array of elements that make up a post to update or insert. <ul><li><b>'ID'<\/b><br\/><i>(int)<\/i> The post ID. If equal to something other than 0, the post with that ID will be updated. Default 0.<\/li> <li><b>'post_author'<\/b><br\/><i>(int)<\/i> The ID of the user who added the post. Default is the current user ID.<\/li> <li><b>'post_date'<\/b><br\/><i>(string)<\/i> The date of the post. Default is the current time.<\/li> <li><b>'post_date_gmt'<\/b><br\/><i>(string)<\/i> The date of the post in the GMT timezone. Default is the value of $post_date.<\/li> <li><b>'post_content'<\/b><br\/><i>(mixed)<\/i> The post content. Default empty.<\/li> <li><b>'post_content_filtered'<\/b><br\/><i>(string)<\/i> The filtered post content. Default empty.<\/li> <li><b>'post_title'<\/b><br\/><i>(string)<\/i> The post title. Default empty.<\/li> <li><b>'post_excerpt'<\/b><br\/><i>(string)<\/i> The post excerpt. Default empty.<\/li> <li><b>'post_status'<\/b><br\/><i>(string)<\/i> The post status. Default 'draft'.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> The post type. Default 'post'.<\/li> <li><b>'comment_status'<\/b><br\/><i>(string)<\/i> Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.<\/li> <li><b>'ping_status'<\/b><br\/><i>(string)<\/i> Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.<\/li> <li><b>'post_password'<\/b><br\/><i>(string)<\/i> The password to access the post. Default empty.<\/li> <li><b>'post_name'<\/b><br\/><i>(string)<\/i> The post name. Default is the sanitized post title when creating a new post.<\/li> <li><b>'to_ping'<\/b><br\/><i>(string)<\/i> Space or carriage return-separated list of URLs to ping. Default empty.<\/li> <li><b>'pinged'<\/b><br\/><i>(string)<\/i> Space or carriage return-separated list of URLs that have been pinged. Default empty.<\/li> <li><b>'post_modified'<\/b><br\/><i>(string)<\/i> The date when the post was last modified. Default is the current time.<\/li> <li><b>'post_modified_gmt'<\/b><br\/><i>(string)<\/i> The date when the post was last modified in the GMT timezone. Default is the current time.<\/li> <li><b>'post_parent'<\/b><br\/><i>(int)<\/i> Set this for the post it belongs to, if any. Default 0.<\/li> <li><b>'menu_order'<\/b><br\/><i>(int)<\/i> The order the post should be displayed in. Default 0.<\/li> <li><b>'post_mime_type'<\/b><br\/><i>(string)<\/i> The mime type of the post. Default empty.<\/li> <li><b>'guid'<\/b><br\/><i>(string)<\/i> Global Unique ID for referencing the post. Default empty.<\/li> <li><b>'post_category'<\/b><br\/><i>(array)<\/i> Array of category IDs. Defaults to value of the 'default_category' option.<\/li> <li><b>'tags_input'<\/b><br\/><i>(array)<\/i> Array of tag names, slugs, or IDs. Default empty.<\/li> <li><b>'tax_input'<\/b><br\/><i>(array)<\/i> Array of taxonomy terms keyed by their taxonomy name. Default empty.<\/li> <li><b>'meta_input'<\/b><br\/><i>(array)<\/i> Array of post meta values keyed by their post meta key. Default empty.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "wp_error": {
                "label": "wp_error",
                "description": "Whether to return a WP_Error on failure.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The post ID on success. The value 0 or WP_Error on failure.",
        "rank": 0
    },
    "wp_insert_site": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_insert_site",
        "summary": "Inserts a new site into the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Data for the new site that should be inserted. <ul><li><b>'domain'<\/b><br\/><i>(string)<\/i> Site domain. Default empty string.<\/li> <li><b>'path'<\/b><br\/><i>(string)<\/i> Site path. Default '\/'.<\/li> <li><b>'network_id'<\/b><br\/><i>(int)<\/i> The site's network ID. Default is the current network ID.<\/li> <li><b>'registered'<\/b><br\/><i>(string)<\/i> When the site was registered, in SQL datetime format. Default is the current time.<\/li> <li><b>'last_updated'<\/b><br\/><i>(string)<\/i> When the site was last updated, in SQL datetime format. Default is the value of $registered.<\/li> <li><b>'public'<\/b><br\/><i>(int)<\/i> Whether the site is public. Default 1.<\/li> <li><b>'archived'<\/b><br\/><i>(int)<\/i> Whether the site is archived. Default 0.<\/li> <li><b>'mature'<\/b><br\/><i>(int)<\/i> Whether the site is mature. Default 0.<\/li> <li><b>'spam'<\/b><br\/><i>(int)<\/i> Whether the site is spam. Default 0.<\/li> <li><b>'deleted'<\/b><br\/><i>(int)<\/i> Whether the site is deleted. Default 0.<\/li> <li><b>'lang_id'<\/b><br\/><i>(int)<\/i> The site's language ID. Currently unused. Default 0.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The new site's ID on success, or error object on failure.",
        "rank": 0
    },
    "wp_insert_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_insert_term",
        "summary": "Add a new term to the database.",
        "description": "<p>A non-existent term is inserted in the following sequence:<\/p> <li>The term is added to the term table, then related to the taxonomy.<\/li> <li>If everything is correct, several actions are fired.<\/li> <li>The 'term_id_filter' is evaluated.<\/li> <li>The term cache is cleaned.<\/li> <li>Several more actions are fired.<\/li> <li>An array is returned containing the term_id and term_taxonomy_id.<\/li> <p>If the 'slug' argument is not empty, then it is checked to see if the term is invalid. If it is not a valid, existing term, it is added and the term_id is given.<\/p> <p>If the taxonomy is hierarchical, and the 'parent' argument is not empty, the term is inserted and the term_id will be given.<\/p> <p>Error handling: If $taxonomy does not exist or $term is empty, a WP_Error object will be returned.<\/p> <p>If the term already exists on the same hierarchical level, or the term slug and name are not unique, a WP_Error object will be returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "The term to add or update.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The taxonomy to which to add the term.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for inserting a term. <ul><li><b>'alias_of'<\/b><br\/><i>(string)<\/i> Slug of the term to make this term an alias of. Default empty string. Accepts a term slug.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> The term description. Default empty string.<\/li> <li><b>'parent'<\/b><br\/><i>(int)<\/i> The id of the parent term. Default 0.<\/li> <li><b>'slug'<\/b><br\/><i>(string)<\/i> The term slug to use. Default empty string.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "An array containing the <code>term_id<\/code> and <code>term_taxonomy_id<\/code>,                        WP_Error otherwise.",
        "rank": 0
    },
    "wp_insert_user": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_insert_user",
        "summary": "Insert a user into the database.",
        "description": "<p>Most of the $userdata array fields have filters associated with the values. Exceptions are 'ID', 'rich_editing', 'syntax_highlighting', 'comment_shortcuts', 'admin_color', 'use_ssl', 'user_registered', and 'role'. The filters have the prefix 'pre<em>user<\/em>' followed by the field name. An example using 'description' would have the filter called, 'pre_user_description' that can be hooked into.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "userdata": {
                "label": "userdata",
                "description": "An array, object, or WP_User object of user data arguments. <ul><li><b>'ID'<\/b><br\/><i>(int)<\/i> User ID. If supplied, the user will be updated.<\/li> <li><b>'user_pass'<\/b><br\/><i>(string)<\/i> The plain-text user password.<\/li> <li><b>'user_login'<\/b><br\/><i>(string)<\/i> The user's login username.<\/li> <li><b>'user_nicename'<\/b><br\/><i>(string)<\/i> The URL-friendly user name.<\/li> <li><b>'user_url'<\/b><br\/><i>(string)<\/i> The user URL.<\/li> <li><b>'user_email'<\/b><br\/><i>(string)<\/i> The user email address.<\/li> <li><b>'display_name'<\/b><br\/><i>(string)<\/i> The user's display name. Default is the user's username.<\/li> <li><b>'nickname'<\/b><br\/><i>(string)<\/i> The user's nickname. Default is the user's username.<\/li> <li><b>'first_name'<\/b><br\/><i>(string)<\/i> The user's first name. For new users, will be used to build the first part of the user's display name if $display_name is not specified.<\/li> <li><b>'last_name'<\/b><br\/><i>(string)<\/i> The user's last name. For new users, will be used to build the second part of the user's display name if $display_name is not specified.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> The user's biographical description.<\/li> <li><b>'rich_editing'<\/b><br\/><i>(string|bool)<\/i> Whether to enable the rich-editor for the user. False if not empty.<\/li> <li><b>'syntax_highlighting'<\/b><br\/><i>(string|bool)<\/i> Whether to enable the rich code editor for the user. False if not empty.<\/li> <li><b>'comment_shortcuts'<\/b><br\/><i>(string|bool)<\/i> Whether to enable comment moderation keyboard shortcuts for the user. Default false.<\/li> <li><b>'admin_color'<\/b><br\/><i>(string)<\/i> Admin color scheme for the user. Default 'fresh'.<\/li> <li><b>'use_ssl'<\/b><br\/><i>(bool)<\/i> Whether the user should always access the admin over https. Default false.<\/li> <li><b>'user_registered'<\/b><br\/><i>(string)<\/i> Date the user registered. Format is 'Y-m-d H:i:s'.<\/li> <li><b>'show_admin_bar_front'<\/b><br\/><i>(string|bool)<\/i> Whether to display the Admin Bar for the user on the site's front end. Default true.<\/li> <li><b>'role'<\/b><br\/><i>(string)<\/i> User's role.<\/li> <li><b>'locale'<\/b><br\/><i>(string)<\/i> User's locale. Default empty.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "object",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The newly created user's ID or a WP_Error object if the user could not                      be created.",
        "rank": 0
    },
    "wp_install": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_install",
        "summary": "Installs the site.",
        "description": "<p>Runs the required functions to set up and populate the database, including primary admin user and initial options.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_title": {
                "label": "blog_title",
                "description": "Site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_name": {
                "label": "user_name",
                "description": "User's username.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "User's email.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "public": {
                "label": "public",
                "description": "Whether site is public.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "user_password": {
                "label": "user_password",
                "description": "User's chosen password. Default empty (random password).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "language": {
                "label": "language",
                "description": "Language chosen.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array keys 'url', 'user_id', 'password', and 'password_message'.",
        "rank": 0
    },
    "wp_install_defaults": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_install_defaults",
        "summary": "Creates the initial content for a newly-installed site.",
        "description": "<p>Adds the default &quot;Uncategorized&quot; category, the first post (with comment), first page, and default widgets for default theme for the current version.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_install_language_form": {
        "since": "4.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_install_language_form",
        "summary": "Output the select form for the language selection on the installation screen.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "languages": {
                "label": "languages",
                "description": "Array of available languages (populated via the Translation API).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_install_maybe_enable_pretty_permalinks": {
        "since": "4.2.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_install_maybe_enable_pretty_permalinks",
        "summary": "Maybe enable pretty permalinks on installation.",
        "description": "<p>If after enabling pretty permalinks don't work, fallback to query-string permalinks.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether pretty permalinks are enabled. False otherwise.",
        "rank": 0
    },
    "wp_installing": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_installing",
        "summary": "Check or set whether WordPress is in \"installation\" mode.",
        "description": "<p>If the WP_INSTALLING constant is defined during the bootstrap, wp_installing() will default to true.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "is_installing": {
                "label": "is_installing",
                "description": "True to set WP into Installing mode, false to turn Installing mode off. Omit this parameter if you only want to fetch the current status.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if WP is installing, otherwise false. When a <code>$is_installing<\/code> is passed, the function will              report whether WP was in installing mode prior to the change to <code>$is_installing<\/code>.",
        "rank": 0
    },
    "wp_is_file_mod_allowed": {
        "since": "4.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_file_mod_allowed",
        "summary": "Determines whether file modifications are allowed.",
        "description": "",
        "inputs": {
            "context": {
                "label": "context",
                "description": "The usage context.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if file modification is allowed, false otherwise.",
        "rank": 0
    },
    "wp_is_ini_value_changeable": {
        "since": "4.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_ini_value_changeable",
        "summary": "Determines whether a PHP ini value is changeable at runtime.",
        "description": "",
        "inputs": {
            "setting": {
                "label": "setting",
                "description": "The name of the ini setting to check.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the value is changeable at runtime. False otherwise.",
        "rank": 0
    },
    "wp_is_json_request": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_json_request",
        "summary": "Checks whether current request is a JSON request, or is expecting a JSON response.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if Accepts or Content-Type headers contain application\/json, false otherwise.",
        "rank": 0
    },
    "wp_is_large_network": {
        "since": "3.3.0",
        "group": "Multisite",
        "type": "fct",
        "name": "wp_is_large_network",
        "summary": "Whether or not we have a large network.",
        "description": "<p>The default criteria for a large network is either more than 10,000 users or more than 10,000 sites. Plugins can alter this criteria using the {@see 'wp_is_large_network'} filter.<\/p>",
        "inputs": {
            "using": {
                "label": "using",
                "description": "'sites or 'users'. Default is 'sites'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'sites'",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the network meets the criteria for large. False otherwise.",
        "rank": 0
    },
    "wp_is_mobile": {
        "since": "3.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_mobile",
        "summary": "Test if the current browser runs on a mobile device (smart phone, tablet, etc.)",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_is_numeric_array": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_numeric_array",
        "summary": "Determines if the variable is a numeric-indexed array.",
        "description": "",
        "inputs": {
            "data": {
                "label": "data",
                "description": "Variable to check.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the variable is a list.",
        "rank": 0
    },
    "wp_is_post_autosave": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "fct",
        "name": "wp_is_post_autosave",
        "summary": "Determines if the specified post is an autosave.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if not a revision, ID of autosave's parent otherwise",
        "rank": 0
    },
    "wp_is_post_revision": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "fct",
        "name": "wp_is_post_revision",
        "summary": "Determines if the specified post is a revision.",
        "description": "",
        "inputs": {
            "post": {
                "label": "post",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if not a revision, ID of revision's parent otherwise.",
        "rank": 0
    },
    "wp_is_site_initialized": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "fct",
        "name": "wp_is_site_initialized",
        "summary": "Checks whether a site is initialized.",
        "description": "<p>A site is considered initialized when its database tables are present.<\/p>",
        "inputs": {
            "site_id": {
                "label": "site_id",
                "description": "Site ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the site is initialized, false otherwise.",
        "rank": 0
    },
    "wp_is_stream": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_stream",
        "summary": "Test if a given path is a stream URL",
        "description": "",
        "inputs": {
            "path": {
                "label": "path",
                "description": "The resource path or URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the path is a stream URL.",
        "rank": 0
    },
    "wp_is_uuid": {
        "since": "4.9.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_uuid",
        "summary": "Validates that a UUID is valid.",
        "description": "",
        "inputs": {
            "uuid": {
                "label": "uuid",
                "description": "UUID to check.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "version": {
                "label": "version",
                "description": "Specify which version of UUID to check against. Default is none, to accept any UUID version. Otherwise, only version allowed is 4.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "The string is a valid UUID or false on failure.",
        "rank": 0
    },
    "wp_is_writable": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_is_writable",
        "summary": "Determine if a directory is writable.",
        "description": "<p>This function is used to work around certain ACL issues in PHP primarily affecting Windows Servers.<\/p>",
        "inputs": {
            "path": {
                "label": "path",
                "description": "Path to check for write-ability.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the path is writable.",
        "rank": 0
    },
    "wp_iso_descrambler": {
        "since": "1.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_iso_descrambler",
        "summary": "Convert to ASCII from email subjects.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Subject line",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted string to ASCII",
        "rank": 0
    },
    "wp_json_encode": {
        "since": "4.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_json_encode",
        "summary": "Encode a variable into JSON, with some sanity checks.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Variable (usually an array or object) to encode as JSON.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Options to be passed to json_encode(). Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "depth": {
                "label": "depth",
                "description": "Maximum depth to walk through $data. Must be greater than 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "512",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "The JSON encoded string, or false if it cannot be encoded.",
        "rank": 0
    },
    "wp_kses": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses",
        "summary": "Filters text content and strips out disallowed HTML.",
        "description": "<p>This function makes sure that only the allowed HTML element names, attribute names, attribute values, and HTML entities will occur in the given text string.<\/p> <p>This function expects unslashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Text content to filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_html": {
                "label": "allowed_html",
                "description": "An array of allowed HTML elements and attributes, or a context name such as 'post'.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content containing only the allowed HTML.",
        "rank": 0
    },
    "wp_kses_allowed_html": {
        "since": "3.5.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_allowed_html",
        "summary": "Returns an array of allowed HTML tags and attributes for a given context.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "The context for which to retrieve tags. Allowed values are 'post', 'strip', 'data', 'entities', or the name of a field filter such as 'pre_user_description'.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of allowed HTML tags and their allowed attributes.",
        "rank": 0
    },
    "wp_kses_array_lc": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_array_lc",
        "summary": "Converts the keys of an array to lowercase.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "inarray": {
                "label": "inarray",
                "description": "Unfiltered array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Fixed array with all lowercase keys.",
        "rank": 0
    },
    "wp_kses_attr": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_attr",
        "summary": "Removes all attributes, if none are allowed for this element.",
        "description": "<p>If some are allowed it calls wp_kses_hair() to split them further, and then it builds up new HTML code from the data that kses_hair() returns. It also removes &lt; and &gt; characters, if there are any left. One more thing it does is to check if the tag has a closing XHTML slash, and if it does, it puts one in the returned code as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "element": {
                "label": "element",
                "description": "HTML element\/tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "attr": {
                "label": "attr",
                "description": "HTML attributes from HTML element to closing HTML element tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_html": {
                "label": "allowed_html",
                "description": "Allowed HTML elements.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized HTML element.",
        "rank": 0
    },
    "wp_kses_attr_check": {
        "since": "4.2.3",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_attr_check",
        "summary": "Determines whether an attribute is allowed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "The attribute name. Passed by reference. Returns empty string when not allowed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "The attribute value. Passed by reference. Returns a filtered value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "whole": {
                "label": "whole",
                "description": "The name=value input. Passed by reference. Returns filtered input.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "vless": {
                "label": "vless",
                "description": "Whether the attribute is valueless. Use 'y' or 'n'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "element": {
                "label": "element",
                "description": "The name of the element to which this attribute belongs.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_html": {
                "label": "allowed_html",
                "description": "The full list of allowed elements and attributes.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether or not the attribute is allowed.",
        "rank": 0
    },
    "wp_kses_attr_parse": {
        "since": "4.2.3",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_attr_parse",
        "summary": "Finds all attributes of an HTML element.",
        "description": "<p>Does not modify input. May return &quot;evil&quot; output.<\/p> <p>Based on wp_kses_split2() and wp_kses_attr().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "element": {
                "label": "element",
                "description": "HTML element.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "List of attributes found in the element. Returns false on failure.",
        "rank": 0
    },
    "wp_kses_bad_protocol": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_bad_protocol",
        "summary": "Sanitizes a string and removed disallowed URL protocols.",
        "description": "<p>This function removes all non-allowed protocols from the beginning of the string. It ignores whitespace and the case of the letters, and it does understand HTML entities. It does its work recursively, so it won't be fooled by a string like javascript:javascript:alert(57).<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to filter bad protocols from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content.",
        "rank": 0
    },
    "wp_kses_bad_protocol_once": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_bad_protocol_once",
        "summary": "Sanitizes content from bad protocols and other characters.",
        "description": "<p>This function searches for URL protocols at the beginning of the string, while handling whitespace and HTML entities.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to check for bad protocols.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Sanitized content.",
        "rank": 0
    },
    "wp_kses_check_attr_val": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_check_attr_val",
        "summary": "Performs different checks for attribute values.",
        "description": "<p>The currently implemented checks are &quot;maxlen&quot;, &quot;minlen&quot;, &quot;maxval&quot;, &quot;minval&quot;, and &quot;valueless&quot;.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "Attribute value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "vless": {
                "label": "vless",
                "description": "Whether the attribute is valueless. Use 'y' or 'n'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "checkname": {
                "label": "checkname",
                "description": "What $checkvalue is checking for.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "checkvalue": {
                "label": "checkvalue",
                "description": "What constraint the value should pass.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether check passes.",
        "rank": 0
    },
    "wp_kses_data": {
        "since": "2.9.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_data",
        "summary": "Sanitize content with allowed HTML KSES rules.",
        "description": "<p>This function expects unslashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Content to filter, expected to not be escaped.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content.",
        "rank": 0
    },
    "wp_kses_decode_entities": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_decode_entities",
        "summary": "Converts all numeric HTML entities to their named counterparts.",
        "description": "<p>This function decodes numeric HTML entities (&amp;#65; and &amp;#x41;). It doesn't do anything with named entities like &amp;auml;, but we don't need them in the URL protocol whitelisting system anyway.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to change entities.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content after decoded entities.",
        "rank": 0
    },
    "wp_kses_hair": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_hair",
        "summary": "Builds an attribute list from string containing attributes.",
        "description": "<p>This function does a lot of work. It parses an attribute list into an array with attribute data, and tries to do the right thing even if it gets weird input. It will add quotes around attribute values that don't have any quotes or apostrophes around them, to make it easier to produce HTML code that will conform to W3C's HTML specification. It will also remove bad URL protocols from attribute values. It also reduces duplicate attributes by using the attribute defined first (foo='bar' foo='baz' will result in foo='bar').<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attribute list from HTML element to closing HTML element tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array[]",
                "label": "array[]"
            }
        },
        "return": [
            "array[]"
        ],
        "return_description": "Array of attribute information after parsing.",
        "rank": 0
    },
    "wp_kses_hair_parse": {
        "since": "4.2.3",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_hair_parse",
        "summary": "Builds an attribute list from string containing attributes.",
        "description": "<p>Does not modify input. May return &quot;evil&quot; output. In case of unexpected input, returns false instead of stripping things.<\/p> <p>Based on wp_kses_hair() but does not return a multi-dimensional array.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attribute list from HTML element to closing HTML element tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "List of attributes found in $attr. Returns false on failure.",
        "rank": 0
    },
    "wp_kses_hook": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_hook",
        "summary": "You add any KSES hooks here.",
        "description": "<p>There is currently only one KSES WordPress hook, {@see 'pre_kses'}, and it is called here. All parameters are passed to the hooks and expected to receive a string.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to filter through KSES.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_html": {
                "label": "allowed_html",
                "description": "List of allowed HTML elements.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content through {@see 'pre_kses'} hook.",
        "rank": 0
    },
    "wp_kses_html_error": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_html_error",
        "summary": "Handles parsing errors in `wp_kses_hair()`.",
        "description": "<p>The general plan is to remove everything to and including some whitespace, but it deals with quotes and apostrophes as well.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_kses_named_entities": {
        "since": "3.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_named_entities",
        "summary": "Callback for `wp_kses_normalize_entities()` regular expression.",
        "description": "<p>This function only accepts valid named entity references, which are finite, case-sensitive, and highly scrutinized by HTML and XML validators.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "preg_replace_callback() matches array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Correctly encoded entity.",
        "rank": 0
    },
    "wp_kses_no_null": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_no_null",
        "summary": "Removes any invalid control characters in a text string.",
        "description": "<p>Also removes any instance of the \\0 string.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to filter null characters from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Set 'slash_zero' =&gt; 'keep' when '' is allowed. Default is 'remove'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered content.",
        "rank": 0
    },
    "wp_kses_normalize_entities": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_normalize_entities",
        "summary": "Converts and fixes HTML entities.",
        "description": "<p>This function normalizes HTML entities. It will convert AT&amp;T to the correct AT&amp;amp;T, &amp;#00058; to &amp;#58;, &amp;#XYZZY; to &amp;amp;#XYZZY; and so on.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to normalize entities.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with normalized entities.",
        "rank": 0
    },
    "wp_kses_one_attr": {
        "since": "4.2.3",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_one_attr",
        "summary": "Filters one HTML attribute and ensures its value is allowed.",
        "description": "<p>This function can escape data in some situations where wp_kses() must strip the whole attribute.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "The 'whole' attribute, including name and value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "element": {
                "label": "element",
                "description": "The HTML element name to which the attribute belongs.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered attribute.",
        "rank": 0
    },
    "wp_kses_post": {
        "since": "2.9.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_post",
        "summary": "Sanitizes content for allowed HTML tags for post content.",
        "description": "<p>Post content refers to the page contents of the 'post' type and not $_POST data from forms.<\/p> <p>This function expects unslashed data.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Post content to filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Filtered post content with allowed HTML tags and attributes intact.",
        "rank": 0
    },
    "wp_kses_post_deep": {
        "since": "4.4.2",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_post_deep",
        "summary": "Navigates through an array, object, or scalar, and sanitizes content for allowed HTML tags for post content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "The array, object, or scalar value to inspect.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "The filtered content.",
        "rank": 0
    },
    "wp_kses_split": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_split",
        "summary": "Searches for HTML tags, no matter how malformed.",
        "description": "<p>It also matches stray &gt; characters.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "Content to filter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "allowed_html": {
                "label": "allowed_html",
                "description": "Allowed HTML elements.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "allowed_protocols": {
                "label": "allowed_protocols",
                "description": "Array of allowed URL protocols.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Content with fixed HTML tags",
        "rank": 0
    },
    "wp_kses_stripslashes": {
        "since": "1.0.0",
        "group": "External",
        "type": "efct",
        "name": "wp_kses_stripslashes",
        "summary": "Strips slashes from in front of quotes.",
        "description": "<p>This function changes the character sequence \\\" to just \". It leaves all other slashes alone. The quoting from preg_replace(\/\/e) requires this.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "String to strip slashes from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Fixed string with quoted slashes.",
        "rank": 0
    },
    "wp_kses_uri_attributes": {
        "since": "5.0.1",
        "group": "External",
        "type": "fct",
        "name": "wp_kses_uri_attributes",
        "summary": "Helper function listing HTML attributes containing a URL.",
        "description": "<p>This function returns a list of all HTML attributes that must contain a URL according to the HTML specification.<\/p> <p>This list includes URI attributes both allowed and disallowed by KSES.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "HTML attributes that must include a URL.",
        "rank": 0
    },
    "wp_kses_version": {
        "since": "1.0.0",
        "group": "External",
        "type": "fct",
        "name": "wp_kses_version",
        "summary": "Returns the version number of KSES.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "KSES version number.",
        "rank": 0
    },
    "wp_latest_comments_draft_or_post_title": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_latest_comments_draft_or_post_title",
        "summary": "Get the post title.",
        "description": "<p>The post title is fetched and if it is blank then a default string is returned.<\/p> <p>Copied from wp-admin\/includes\/template.php, but we can't include that file because:<\/p> <li>It causes bugs with test fixture generation and strange Docker 255 error codes.<\/li> <li>It's in the admin; ideally we <em>shouldn't<\/em> be including files from the admin for a block's output. It's a very small\/simple function as well, so duplicating it isn't too terrible.<\/li> ",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The post title if set; &quot;(no title)&quot; if no title is set.",
        "rank": 0
    },
    "wp_link_category_checklist": {
        "since": "2.5.1",
        "group": "Administration",
        "type": "efct",
        "name": "wp_link_category_checklist",
        "summary": "Outputs a link category checklist element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link_id": {
                "label": "link_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_link_pages": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_link_pages",
        "summary": "The formatted output of a list of pages.",
        "description": "<p>Displays page links for paginated posts (i.e. including the &lt;!--nextpage--&gt; Quicktag one or more times). This tag must be within The Loop.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of default arguments. <ul><li><b>'before'<\/b><br\/><i>(string)<\/i> HTML or text to prepend to each link. Default is &lt;p&gt; Pages:.<\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> HTML or text to append to each link. Default is &lt;\/p&gt;.<\/li> <li><b>'link_before'<\/b><br\/><i>(string)<\/i> HTML or text to prepend to each link, inside the &lt;a&gt; tag. Also prepended to the current item, which is not linked. <\/li> <li><b>'link_after'<\/b><br\/><i>(string)<\/i> HTML or text to append to each Pages link inside the &lt;a&gt; tag. Also appended to the current item, which is not linked. <\/li> <li><b>'aria_current'<\/b><br\/><i>(string)<\/i> The value for the aria-current attribute. Possible values are 'page', 'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.<\/li> <li><b>'next_or_number'<\/b><br\/><i>(string)<\/i> Indicates whether page numbers should be used. Valid values are number and next. Default is 'number'.<\/li> <li><b>'separator'<\/b><br\/><i>(string)<\/i> Text between pagination links. Default is ' '.<\/li> <li><b>'nextpagelink'<\/b><br\/><i>(string)<\/i> Link text for the next page link, if available. Default is 'Next Page'.<\/li> <li><b>'previouspagelink'<\/b><br\/><i>(string)<\/i> Link text for the previous page link, if available. Default is 'Previous Page'.<\/li> <li><b>'pagelink'<\/b><br\/><i>(string)<\/i> Format string for page numbers. The % in the parameter string will be replaced with the page number, so 'Page %' generates &quot;Page 1&quot;, &quot;Page 2&quot;, etc. Defaults to '%', just the page number.<\/li> <li><b>'echo'<\/b><br\/><i>(int|bool)<\/i> Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Formatted output in HTML.",
        "rank": 0
    },
    "wp_list_authors": {
        "since": "1.2.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_authors",
        "summary": "List all the authors of the site, with several options available.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of default arguments. <ul><li><b>'orderby'<\/b><br\/><i>(string)<\/i> How to sort the authors. Accepts 'nicename', 'email', 'url', 'registered', 'user_nicename', 'user_email', 'user_url', 'user_registered', 'name', 'display_name', 'post_count', 'ID', 'meta_value', 'user_login'. Default 'name'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Sorting direction for $orderby. Accepts 'ASC', 'DESC'. Default 'ASC'.<\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> Maximum authors to return or display. Default empty (all authors).<\/li> <li><b>'optioncount'<\/b><br\/><i>(bool)<\/i> Show the count in parenthesis next to the author's name. Default false.<\/li> <li><b>'exclude_admin'<\/b><br\/><i>(bool)<\/i> Whether to exclude the 'admin' account, if it exists. Default true.<\/li> <li><b>'show_fullname'<\/b><br\/><i>(bool)<\/i> Whether to show the author's full name. Default false.<\/li> <li><b>'hide_empty'<\/b><br\/><i>(bool)<\/i> Whether to hide any authors with no posts. Default true.<\/li> <li><b>'feed'<\/b><br\/><i>(string)<\/i> If not empty, show a link to the author's feed and use this text as the alt parameter of the link. <\/li> <li><b>'feed_image'<\/b><br\/><i>(string)<\/i> If not empty, show a link to the author's feed and use this image URL as clickable anchor. <\/li> <li><b>'feed_type'<\/b><br\/><i>(string)<\/i> The feed type to link to, such as 'rss2'. Defaults to default feed type.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to output the result or instead return it. Default true.<\/li> <li><b>'style'<\/b><br\/><i>(string)<\/i> If 'list', each author is wrapped in an &lt;li&gt; element, otherwise the authors will be separated by commas.<\/li> <li><b>'html'<\/b><br\/><i>(bool)<\/i> Whether to list the items in HTML form or plaintext. Default true.<\/li> <li><b>'exclude'<\/b><br\/><i>(array|string)<\/i> Array or comma\/space-separated list of author IDs to exclude. <\/li> <li><b>'include'<\/b><br\/><i>(array|string)<\/i> Array or comma\/space-separated list of author IDs to include. <\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "The output, if echo is set to false.",
        "rank": 0
    },
    "wp_list_bookmarks": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_bookmarks",
        "summary": "Retrieve or echo all of the bookmarks.",
        "description": "<p>List of default arguments are as follows:<\/p> <p>These options define how the Category name will appear before the category links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will display for only the 'title_li' string and only if 'title_li' is not empty.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "String or array of arguments to list bookmarks. <ul><li><b>'orderby'<\/b><br\/><i>(string)<\/i> How to order the links by. Accepts post fields. Default 'name'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Whether to order bookmarks in ascending or descending order. Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.<\/li> <li><b>'limit'<\/b><br\/><i>(int)<\/i> Amount of bookmarks to display. Accepts 1+ or -1 for all. Default -1.<\/li> <li><b>'category'<\/b><br\/><i>(string)<\/i> Comma-separated list of category ids to include links from. <\/li> <li><b>'category_name'<\/b><br\/><i>(string)<\/i> Category to retrieve links for by name. <\/li> <li><b>'hide_invisible'<\/b><br\/><i>(int|bool)<\/i> Whether to show or hide links marked as 'invisible'. Accepts 1|true or 0|false. Default 1|true.<\/li> <li><b>'show_updated'<\/b><br\/><i>(int|bool)<\/i> Whether to display the time the bookmark was last updated. Accepts 1|true or 0|false. Default 0|false.<\/li> <li><b>'echo'<\/b><br\/><i>(int|bool)<\/i> Whether to echo or return the formatted bookmarks. Accepts 1|true (echo) or 0|false (return). Default 1|true.<\/li> <li><b>'categorize'<\/b><br\/><i>(int|bool)<\/i> Whether to show links listed by category or in a single column. Accepts 1|true (by category) or 0|false (one column). Default 1|true.<\/li> <li><b>'show_description'<\/b><br\/><i>(int|bool)<\/i> Whether to show the bookmark descriptions. Accepts 1|true or 0|false. Default 0|false.<\/li> <li><b>'title_li'<\/b><br\/><i>(string)<\/i> What to show before the links appear. Default 'Bookmarks'.<\/li> <li><b>'title_before'<\/b><br\/><i>(string)<\/i> The HTML or text to prepend to the $title_li string. Default '&lt;h2&gt;'.<\/li> <li><b>'title_after'<\/b><br\/><i>(string)<\/i> The HTML or text to append to the $title_li string. Default '&lt;\/h2&gt;'.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> The CSS class to use for the $title_li. Default 'linkcat'.<\/li> <li><b>'category_before'<\/b><br\/><i>(string)<\/i> The HTML or text to prepend to $title_before if $categorize is true. String must contain '%id' and '%class' to inherit the category ID and the $class argument used for formatting in themes. Default '&lt;li id=&quot;%id&quot; class=&quot;%class&quot;&gt;'.<\/li> <li><b>'category_after'<\/b><br\/><i>(string)<\/i> The HTML or text to append to $title_after if $categorize is true. Default '&lt;\/li&gt;'.<\/li> <li><b>'category_orderby'<\/b><br\/><i>(string)<\/i> How to order the bookmark category based on term scheme if $categorize is true. Default 'name'.<\/li> <li><b>'category_order'<\/b><br\/><i>(string)<\/i> Whether to order categories in ascending or descending order if $categorize is true. Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Will only return if echo option is set to not echo. Default is not return anything.",
        "rank": 0
    },
    "wp_list_categories": {
        "since": "2.1.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_categories",
        "summary": "Display or retrieve the HTML list of categories.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of optional arguments. <ul><li><b>'child_of'<\/b><br\/><i>(int)<\/i> Term ID to retrieve child terms of. See get_terms(). Default 0.<\/li> <li><b>'current_category'<\/b><br\/><i>(int|array)<\/i> ID of category, or array of IDs of categories, that should get the 'current-cat' class. Default 0.<\/li> <li><b>'depth'<\/b><br\/><i>(int)<\/i> Category depth. Used for tab indentation. Default 0.<\/li> <li><b>'echo'<\/b><br\/><i>(bool|int)<\/i> True to echo markup, false to return it. Default 1.<\/li> <li><b>'exclude'<\/b><br\/><i>(array|string)<\/i> Array or comma\/space-separated string of term IDs to exclude. If $hierarchical is true, descendants of $exclude terms will also be excluded; see $exclude_tree. See get_terms(). <\/li> <li><b>'exclude_tree'<\/b><br\/><i>(array|string)<\/i> Array or comma\/space-separated string of term IDs to exclude, along with their descendants. See get_terms(). <\/li> <li><b>'feed'<\/b><br\/><i>(string)<\/i> Text to use for the feed link. Default 'Feed for all posts filed under [cat name]'.<\/li> <li><b>'feed_image'<\/b><br\/><i>(string)<\/i> URL of an image to use for the feed link. <\/li> <li><b>'feed_type'<\/b><br\/><i>(string)<\/i> Feed type. Used to build feed link. See get_term_feed_link(). Default empty string (default feed).<\/li> <li><b>'hide_empty'<\/b><br\/><i>(bool|int)<\/i> Whether to hide categories that don't have any posts attached to them. Default 1.<\/li> <li><b>'hide_title_if_empty'<\/b><br\/><i>(bool)<\/i> Whether to hide the $title_li element if there are no terms in the list. Default false (title will always be shown).<\/li> <li><b>'hierarchical'<\/b><br\/><i>(bool)<\/i> Whether to include terms that have non-empty descendants. See get_terms(). Default true.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Which direction to order categories. Accepts 'ASC' or 'DESC'. Default 'ASC'.<\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> The column to use for ordering categories. Default 'name'.<\/li> <li><b>'separator'<\/b><br\/><i>(string)<\/i> Separator between links. Default '&lt;br \/&gt;'.<\/li> <li><b>'show_count'<\/b><br\/><i>(bool|int)<\/i> Whether to show how many posts are in the category. Default 0.<\/li> <li><b>'show_option_all'<\/b><br\/><i>(string)<\/i> Text to display for showing all categories. <\/li> <li><b>'show_option_none'<\/b><br\/><i>(string)<\/i> Text to display for the 'no categories' option. Default 'No categories'.<\/li> <li><b>'style'<\/b><br\/><i>(string)<\/i> The style used to display the categories list. If 'list', categories will be output as an unordered list. If left empty or another value, categories will be output separated by &lt;br&gt; tags. Default 'list'.<\/li> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy name. Default 'category'.<\/li> <li><b>'title_li'<\/b><br\/><i>(string)<\/i> Text to use for the list title &lt;li&gt; element. Pass an empty string to disable. Default 'Categories'.<\/li> <li><b>'use_desc_for_title'<\/b><br\/><i>(bool|int)<\/i> Whether to use the category description as the title attribute. Default 1.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "HTML content only if 'echo' argument is 0.",
        "rank": 0
    },
    "wp_list_comments": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_comments",
        "summary": "List comments.",
        "description": "<p>Used in the comments.php template to list comments for a particular post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Formatting options. <ul><li><b>'walker'<\/b><br\/><i>(object)<\/i> Instance of a Walker class to list comments. Default null.<\/li> <li><b>'max_depth'<\/b><br\/><i>(int)<\/i> The maximum comments depth. <\/li> <li><b>'style'<\/b><br\/><i>(string)<\/i> The style of list ordering. Default 'ul'. Accepts 'ul', 'ol'.<\/li> <li><b>'callback'<\/b><br\/><i>(string)<\/i> Callback function to use. Default null.<\/li> <li><b>'end-callback'<\/b><br\/><i>(string)<\/i> Callback function to use at the end. Default null.<\/li> <li><b>'type'<\/b><br\/><i>(string)<\/i> Type of comments to list. Default 'all'. Accepts 'all', 'comment', 'pingback', 'trackback', 'pings'.<\/li> <li><b>'page'<\/b><br\/><i>(int)<\/i> Page ID to list comments for. <\/li> <li><b>'per_page'<\/b><br\/><i>(int)<\/i> Number of comments to list per page. <\/li> <li><b>'avatar_size'<\/b><br\/><i>(int)<\/i> Height and width dimensions of the avatar size. Default 32.<\/li> <li><b>'reverse_top_level'<\/b><br\/><i>(bool)<\/i> Ordering of the listed comments. If true, will display newest comments first.<\/li> <li><b>'reverse_children'<\/b><br\/><i>(bool)<\/i> Whether to reverse child comments in the list. Default null.<\/li> <li><b>'format'<\/b><br\/><i>(string)<\/i> How to format the comments list. Default 'html5' if the theme supports it. Accepts 'html5', 'xhtml'.<\/li> <li><b>'short_ping'<\/b><br\/><i>(bool)<\/i> Whether to output short pings. Default false.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo the output or return it. Default true.<\/li> <\/li><\/ul>",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "comments": {
                "label": "comments",
                "description": "Array of WP_Comment objects.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_list_filter": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_list_filter",
        "summary": "Filters a list of objects, based on a set of key => value arguments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "An array of objects to filter.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "An array of key =&gt; value arguments to match against each object.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "operator": {
                "label": "operator",
                "description": "The logical operation to perform. 'AND' means all elements from the array must match. 'OR' means only one element needs to match. 'NOT' means no elements may match.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'AND'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of found values.",
        "rank": 0
    },
    "wp_list_pages": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_pages",
        "summary": "Retrieve or display a list of pages (or hierarchical post type items) in list (li) format.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments to generate a list of pages. See get_pages() for additional arguments. <ul><li><b>'child_of'<\/b><br\/><i>(int)<\/i> Display only the sub-pages of a single page by ID. Default 0 (all pages).<\/li> <li><b>'authors'<\/b><br\/><i>(string)<\/i> Comma-separated list of author IDs. Default empty (all authors).<\/li> <li><b>'date_format'<\/b><br\/><i>(string)<\/i> PHP date format to use for the listed pages. Relies on the 'show_date' parameter. Default is the value of 'date_format' option.<\/li> <li><b>'depth'<\/b><br\/><i>(int)<\/i> Number of levels in the hierarchy of pages to include in the generated list. Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to the given n depth). Default 0.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether or not to echo the list of pages. Default true.<\/li> <li><b>'exclude'<\/b><br\/><i>(string)<\/i> Comma-separated list of page IDs to exclude. <\/li> <li><b>'include'<\/b><br\/><i>(array)<\/i> Comma-separated list of page IDs to include. <\/li> <li><b>'link_after'<\/b><br\/><i>(string)<\/i> Text or HTML to follow the page link label. Default null.<\/li> <li><b>'link_before'<\/b><br\/><i>(string)<\/i> Text or HTML to precede the page link label. Default null.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> Post type to query for. Default 'page'.<\/li> <li><b>'post_status'<\/b><br\/><i>(string|array)<\/i> Comma-separated list or array of post statuses to include. Default 'publish'.<\/li> <li><b>'show_date'<\/b><br\/><i>(string)<\/i> Whether to display the page publish or modified date for each page. Accepts 'modified' or any other value. An empty value hides the date. <\/li> <li><b>'sort_column'<\/b><br\/><i>(string)<\/i> Comma-separated list of column names to sort the pages by. Accepts 'post_author', 'post_date', 'post_title', 'post_name', 'post_modified', 'post_modified_gmt', 'menu_order', 'post_parent', 'ID', 'rand', or 'comment_count'. Default 'post_title'.<\/li> <li><b>'title_li'<\/b><br\/><i>(string)<\/i> List heading. Passing a null or empty value will result in no heading, and the list will not be wrapped with unordered list &lt;ul&gt; tags. Default 'Pages'.<\/li> <li><b>'item_spacing'<\/b><br\/><i>(string)<\/i> Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'preserve'.<\/li> <li><b>'walker'<\/b><br\/><i>(Walker)<\/i> Walker instance to use for listing pages. Default empty (Walker_Page).<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML list of pages.",
        "rank": 0
    },
    "wp_list_pluck": {
        "since": "3.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_list_pluck",
        "summary": "Pluck a certain field out of each object in a list.",
        "description": "<p>This has the same functionality and prototype of array_column() (PHP 5.5) but also supports objects.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "List of objects or arrays",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "field": {
                "label": "field",
                "description": "Field from the object to place instead of the entire object",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "index_key": {
                "label": "index_key",
                "description": "Field from the object to use as keys for the new array.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Array of found values. If <code>$index_key<\/code> is set, an array of found values with keys               corresponding to <code>$index_key<\/code>. If <code>$index_key<\/code> is null, array keys from the original               <code>$list<\/code> will be preserved in the results.",
        "rank": 0
    },
    "wp_list_post_revisions": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_list_post_revisions",
        "summary": "Display a list of a post's revisions.",
        "description": "<p>Can output either a UL with edit links or a TABLE with diff interface, and restore action links.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID or WP_Post object. Default is global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": "0",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "'all' (default), 'revision' or 'autosave'",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_list_sort": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_list_sort",
        "summary": "Sorts a list of objects, based on one or more orderby arguments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "An array of objects to sort.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "orderby": {
                "label": "orderby",
                "description": "Either the field name to order by or an array of multiple orderby fields as $orderby =&gt; $order.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "order": {
                "label": "order",
                "description": "Either 'ASC' or 'DESC'. Only used if $orderby is a string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'ASC'",
                "required": false
            },
            "preserve_keys": {
                "label": "preserve_keys",
                "description": "Whether to preserve keys.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The sorted array.",
        "rank": 0
    },
    "wp_list_widget_controls": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_list_widget_controls",
        "summary": "Show the widgets and their settings for a sidebar.",
        "description": "<p>Used in the admin widget config screen.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sidebar": {
                "label": "sidebar",
                "description": "Sidebar ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "sidebar_name": {
                "label": "sidebar_name",
                "description": "Sidebar name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_list_widget_controls_dynamic_sidebar": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_list_widget_controls_dynamic_sidebar",
        "summary": "Retrieves the widget control arguments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "params": {
                "label": "params",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_load_alloptions": {
        "since": "2.2.0",
        "group": "Option",
        "type": "fct",
        "name": "wp_load_alloptions",
        "summary": "Loads and caches all autoloaded options, if available or all options.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of all options.",
        "rank": 0
    },
    "wp_load_core_site_options": {
        "since": "3.0.0",
        "group": "Option",
        "type": "efct",
        "name": "wp_load_core_site_options",
        "summary": "Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "site ID for which to query the options. Defaults to the current site.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_localize_script": {
        "since": "2.2.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_localize_script",
        "summary": "Localize a script.",
        "description": "<p>Works only if the script has already been added.<\/p> <p>Accepts an associative array $l10n and creates a JavaScript object:<\/p> \"$object_name\" = { key: value, key: value, ... }",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Script handle the data will be attached to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "object_name": {
                "label": "object_name",
                "description": "Name for the JavaScript object. Passed directly, so it should be qualified JS variable. Example: '\/[a-zA-Z0-9_]+\/'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "l10n": {
                "label": "l10n",
                "description": "The data itself. The data can be either a single or multi-dimensional array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the script was successfully localized, false otherwise.",
        "rank": 0
    },
    "wp_login_form": {
        "since": "3.0.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_login_form",
        "summary": "Provides a simple login form for use anywhere within WordPress.",
        "description": "<p>The login format HTML is echoed by default. Pass a false value for $echo to return it instead.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of options to control the form output. <ul><li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to display the login form or return the form HTML code. Default true (echo).<\/li> <li><b>'redirect'<\/b><br\/><i>(string)<\/i> URL to redirect to. Must be absolute, as in &quot;&lt;a href=&quot;https:\/\/example.com\/mypage\/&quot;&gt;https:\/\/example.com\/mypage\/&lt;\/a&gt;&quot;. Default is to redirect back to the request URI.<\/li> <li><b>'form_id'<\/b><br\/><i>(string)<\/i> ID attribute value for the form. Default 'loginform'.<\/li> <li><b>'label_username'<\/b><br\/><i>(string)<\/i> Label for the username or email address field. Default 'Username or Email Address'.<\/li> <li><b>'label_password'<\/b><br\/><i>(string)<\/i> Label for the password field. Default 'Password'.<\/li> <li><b>'label_remember'<\/b><br\/><i>(string)<\/i> Label for the remember field. Default 'Remember Me'.<\/li> <li><b>'label_log_in'<\/b><br\/><i>(string)<\/i> Label for the submit button. Default 'Log In'.<\/li> <li><b>'id_username'<\/b><br\/><i>(string)<\/i> ID attribute value for the username field. Default 'user_login'.<\/li> <li><b>'id_password'<\/b><br\/><i>(string)<\/i> ID attribute value for the password field. Default 'user_pass'.<\/li> <li><b>'id_remember'<\/b><br\/><i>(string)<\/i> ID attribute value for the remember field. Default 'rememberme'.<\/li> <li><b>'id_submit'<\/b><br\/><i>(string)<\/i> ID attribute value for the submit button. Default 'wp-submit'.<\/li> <li><b>'remember'<\/b><br\/><i>(bool)<\/i> Whether to display the &quot;rememberme&quot; checkbox in the form.<\/li> <li><b>'value_username'<\/b><br\/><i>(string)<\/i> Default value for the username field. <\/li> <li><b>'value_remember'<\/b><br\/><i>(bool)<\/i> Whether the &quot;Remember Me&quot; checkbox should be checked by default. Default false (unchecked).<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when retrieving.",
        "rank": 0
    },
    "wp_login_url": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_login_url",
        "summary": "Retrieves the login URL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "redirect": {
                "label": "redirect",
                "description": "Path to redirect to on log in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "force_reauth": {
                "label": "force_reauth",
                "description": "Whether to force reauthorization, even if a cookie is present.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The login URL. Not HTML-encoded.",
        "rank": 0
    },
    "wp_loginout": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_loginout",
        "summary": "Display the Log In\/Out link.",
        "description": "<p>Displays a link, which allows users to navigate to the Log In page to log in or log out depending on whether they are currently logged in.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "redirect": {
                "label": "redirect",
                "description": "path to redirect to on login\/logout.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Default to echo and not return the link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when retrieving.",
        "rank": 0
    },
    "wp_logout_url": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_logout_url",
        "summary": "Retrieves the logout URL.",
        "description": "<p>Returns the URL that allows the user to log out of the site.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "redirect": {
                "label": "redirect",
                "description": "Path to redirect to on logout.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The logout URL. Note: HTML-encoded via esc_html() in wp_nonce_url().",
        "rank": 0
    },
    "wp_lostpassword_url": {
        "since": "2.8.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_lostpassword_url",
        "summary": "Returns the URL that allows the user to retrieve the lost password",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "redirect": {
                "label": "redirect",
                "description": "Path to redirect to on login.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Lost password URL.",
        "rank": 0
    },
    "wp_mail": {
        "since": "1.2.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_mail",
        "summary": "Send mail, similar to PHP's mail",
        "description": "<p>A true return value does not automatically mean that the user received the email successfully. It just only means that the method used was able to process the request without any errors.<\/p> <p>Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from creating a from address like 'Name email@address.com' when both are set. If just 'wp_mail_from' is set, then just the email address will be used with no name.<\/p> <p>The default content type is 'text\/plain' which does not allow using HTML. However, you can set the content type of the email by using the {@see 'wp_mail_content_type'} filter.<\/p> <p>The default charset is based on the charset used on the blog. The charset can be set using the {@see 'wp_mail_charset'} filter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "to": {
                "label": "to",
                "description": "Array or comma-separated list of email addresses to send message.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "subject": {
                "label": "subject",
                "description": "Email subject",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "message": {
                "label": "message",
                "description": "Message contents",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "headers": {
                "label": "headers",
                "description": "Additional headers.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "attachments": {
                "label": "attachments",
                "description": "Files to attach.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the email contents were sent successfully.",
        "rank": 0
    },
    "wp_make_content_images_responsive": {
        "since": "4.4.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_make_content_images_responsive",
        "summary": "Filters 'img' elements in post content to add 'srcset' and 'sizes' attributes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "The raw post content to be filtered.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted content with 'srcset' and 'sizes' attributes added to images.",
        "rank": 0
    },
    "wp_make_link_relative": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_make_link_relative",
        "summary": "Convert full URL paths to absolute paths.",
        "description": "<p>Removes the http or https protocols and the domain. Keeps the path '\/' at the beginning, so it isn't a true relative link, but from the web root base.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link": {
                "label": "link",
                "description": "Full URL path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Absolute path.",
        "rank": 0
    },
    "wp_map_nav_menu_locations": {
        "since": "4.9.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_map_nav_menu_locations",
        "summary": "Maps nav menu locations according to assignments in previously active theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_nav_menu_locations": {
                "label": "new_nav_menu_locations",
                "description": "New nav menu locations assignments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "old_nav_menu_locations": {
                "label": "old_nav_menu_locations",
                "description": "Old nav menu locations assignments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Nav menus mapped to new nav menu locations.",
        "rank": 0
    },
    "wp_map_sidebars_widgets": {
        "since": "4.9.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_map_sidebars_widgets",
        "summary": "Compares a list of sidebars with their widgets against a whitelist.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "existing_sidebars_widgets": {
                "label": "existing_sidebars_widgets",
                "description": "List of sidebars and their widget instance IDs.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Mapped sidebars widgets.",
        "rank": 0
    },
    "wp_match_mime_types": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_match_mime_types",
        "summary": "Check a MIME-Type against a list.",
        "description": "<p>If the wildcard_mime_types parameter is a string, it must be comma separated list. If the real_mime_types is a string, it is also comma separated to create the list.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "wildcard_mime_types": {
                "label": "wildcard_mime_types",
                "description": "Mime types, e.g. audio\/mpeg or image (same as image\/*) or flash (same as *flash*).",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "real_mime_types": {
                "label": "real_mime_types",
                "description": "Real post mime type values.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "array(wildcard=&gt;array(real types)).",
        "rank": 0
    },
    "wp_max_upload_size": {
        "since": "2.5.0",
        "group": "Media",
        "type": "fct",
        "name": "wp_max_upload_size",
        "summary": "Determines the maximum upload size allowed in php.ini.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Allowed upload size.",
        "rank": 0
    },
    "wp_maybe_clean_new_site_cache_on_update": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_maybe_clean_new_site_cache_on_update",
        "summary": "Cleans the necessary caches after specific site data has been updated.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_site": {
                "label": "new_site",
                "description": "The site object after the update.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "old_site": {
                "label": "old_site",
                "description": "The site obejct prior to the update.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_maybe_decline_date": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_maybe_decline_date",
        "summary": "Determines if the date should be declined.",
        "description": "<p>If the locale specifies that month names require a genitive case in certain formats (like 'j F Y'), the month name will be replaced with a correct form.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "date": {
                "label": "date",
                "description": "Formatted date string.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The date, declined if locale specifies it.",
        "rank": 0
    },
    "wp_maybe_generate_attachment_metadata": {
        "since": "3.9.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_maybe_generate_attachment_metadata",
        "summary": "Maybe attempts to generate attachment metadata, if missing.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment": {
                "label": "attachment",
                "description": "Attachment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_maybe_grant_install_languages_cap": {
        "since": "4.9.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_maybe_grant_install_languages_cap",
        "summary": "Filters the user capabilities to grant the 'install_languages' capability as necessary.",
        "description": "<p>A user must have at least one out of the 'update_core', 'install_plugins', and 'install_themes' capabilities to qualify for 'install_languages'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "allcaps": {
                "label": "allcaps",
                "description": "An array of all the user's capabilities.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool[]",
                "label": "bool[]"
            }
        },
        "return": [
            "bool[]"
        ],
        "return_description": "Filtered array of the user's capabilities.",
        "rank": 0
    },
    "wp_maybe_transition_site_statuses_on_update": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_maybe_transition_site_statuses_on_update",
        "summary": "Triggers actions on site status updates.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_site": {
                "label": "new_site",
                "description": "The site object after the update.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "old_site": {
                "label": "old_site",
                "description": "If $new_site has been updated, this must be the previous state of that site.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_maybe_update_network_site_counts": {
        "since": "3.7.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_maybe_update_network_site_counts",
        "summary": "Update the count of sites for the current network.",
        "description": "<p>If enabled through the {@see 'enable_live_network_counts'} filter, update the sites count on a network when a site is created or its status is updated.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_maybe_update_network_site_counts_on_update": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_maybe_update_network_site_counts_on_update",
        "summary": "Updates the count of sites for a network based on a changed site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_site": {
                "label": "new_site",
                "description": "The site object that has been inserted, updated or deleted.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "old_site": {
                "label": "old_site",
                "description": "If $new_site has been updated, this must be the previous state of that site.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_maybe_update_network_user_counts": {
        "since": "3.7.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_maybe_update_network_user_counts",
        "summary": "Update the network-wide users count.",
        "description": "<p>If enabled through the {@see 'enable_live_network_counts'} filter, update the users count on a network when a user is created or its status is updated.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_media_attach_action": {
        "since": "4.2.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_media_attach_action",
        "summary": "Encapsulate logic for Attach\/Detach actions",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "parent_id": {
                "label": "parent_id",
                "description": "Attachment parent ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "action": {
                "label": "action",
                "description": "Attach\/detach action. Accepts 'attach' or 'detach'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'attach'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_media_insert_url_form": {
        "since": "2.7.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_media_insert_url_form",
        "summary": "Creates the form for external url",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "default_view": {
                "label": "default_view",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'image'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "the form html",
        "rank": 0
    },
    "wp_media_personal_data_exporter": {
        "since": "4.9.6",
        "group": "Media",
        "type": "efct",
        "name": "wp_media_personal_data_exporter",
        "summary": "Finds and exports attachments associated with an email address.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "The attachment owner email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "Attachment page.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$return        An array of personal data.",
        "rank": 0
    },
    "wp_media_upload_handler": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_media_upload_handler",
        "summary": "Handles the process of uploading media.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "null",
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_mediaelement_fallback": {
        "since": "3.6.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_mediaelement_fallback",
        "summary": "Provides a No-JS Flash fallback as a last resort for audio \/ video.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The media element URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Fallback HTML.",
        "rank": 0
    },
    "wp_metadata_lazyloader": {
        "since": "4.5.0",
        "group": "Meta",
        "type": "fct",
        "name": "wp_metadata_lazyloader",
        "summary": "Retrieves the queue for lazy-loading metadata.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_Metadata_Lazyloader",
                "label": "WP_Metadata_Lazyloader"
            }
        },
        "return": [
            "WP_Metadata_Lazyloader"
        ],
        "return_description": "$lazyloader Metadata lazyloader queue.",
        "rank": 0
    },
    "wp_mime_type_icon": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_mime_type_icon",
        "summary": "Retrieve the icon for a MIME type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mime": {
                "label": "mime",
                "description": "MIME type or attachment ID.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "Icon, false otherwise.",
        "rank": 0
    },
    "wp_mkdir_p": {
        "since": "2.0.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_mkdir_p",
        "summary": "Recursive directory creation based on full path.",
        "description": "<p>Will attempt to set permissions on folders.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "target": {
                "label": "target",
                "description": "Full path to attempt to create.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the path was created. True if path already exists.",
        "rank": 0
    },
    "wp_nav_menu": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_nav_menu",
        "summary": "Displays a navigation menu.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of nav menu arguments. <ul><li><b>'menu'<\/b><br\/><i>(int|string|WP_Term)<\/i> Desired menu. Accepts a menu ID, slug, name, or object. <\/li> <li><b>'menu_class'<\/b><br\/><i>(string)<\/i> CSS class to use for the ul element which forms the menu. Default 'menu'.<\/li> <li><b>'menu_id'<\/b><br\/><i>(string)<\/i> The ID that is applied to the ul element which forms the menu. Default is the menu slug, incremented.<\/li> <li><b>'container'<\/b><br\/><i>(string)<\/i> Whether to wrap the ul, and what to wrap it with. Default 'div'.<\/li> <li><b>'container_class'<\/b><br\/><i>(string)<\/i> Class that is applied to the container. Default 'menu-{menu slug}-container'.<\/li> <li><b>'container_id'<\/b><br\/><i>(string)<\/i> The ID that is applied to the container. <\/li> <li><b>'fallback_cb'<\/b><br\/><i>(callable|bool)<\/i> If the menu doesn't exists, a callback function will fire. Default is 'wp_page_menu'. Set to false for no fallback.<\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> Text before the link markup. <\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> Text after the link markup. <\/li> <li><b>'link_before'<\/b><br\/><i>(string)<\/i> Text before the link text. <\/li> <li><b>'link_after'<\/b><br\/><i>(string)<\/i> Text after the link text. <\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo the menu or return it. Default true.<\/li> <li><b>'depth'<\/b><br\/><i>(int)<\/i> How many levels of the hierarchy are to be included. 0 means all. Default 0.<\/li> <li><b>'walker'<\/b><br\/><i>(object)<\/i> Instance of a custom walker class. <\/li> <li><b>'theme_location'<\/b><br\/><i>(string)<\/i> Theme location to be used. Must be registered with register_nav_menu() in order to be selectable by the user.<\/li> <li><b>'items_wrap'<\/b><br\/><i>(string)<\/i> How the list items should be wrapped. Default is a ul with an id and class. Uses printf() format with numbered placeholders.<\/li> <li><b>'item_spacing'<\/b><br\/><i>(string)<\/i> Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'preserve'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false",
            "void"
        ],
        "return_description": "Menu output if $echo is false, false if there are no items or no menu was found.",
        "rank": 0
    },
    "wp_nav_menu_disabled_check": {
        "since": "3.6.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_nav_menu_disabled_check",
        "summary": "Check whether to disable the Menu Locations meta box submit button",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "nav_menu_selected_id": {
                "label": "nav_menu_selected_id",
                "description": "(id, name or slug) of the currently-selected menu",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Disabled attribute if at least one menu exists, false if not",
        "rank": 0
    },
    "wp_nav_menu_item_post_type_meta_box": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_nav_menu_item_post_type_meta_box",
        "summary": "Displays a meta box for a post type menu item.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object": {
                "label": "object",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Post type menu item meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(string)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(WP_Post_Type)<\/i> Extra meta box arguments (the post type object for this meta box).<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_nav_menu_item_taxonomy_meta_box": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_nav_menu_item_taxonomy_meta_box",
        "summary": "Displays a meta box for a taxonomy menu item.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object": {
                "label": "object",
                "description": "Not used.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "box": {
                "label": "box",
                "description": "Taxonomy menu item meta box arguments. <ul><li><b>'id'<\/b><br\/><i>(string)<\/i> Meta box 'id' attribute.<\/li> <li><b>'title'<\/b><br\/><i>(string)<\/i> Meta box title.<\/li> <li><b>'callback'<\/b><br\/><i>(string)<\/i> Meta box display callback.<\/li> <li><b>'args'<\/b><br\/><i>(object)<\/i> Extra meta box arguments (the taxonomy object for this meta box).<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_nav_menu_manage_columns": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "fct",
        "name": "wp_nav_menu_manage_columns",
        "summary": "Returns the columns for the nav menus page.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Columns.",
        "rank": 0
    },
    "wp_nav_menu_max_depth": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "wp_nav_menu_max_depth",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "classes": {
                "label": "classes",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_nav_menu_update_menu_items": {
        "since": "3.6.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_nav_menu_update_menu_items",
        "summary": "Saves nav menu items",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "nav_menu_selected_id": {
                "label": "nav_menu_selected_id",
                "description": "(id, slug, or name ) of the currently-selected menu",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "nav_menu_selected_title": {
                "label": "nav_menu_selected_title",
                "description": "Title of the currently-selected menu",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$messages The menu updated message",
        "rank": 0
    },
    "wp_network_admin_email_change_notification": {
        "since": "4.9.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_network_admin_email_change_notification",
        "summary": "Send an email to the old network admin email address when the network admin email address changes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option_name": {
                "label": "option_name",
                "description": "The relevant database option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "new_email": {
                "label": "new_email",
                "description": "The new network admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "old_email": {
                "label": "old_email",
                "description": "The old network admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_new_blog_notification": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_new_blog_notification",
        "summary": "Notifies the site admin that the setup is complete.",
        "description": "<p>Sends an email with wp_mail to the new administrator that the site setup is complete, and provides them with a record of their login credentials.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_title": {
                "label": "blog_title",
                "description": "Site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "blog_url": {
                "label": "blog_url",
                "description": "Site url.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "User's Password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_new_comment": {
        "since": "1.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_new_comment",
        "summary": "Adds a new comment to the database.",
        "description": "<p>Filters new comment to ensure that the fields are sanitized and valid before inserting comment into database. Calls {@see 'comment_post'} action with comment ID and whether comment is approved by WordPress. Also has {@see 'preprocess_comment'} filter for processing the comment data before the function handles it.<\/p> <p>We use REMOTE_ADDR here directly. If you are behind a proxy, you should ensure that it is properly set, such as in wp-config.php, for your environment.<\/p> <p>See {@link https:\/\/core.trac.wordpress.org\/ticket\/9235}<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commentdata": {
                "label": "commentdata",
                "description": "Comment data. <ul><li><b>'comment_author'<\/b><br\/><i>(string)<\/i> The name of the comment author.<\/li> <li><b>'comment_author_email'<\/b><br\/><i>(string)<\/i> The comment author email address.<\/li> <li><b>'comment_author_url'<\/b><br\/><i>(string)<\/i> The comment author URL.<\/li> <li><b>'comment_content'<\/b><br\/><i>(string)<\/i> The content of the comment.<\/li> <li><b>'comment_date'<\/b><br\/><i>(string)<\/i> The date the comment was submitted. Default is the current time.<\/li> <li><b>'comment_date_gmt'<\/b><br\/><i>(string)<\/i> The date the comment was submitted in the GMT timezone. Default is $comment_date in the GMT timezone.<\/li> <li><b>'comment_parent'<\/b><br\/><i>(int)<\/i> The ID of this comment's parent, if any. Default 0.<\/li> <li><b>'comment_post_ID'<\/b><br\/><i>(int)<\/i> The ID of the post that relates to the comment.<\/li> <li><b>'user_id'<\/b><br\/><i>(int)<\/i> The ID of the user who submitted the comment. Default 0.<\/li> <li><b>'user_ID'<\/b><br\/><i>(int)<\/i> Kept for backward-compatibility. Use $user_id instead.<\/li> <li><b>'comment_agent'<\/b><br\/><i>(string)<\/i> Comment author user agent. Default is the value of 'HTTP_USER_AGENT' in the $_SERVER superglobal sent in the original request.<\/li> <li><b>'comment_author_IP'<\/b><br\/><i>(string)<\/i> Comment author IP address in IPv4 format. Default is the value of 'REMOTE_ADDR' in the $_SERVER superglobal sent in the original request.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "avoid_die": {
                "label": "avoid_die",
                "description": "Should errors be returned as WP_Error objects instead of executing wp_die()?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false",
            "WP_Error"
        ],
        "return_description": "The ID of the comment on success, false or WP_Error on failure.",
        "rank": 0
    },
    "wp_new_comment_notify_moderator": {
        "since": "4.4.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_new_comment_notify_moderator",
        "summary": "Send a comment moderation notification to the comment moderator.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "ID of the comment.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_new_comment_notify_postauthor": {
        "since": "4.4.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_new_comment_notify_postauthor",
        "summary": "Send a notification of a new comment to the post author.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_ID": {
                "label": "comment_ID",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_new_user_notification": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_new_user_notification",
        "summary": "Email login credentials to a newly-registered user.",
        "description": "<p>A new user registration notification is also sent to admin email.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used (argument deprecated).",
                "type": "null",
                "types": [
                    "null"
                ],
                "default": "null",
                "required": false
            },
            "notify": {
                "label": "notify",
                "description": "Type of notification that should happen. Accepts 'admin' or an empty string (admin only), 'user', or 'both' (admin and user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_next_scheduled": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_next_scheduled",
        "summary": "Retrieve the next timestamp for an event.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hook": {
                "label": "hook",
                "description": "Action hook of the event.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function. Although not passed to a callback, these arguments are used to uniquely identify the event, so they should be the same as those used when originally scheduling the event.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "The Unix timestamp of the next time the event will occur. False if the event doesn't exist.",
        "rank": 0
    },
    "wp_nonce_ays": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_nonce_ays",
        "summary": "Display \"Are You Sure\" message to confirm the action being taken.",
        "description": "<p>If the action has the nonce explain message, then it will be displayed along with the &quot;Are you sure?&quot; message.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "The nonce action.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_nonce_field": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_nonce_field",
        "summary": "Retrieve or display nonce hidden field for forms.",
        "description": "<p>The nonce field is used to validate that the contents of the form came from the location on the current site and not somewhere else. The nonce does not offer absolute protection, but should protect against most cases. It is very important to use nonce field in forms.<\/p> <p>The $action and $name are optional, but if you want to have better security, it is strongly suggested to set those two parameters. It is easier to just call the function without any parameters, because validation of the nonce doesn't require any parameters, but since crackers know what the default is it won't be difficult for them to find a way around your nonce and cause damage.<\/p> <p>The input name will be whatever $name value you gave. The input value will be the nonce creation value.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action": {
                "label": "action",
                "description": "Action name.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "-1",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Nonce name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'_wpnonce'",
                "required": false
            },
            "referer": {
                "label": "referer",
                "description": "Whether to set the referer field for validation.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to display or return hidden form field.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Nonce field HTML markup.",
        "rank": 0
    },
    "wp_nonce_tick": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_nonce_tick",
        "summary": "Get the time-dependent variable for nonce creation.",
        "description": "<p>A nonce has a lifespan of two ticks. Nonces in their second tick may be updated, e.g. by autosave.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "float",
                "label": "float"
            }
        },
        "return": [
            "float"
        ],
        "return_description": "Float value rounded up to the next highest integer.",
        "rank": 0
    },
    "wp_nonce_url": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_nonce_url",
        "summary": "Retrieve URL with nonce added to URL query.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "actionurl": {
                "label": "actionurl",
                "description": "URL to add nonce action.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "action": {
                "label": "action",
                "description": "Nonce action name.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": "-1",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Nonce name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'_wpnonce'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Escaped URL with nonce action added.",
        "rank": 0
    },
    "wp_normalize_path": {
        "since": "3.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_normalize_path",
        "summary": "Normalize a filesystem path.",
        "description": "<p>On windows systems, replaces backslashes with forward slashes and forces upper-case drive letters. Allows for two leading slashes for Windows network shares, but ensures that all other duplicate slashes are reduced to a single.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "Path to normalize.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Normalized path.",
        "rank": 0
    },
    "wp_normalize_site_data": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_normalize_site_data",
        "summary": "Normalizes data for a site prior to inserting or updating in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Associative array of site data passed to the respective function. See wp_insert_site() for the possibly included data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Normalized site data.",
        "rank": 0
    },
    "wp_notify_moderator": {
        "since": "1.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_notify_moderator",
        "summary": "Notifies the moderator of the site about a new comment that is awaiting approval.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Always returns true.",
        "rank": 0
    },
    "wp_notify_postauthor": {
        "since": "1.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_notify_postauthor",
        "summary": "Notify an author (and\/or others) of a comment\/trackback\/pingback on a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Not used",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on completion. False if no email addresses were specified.",
        "rank": 0
    },
    "wp_oembed_add_provider": {
        "since": "2.9.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_oembed_add_provider",
        "summary": "Adds a URL format and oEmbed provider URL pair.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "The format of URL that this provider can handle. You can use asterisks as wildcards.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "provider": {
                "label": "provider",
                "description": "The URL to the oEmbed provider.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "regex": {
                "label": "regex",
                "description": "Whether the $format parameter is in a RegEx format.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_oembed_ensure_format": {
        "since": "4.4.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_oembed_ensure_format",
        "summary": "Ensures that the specified format is either 'json' or 'xml'.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "The oEmbed response format. Accepts 'json' or 'xml'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The format, either 'xml' or 'json'. Default 'json'.",
        "rank": 0
    },
    "wp_oembed_get": {
        "since": "2.9.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_oembed_get",
        "summary": "Attempts to fetch the embed HTML for a provided URL using oEmbed.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL that should be embedded.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Additional arguments and parameters for retrieving embed HTML.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "False on failure or the embed HTML on success.",
        "rank": 0
    },
    "wp_oembed_remove_provider": {
        "since": "3.5.0",
        "group": "oEmbed",
        "type": "efct",
        "name": "wp_oembed_remove_provider",
        "summary": "Removes an oEmbed provider.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "format": {
                "label": "format",
                "description": "The URL format for the oEmbed provider to remove.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Was the provider removed successfully?",
        "rank": 0
    },
    "wp_original_referer_field": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_original_referer_field",
        "summary": "Retrieve or display original referer hidden field for forms.",
        "description": "<p>The input name is '_wp_original_http_referer' and will be either the same value of wp_referer_field(), if that was posted already or it will be the current page, if it doesn't exist.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo the original http referer.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "jump_back_to": {
                "label": "jump_back_to",
                "description": "Can be 'previous' or page you want to jump back to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'current'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Original referer field.",
        "rank": 0
    },
    "wp_page_menu": {
        "since": "2.7.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_page_menu",
        "summary": "Displays or retrieves a list of pages with an optional home link.",
        "description": "<p>The arguments are listed below and part of the arguments are for wp_list_pages() function. Check that function for more info on those arguments.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments to generate a page menu. See wp_list_pages() for additional arguments. <ul><li><b>'sort_column'<\/b><br\/><i>(string)<\/i> How to sort the list of pages. Accepts post column names. Default 'menu_order, post_title'.<\/li> <li><b>'menu_id'<\/b><br\/><i>(string)<\/i> ID for the div containing the page list. Default is empty string.<\/li> <li><b>'menu_class'<\/b><br\/><i>(string)<\/i> Class to use for the element containing the page list. Default 'menu'.<\/li> <li><b>'container'<\/b><br\/><i>(string)<\/i> Element to use for the element containing the page list. Default 'div'.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo the list or return it. Accepts true (echo) or false (return). Default true.<\/li> <li><b>'show_home'<\/b><br\/><i>(int|bool|string)<\/i> Whether to display the link to the home page. Can just enter the text you'd like shown for the home link. 1|true defaults to 'Home'.<\/li> <li><b>'link_before'<\/b><br\/><i>(string)<\/i> The HTML or text to prepend to $show_home text. <\/li> <li><b>'link_after'<\/b><br\/><i>(string)<\/i> The HTML or text to append to $show_home text. <\/li> <li><b>'before'<\/b><br\/><i>(string)<\/i> The HTML or text to prepend to the menu. Default is '&lt;ul&gt;'.<\/li> <li><b>'after'<\/b><br\/><i>(string)<\/i> The HTML or text to append to the menu. Default is '&lt;\/ul&gt;'.<\/li> <li><b>'item_spacing'<\/b><br\/><i>(string)<\/i> Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'discard'.<\/li> <li><b>'walker'<\/b><br\/><i>(Walker)<\/i> Walker instance to use for listing pages. Default empty (Walker_Page).<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML menu",
        "rank": 0
    },
    "wp_parse_args": {
        "since": "2.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_args",
        "summary": "Merge user defined arguments into defaults array.",
        "description": "<p>This function is used throughout WordPress to allow for both string or array to be merged into another array.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Value to merge with $defaults.",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "defaults": {
                "label": "defaults",
                "description": "Array that serves as the defaults.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Merged user defined values with defaults.",
        "rank": 0
    },
    "wp_parse_auth_cookie": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_auth_cookie",
        "summary": "Parse a cookie into its components",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cookie": {
                "label": "cookie",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The cookie scheme to use: auth, secure_auth, or logged_in",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Authentication cookie components",
        "rank": 0
    },
    "wp_parse_id_list": {
        "since": "3.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_id_list",
        "summary": "Clean up an array, comma- or space-separated list of IDs.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "List of ids.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Sanitized array of IDs.",
        "rank": 0
    },
    "wp_parse_list": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_list",
        "summary": "Cleans up an array, comma- or space-separated list of scalar values.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "List of values.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Sanitized array of values.",
        "rank": 0
    },
    "wp_parse_slug_list": {
        "since": "4.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_slug_list",
        "summary": "Clean up an array, comma- or space-separated list of slugs.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "list": {
                "label": "list",
                "description": "List of slugs.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Sanitized array of slugs.",
        "rank": 0
    },
    "wp_parse_str": {
        "since": "2.2.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_parse_str",
        "summary": "Parses a string into variables to be stored in an array.",
        "description": "<p>Uses {@link https:\/\/secure.php.net\/parse_str parse_str()} and stripslashes if {@link https:\/\/secure.php.net\/magic_quotes magic_quotes_gpc} is on.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "The string to be parsed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "array": {
                "label": "array",
                "description": "Variables will be stored in this array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_parse_url": {
        "since": "4.4.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_parse_url",
        "summary": "A wrapper for PHP's parse_url() function that handles consistency in the return values across PHP versions.",
        "description": "<p>PHP 5.4.7 expanded parse_url()'s ability to handle non-absolute url's, including schemeless and relative url's with :\/\/ in the path. This function works around those limitations providing a standard output on PHP 5.2~5.4+.<\/p> <p>Secondly, across various PHP versions, schemeless URLs starting containing a &quot;:&quot; in the query are being handled inconsistently. This function works around those differences as well.<\/p> <p>Error suppression is used as prior to PHP 5.3.3, an E_WARNING would be generated when URL parsing failed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "The URL to parse.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "component": {
                "label": "component",
                "description": "The specific component to retrieve. Use one of the PHP predefined constants to specify which one. Defaults to -1 (= return all parts as an array).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "-1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed"
        ],
        "return_description": "False on parse failure; Array of URL components on success;               When a specific component has been requested: null if the component               doesn't exist in the given URL; a string or - in the case of               PHP_URL_PORT - integer when it does. See parse_url()'s return values.",
        "rank": 0
    },
    "wp_password_change_notification": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_password_change_notification",
        "summary": "Notify the blog admin of a user changing password, normally via email.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "User object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_playlist_scripts": {
        "since": "3.9.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_playlist_scripts",
        "summary": "Outputs and enqueue default scripts and styles for playlists.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "Type of playlist. Accepts 'audio' or 'video'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_playlist_shortcode": {
        "since": "3.9.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_playlist_shortcode",
        "summary": "Builds the Playlist shortcode output.",
        "description": "<p>This implements the functionality of the playlist shortcode for displaying a collection of WordPress audio or video files in a post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Array of default playlist attributes. <ul><li><b>'type'<\/b><br\/><i>(string)<\/i> Type of playlist to display. Accepts 'audio' or 'video'. Default 'audio'.<\/li> <li><b>'order'<\/b><br\/><i>(string)<\/i> Designates ascending or descending order of items in the playlist. Accepts 'ASC', 'DESC'. Default 'ASC'.<\/li> <li><b>'orderby'<\/b><br\/><i>(string)<\/i> Any column, or columns, to sort the playlist. If $ids are passed, this defaults to the order of the $ids array ('post__in'). Otherwise default is 'menu_order ID'.<\/li> <li><b>'id'<\/b><br\/><i>(int)<\/i> If an explicit $ids array is not present, this parameter will determine which attachments are used for the playlist. Default is the current post ID.<\/li> <li><b>'ids'<\/b><br\/><i>(array)<\/i> Create a playlist out of these explicit attachment IDs. If empty, a playlist will be created from all $type attachments of $id. Default empty.<\/li> <li><b>'exclude'<\/b><br\/><i>(array)<\/i> List of specific attachment IDs to exclude from the playlist. Default empty.<\/li> <li><b>'style'<\/b><br\/><i>(string)<\/i> Playlist style to use. Accepts 'light' or 'dark'. Default 'light'.<\/li> <li><b>'tracklist'<\/b><br\/><i>(bool)<\/i> Whether to show or hide the playlist. Default true.<\/li> <li><b>'tracknumbers'<\/b><br\/><i>(bool)<\/i> Whether to show or hide the numbers next to entries in the playlist. Default true.<\/li> <li><b>'images'<\/b><br\/><i>(bool)<\/i> Show or hide the video or audio thumbnail (Featured Image\/post thumbnail). Default true.<\/li> <li><b>'artists'<\/b><br\/><i>(bool)<\/i> Whether to show or hide artist name in the playlist. Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Playlist output. Empty string if the passed type is unsupported.",
        "rank": 0
    },
    "wp_plugin_update_row": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "wp_plugin_update_row",
        "summary": "Displays update information for a plugin.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Plugin basename.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "plugin_data": {
                "label": "plugin_data",
                "description": "Plugin information.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_popular_terms_checklist": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_popular_terms_checklist",
        "summary": "Retrieve a list of the most popular terms from the specified taxonomy.",
        "description": "<p>If the $echo argument is true then the elements for a list of checkbox &lt;input&gt; elements labelled with the names of the selected terms is output. If the $post_ID global isn't empty then the terms associated with that post will be marked as checked.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy to retrieve terms from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "Not used.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "number": {
                "label": "number",
                "description": "Number of terms to retrieve. Defaults to 10.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "10",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "y output the list as well. Defaults to true.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "List of popular term IDs.",
        "rank": 0
    },
    "wp_post_mime_type_where": {
        "since": "2.5.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_post_mime_type_where",
        "summary": "Convert MIME types into SQL.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_mime_types": {
                "label": "post_mime_types",
                "description": "List of mime types or comma separated string of mime types.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "table_alias": {
                "label": "table_alias",
                "description": "Specify a table alias, if needed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The SQL AND clause for mime searching.",
        "rank": 0
    },
    "wp_post_revision_title": {
        "since": "2.6.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_post_revision_title",
        "summary": "Retrieve formatted date timestamp of a revision (linked to that revisions's page).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "revision": {
                "label": "revision",
                "description": "Revision ID or revision object.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "link": {
                "label": "link",
                "description": "Link to revisions's page?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "i18n formatted datetimestamp or localized 'Current Revision'.",
        "rank": 0
    },
    "wp_post_revision_title_expanded": {
        "since": "3.6.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_post_revision_title_expanded",
        "summary": "Retrieve formatted date timestamp of a revision (linked to that revisions's page).",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "revision": {
                "label": "revision",
                "description": "Revision ID or revision object.",
                "type": "int",
                "types": [
                    "int",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "link": {
                "label": "link",
                "description": "Link to revisions's page?",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "gravatar, user, i18n formatted datetimestamp or localized 'Current Revision'.",
        "rank": 0
    },
    "wp_pre_kses_less_than": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_pre_kses_less_than",
        "summary": "Convert lone less than signs.",
        "description": "<p>KSES already converts lone greater than signs.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to be converted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted text.",
        "rank": 0
    },
    "wp_pre_kses_less_than_callback": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_pre_kses_less_than_callback",
        "summary": "Callback function used by preg_replace.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "Populated by matches to preg_replace.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The text returned after esc_html if needed.",
        "rank": 0
    },
    "wp_prepare_attachment_for_js": {
        "since": "3.5.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_prepare_attachment_for_js",
        "summary": "Prepares an attachment post object for JS, where it is expected to be JSON-encoded and fit into an Attachment model.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment": {
                "label": "attachment",
                "description": "Attachment ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "void"
        ],
        "return_description": "Array of attachment details.",
        "rank": 0
    },
    "wp_prepare_revisions_for_js": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_prepare_revisions_for_js",
        "summary": "Prepare revisions for JavaScript.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post object. Also accepts a post ID.",
                "type": "object",
                "types": [
                    "object",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "selected_revision_id": {
                "label": "selected_revision_id",
                "description": "The selected revision ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "from": {
                "label": "from",
                "description": "The revision ID to compare from.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An associative array of revision data and related settings.",
        "rank": 0
    },
    "wp_prepare_site_data": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_prepare_site_data",
        "summary": "Prepares site data for insertion or update in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Associative array of site data passed to the respective function. See wp_insert_site() for the possibly included data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "defaults": {
                "label": "defaults",
                "description": "Site data defaults to parse $data against.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "old_site": {
                "label": "old_site",
                "description": "Old site object if an update, or null if an insertion.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Site data ready for a database transaction, or WP_Error in case a validation                        error occurred.",
        "rank": 0
    },
    "wp_prepare_themes_for_js": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_prepare_themes_for_js",
        "summary": "Prepare themes for JavaScript.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "themes": {
                "label": "themes",
                "description": "Array of theme objects to prepare. Defaults to all allowed themes.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An associative array of theme data, sorted by name.",
        "rank": 0
    },
    "wp_print_head_scripts": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_print_head_scripts",
        "summary": "Prints the script queue in the HTML head on the front end.",
        "description": "<p>Postpones the scripts that were queued for the footer. wp_print_footer_scripts() is called in the footer to print these scripts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_print_scripts": {
        "since": "2.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_print_scripts",
        "summary": "Prints scripts in document head that are in the $handles queue.",
        "description": "<p>Called by admin-header.php and {@see 'wp_head'} hook. Since it is called by wp_head on every page load, the function does not instantiate the WP_Scripts object unless script names are explicitly passed. Makes use of already-instantiated $wp_scripts global if present. Use provided {@see 'wp_print_scripts'} hook to register\/enqueue new scripts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handles": {
                "label": "handles",
                "description": "Scripts to be printed. Default 'false'.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "On success, a processed array of WP_Dependencies items; otherwise, an empty array.",
        "rank": 0
    },
    "wp_print_styles": {
        "since": "2.6.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_print_styles",
        "summary": "Display styles that are in the $handles queue.",
        "description": "<p>Passing an empty array to $handles prints the queue, passing an array with one string prints that style, and passing an array of strings prints those styles.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handles": {
                "label": "handles",
                "description": "Styles to be printed. Default 'false'.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "array"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "On success, a processed array of WP_Dependencies items; otherwise, an empty array.",
        "rank": 0
    },
    "wp_privacy_anonymize_data": {
        "since": "4.9.6",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_privacy_anonymize_data",
        "summary": "Return uniform \"anonymous\" data by type.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "The type of data to be anonymized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The data to be anonymized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The anonymous data for the requested type.",
        "rank": 0
    },
    "wp_privacy_anonymize_ip": {
        "since": "4.9.6",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_privacy_anonymize_ip",
        "summary": "Return an anonymized IPv4 or IPv6 address.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ip_addr": {
                "label": "ip_addr",
                "description": "The IPv4 or IPv6 address to be anonymized.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "ipv6_fallback": {
                "label": "ipv6_fallback",
                "description": "Whether to return the original IPv6 address if the needed functions to anonymize it are not present. Default false, return :: (unspecified address).",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The anonymized IP address.",
        "rank": 0
    },
    "wp_privacy_exports_dir": {
        "since": "4.9.6",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_privacy_exports_dir",
        "summary": "Returns the directory used to store personal data export files.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Exports directory.",
        "rank": 0
    },
    "wp_privacy_exports_url": {
        "since": "4.9.6",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_privacy_exports_url",
        "summary": "Returns the URL of the directory used to store personal data export files.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Exports directory URL.",
        "rank": 0
    },
    "wp_privacy_generate_personal_data_export_file": {
        "since": "4.9.6",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_privacy_generate_personal_data_export_file",
        "summary": "Generate the personal data export file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "The export request ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_privacy_generate_personal_data_export_group_html": {
        "since": "4.9.6",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_privacy_generate_personal_data_export_group_html",
        "summary": "Generate a single group for the personal data export report.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "group_data": {
                "label": "group_data",
                "description": "The group data to render. <ul><li><b>'group_label'<\/b><br\/><i>(string)<\/i> The user-facing heading for the group, e.g. 'Comments'.<\/li> <li><b>'items'<\/b><br\/><i>(array)<\/i> An array of group items.<ul> <li><b>'group_item_data'<\/b><br\/><i>(array)<\/i> An array of name-value pairs for the item.<ul> <li><b>'name'<\/b><br\/><i>(string)<\/i> The user-facing name of an item name-value pair, e.g. 'IP Address'.<\/li> <li><b>'value'<\/b><br\/><i>(string)<\/i> The user-facing value of an item data pair, e.g. '50.60.70.0'. } <\/li><\/ul> <\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The HTML for this group and its items.",
        "rank": 0
    },
    "wp_privacy_process_personal_data_erasure_page": {
        "since": "4.9.6",
        "group": "Administration",
        "type": "efct",
        "name": "wp_privacy_process_personal_data_erasure_page",
        "summary": "Mark erasure requests as completed after processing is finished.",
        "description": "<p>This intercepts the Ajax responses to personal data eraser page requests, and monitors the status of a request. Once all of the processing has finished, the request is marked as completed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The response from the personal data eraser for the given page.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "eraser_index": {
                "label": "eraser_index",
                "description": "The index of the personal data eraser. Begins at 1.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "email_address": {
                "label": "email_address",
                "description": "The email address of the user whose personal data this is.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "The page of personal data for this eraser. Begins at 1.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "request_id": {
                "label": "request_id",
                "description": "The request ID for this personal data erasure.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The filtered response.",
        "rank": 0
    },
    "wp_privacy_process_personal_data_export_page": {
        "since": "4.9.6",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_privacy_process_personal_data_export_page",
        "summary": "Intercept personal data exporter page ajax responses in order to assemble the personal data export file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The response from the personal data exporter for the given page.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "exporter_index": {
                "label": "exporter_index",
                "description": "The index of the personal data exporter. Begins at 1.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "email_address": {
                "label": "email_address",
                "description": "The email address of the user whose personal data this is.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "page": {
                "label": "page",
                "description": "The page of personal data for this exporter. Begins at 1.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "request_id": {
                "label": "request_id",
                "description": "The request ID for this personal data export.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "send_as_email": {
                "label": "send_as_email",
                "description": "Whether the final results of the export should be emailed to the user.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "exporter_key": {
                "label": "exporter_key",
                "description": "The slug (key) of the exporter.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The filtered response.",
        "rank": 0
    },
    "wp_privacy_send_personal_data_export_email": {
        "since": "4.9.6",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_privacy_send_personal_data_export_email",
        "summary": "Send an email to the user with a link to the personal data export file",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "The request ID for this personal data export.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "WP_Error"
        ],
        "return_description": "True on success or <code>WP_Error<\/code> on failure.",
        "rank": 0
    },
    "wp_protect_special_option": {
        "since": "2.2.0",
        "group": "Option",
        "type": "efct",
        "name": "wp_protect_special_option",
        "summary": "Protect WordPress special option from being modified.",
        "description": "<p>Will die if $option is in protected list. Protected options are 'alloptions' and 'notoptions' options.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "option": {
                "label": "option",
                "description": "Option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_prototype_before_jquery": {
        "since": "2.3.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_prototype_before_jquery",
        "summary": "Reorder JavaScript scripts array to place prototype before jQuery.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "js_array": {
                "label": "js_array",
                "description": "JavaScript scripts array",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Reordered array, if needed.",
        "rank": 0
    },
    "wp_publish_post": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_publish_post",
        "summary": "Publish a post by transitioning the post status.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_queue_comments_for_comment_meta_lazyload": {
        "since": "4.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_queue_comments_for_comment_meta_lazyload",
        "summary": "Queues comments for metadata lazy-loading.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comments": {
                "label": "comments",
                "description": "Array of comment objects.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_queue_posts_for_term_meta_lazyload": {
        "since": "4.5.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_queue_posts_for_term_meta_lazyload",
        "summary": "Queues posts for lazy-loading of term meta.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "posts": {
                "label": "posts",
                "description": "Array of WP_Post objects.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_raise_memory_limit": {
        "since": "4.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_raise_memory_limit",
        "summary": "Attempts to raise the PHP memory limit for memory intensive processes.",
        "description": "<p>Only allows raising the existing limit and prevents lowering it.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "context": {
                "label": "context",
                "description": "Context in which the function is called. Accepts either 'admin', 'image', or an arbitrary other context. If an arbitrary context is passed, the similarly arbitrary &#039;{$context_memory_limit'} filter will be invoked.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'admin'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int",
            "string"
        ],
        "return_description": "The limit that was set or false on failure.",
        "rank": 0
    },
    "wp_rand": {
        "since": "2.6.2",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_rand",
        "summary": "Generates a random number.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "min": {
                "label": "min",
                "description": "Lower limit for the generated number",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "max": {
                "label": "max",
                "description": "Upper limit for the generated number",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "A random number between min and max",
        "rank": 0
    },
    "wp_read_audio_metadata": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_read_audio_metadata",
        "summary": "Retrieve metadata from an audio file's ID3 tags.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Path to file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "Returns array of metadata, if found.",
        "rank": 0
    },
    "wp_read_image_metadata": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_read_image_metadata",
        "summary": "Get extended image metadata, exif or iptc as available.",
        "description": "<p>Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso created_timestamp, focal_length, shutter_speed, and title.<\/p> <p>The IPTC metadata that is retrieved is APP13, credit, byline, created date and time, caption, copyright, and title. Also includes FNumber, Model, DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "array"
        ],
        "return_description": "False on failure. Image metadata array on success.",
        "rank": 0
    },
    "wp_read_video_metadata": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_read_video_metadata",
        "summary": "Retrieve metadata from a video file's ID3 tags",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Path to file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "bool"
        ],
        "return_description": "Returns array of metadata, if found.",
        "rank": 0
    },
    "wp_redirect": {
        "since": "1.5.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_redirect",
        "summary": "Redirects to another page.",
        "description": "<p>Note: wp_redirect() does not exit automatically, and should almost always be followed by a call to exit;:<\/p> wp_redirect( $url ); exit; <p>Exiting can also be selectively manipulated by using wp_redirect() as a conditional in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:<\/p> if ( wp_redirect( $url ) ) { exit; }",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "The path or URL to redirect to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "status": {
                "label": "status",
                "description": "HTTP response status code to use. Default '302' (Moved Temporarily).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "302",
                "required": false
            },
            "x_redirect_by": {
                "label": "x_redirect_by",
                "description": "The application doing the redirect.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'WordPress'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "False if the redirect was cancelled, true otherwise.",
        "rank": 0
    },
    "wp_referer_field": {
        "since": "2.0.4",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_referer_field",
        "summary": "Retrieve or display referer hidden field for forms.",
        "description": "<p>The referer link is the current Request URI from the server super global. The input name is '_wp_http_referer', in case you wanted to check manually.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Whether to echo or return the referer field.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Referer field HTML markup.",
        "rank": 0
    },
    "wp_refresh_heartbeat_nonces": {
        "since": "5.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_refresh_heartbeat_nonces",
        "summary": "Add the latest Heartbeat and REST-API nonce to the Heartbeat response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The Heartbeat response.",
        "rank": 0
    },
    "wp_refresh_post_lock": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_refresh_post_lock",
        "summary": "Check lock status on the New\/Edit Post screen and refresh the lock",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The $_POST data sent.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "screen_id": {
                "label": "screen_id",
                "description": "The screen id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The Heartbeat response.",
        "rank": 0
    },
    "wp_refresh_post_nonces": {
        "since": "3.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_refresh_post_nonces",
        "summary": "Check nonce expiration on the New\/Edit Post screen and refresh if needed",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "The Heartbeat response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "The $_POST data sent.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "screen_id": {
                "label": "screen_id",
                "description": "The screen id.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The Heartbeat response.",
        "rank": 0
    },
    "wp_register": {
        "since": "1.5.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_register",
        "summary": "Display the Registration or Admin link.",
        "description": "<p>Display a link which allows the user to navigate to the registration page if not logged in and registration is enabled or to the dashboard if logged in.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "before": {
                "label": "before",
                "description": "Text to output before the link. Default &lt;li&gt;.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'<li>'",
                "required": false
            },
            "after": {
                "label": "after",
                "description": "Text to output after the link. Default &lt;\/li&gt;.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'<\/li>'",
                "required": false
            },
            "echo": {
                "label": "echo",
                "description": "Default to echo and not return the link.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "String when retrieving.",
        "rank": 0
    },
    "wp_register_comment_personal_data_eraser": {
        "since": "4.9.6",
        "group": "Comment",
        "type": "efct",
        "name": "wp_register_comment_personal_data_eraser",
        "summary": "Registers the personal data eraser for comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "erasers": {
                "label": "erasers",
                "description": "An array of personal data erasers.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$erasers An array of personal data erasers.",
        "rank": 0
    },
    "wp_register_comment_personal_data_exporter": {
        "since": "4.9.6",
        "group": "Comment",
        "type": "efct",
        "name": "wp_register_comment_personal_data_exporter",
        "summary": "Registers the personal data exporter for comments.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "exporters": {
                "label": "exporters",
                "description": "An array of personal data exporters.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "$exporters An array of personal data exporters.",
        "rank": 0
    },
    "wp_register_media_personal_data_exporter": {
        "since": false,
        "group": "Media",
        "type": "efct",
        "name": "wp_register_media_personal_data_exporter",
        "summary": "Registers the personal data exporter for media",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "exporters": {
                "label": "exporters",
                "description": "An array of personal data exporters.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of personal data exporters.",
        "rank": 0
    },
    "wp_register_plugin_realpath": {
        "since": "3.9.0",
        "group": "Plugin",
        "type": "efct",
        "name": "wp_register_plugin_realpath",
        "summary": "Register a plugin's real path.",
        "description": "<p>This is used in plugin_basename() to resolve symlinked paths.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "file": {
                "label": "file",
                "description": "Known path to the file.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the path was able to be registered.",
        "rank": 0
    },
    "wp_register_script": {
        "since": "2.1.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_register_script",
        "summary": "Register a new script.",
        "description": "<p>Registers a script to be enqueued later using the wp_enqueue_script() function.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script. Should be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "src": {
                "label": "src",
                "description": "Full URL of the script, or path of the script relative to the WordPress root directory. If source is set to false, script is an alias of other scripts it depends on.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "deps": {
                "label": "deps",
                "description": "An array of registered script handles this script depends on.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "ver": {
                "label": "ver",
                "description": "String specifying script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "null"
                ],
                "default": "false",
                "required": false
            },
            "in_footer": {
                "label": "in_footer",
                "description": "Whether to enqueue the script before &lt;\/body&gt; instead of in the &lt;head&gt;. Default 'false'.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the script has been registered. True on success, false on failure.",
        "rank": 0
    },
    "wp_register_sidebar_widget": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_register_sidebar_widget",
        "summary": "Register an instance of a widget.",
        "description": "<p>The default widget option is 'classname' that can be overridden.<\/p> <p>The function can also be used to un-register widgets when $output_callback parameter is an empty string.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "Widget display title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "output_callback": {
                "label": "output_callback",
                "description": "Run when widget is called.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "An array of supplementary widget options for the instance. <ul><li><b>'classname'<\/b><br\/><i>(string)<\/i> Class name for the widget's HTML container. Default is a shortened version of the output callback name.<\/li> <li><b>'description'<\/b><br\/><i>(string)<\/i> Widget description for display in the widget administration panel and\/or theme.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_register_style": {
        "since": "2.6.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_register_style",
        "summary": "Register a CSS stylesheet.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet. Should be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "src": {
                "label": "src",
                "description": "Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory. If source is set to false, stylesheet is an alias of other stylesheets it depends on.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "deps": {
                "label": "deps",
                "description": "An array of registered stylesheet handles this stylesheet depends on.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "ver": {
                "label": "ver",
                "description": "String specifying stylesheet version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.",
                "type": "string",
                "types": [
                    "string",
                    "bool",
                    "null"
                ],
                "default": "false",
                "required": false
            },
            "media": {
                "label": "media",
                "description": "The media for which this stylesheet has been defined. Accepts media types like 'all', 'print' and 'screen', or media queries like '(orientation: portrait)' and '(max-width: 640px)'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'all'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the style has been registered. True on success, false on failure.",
        "rank": 0
    },
    "wp_register_tinymce_scripts": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_register_tinymce_scripts",
        "summary": "Registers TinyMCE scripts.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scripts": {
                "label": "scripts",
                "description": "WP_Scripts object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_register_user_personal_data_exporter": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_register_user_personal_data_exporter",
        "summary": "Registers the personal data exporter for users.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "exporters": {
                "label": "exporters",
                "description": "An array of personal data exporters.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of personal data exporters.",
        "rank": 0
    },
    "wp_register_widget_control": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_register_widget_control",
        "summary": "Registers widget control callback for customizing options.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Sidebar ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "Sidebar display name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "control_callback": {
                "label": "control_callback",
                "description": "Run when sidebar is displayed.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Array or string of control options. <ul><li><b>'height'<\/b><br\/><i>(int)<\/i> Never used. Default 200.<\/li> <li><b>'width'<\/b><br\/><i>(int)<\/i> Width of the fully expanded control form (but try hard to use the default width). Default 250.<\/li> <li><b>'id_base'<\/b><br\/><i>(int|string)<\/i> Required for multi-widgets, i.e widgets that allow multiple instances such as the text widget. The widget id will end up looking like {$id_base}-{$unique_number}.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_registration_url": {
        "since": "3.6.0",
        "group": "Template",
        "type": "fct",
        "name": "wp_registration_url",
        "summary": "Returns the URL that allows the user to register on the site.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "User registration URL.",
        "rank": 0
    },
    "wp_rel_nofollow": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_rel_nofollow",
        "summary": "Adds rel nofollow string to all HTML A elements in content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Content that may contain HTML A elements.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted content.",
        "rank": 0
    },
    "wp_rel_nofollow_callback": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_rel_nofollow_callback",
        "summary": "Callback to add rel=nofollow string to HTML A element.",
        "description": "<p>Will remove already existing rel=&quot;nofollow&quot; and rel='nofollow' from the string to prevent from invalidating (X)HTML.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "Single Match",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML A Element with rel nofollow.",
        "rank": 0
    },
    "wp_remote_fopen": {
        "since": "1.5.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_remote_fopen",
        "summary": "HTTP request for URI to retrieve content.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "uri": {
                "label": "uri",
                "description": "URI\/URL of web page to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "string"
        ],
        "return_description": "HTTP content. False on failure.",
        "rank": 0
    },
    "wp_remote_get": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_get",
        "summary": "Retrieve the raw response from the HTTP request using the GET method.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_remote_head": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_head",
        "summary": "Retrieve the raw response from the HTTP request using the HEAD method.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_remote_post": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_post",
        "summary": "Retrieve the raw response from the HTTP request using the POST method.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_remote_request": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_request",
        "summary": "Retrieve the raw response from the HTTP request.",
        "description": "<p>The array structure is a little complex:<\/p> $res = array( 'headers' =&gt; array(), 'response' =&gt; array( 'code' =&gt; int, 'message' =&gt; string ) ); <p>All of the headers in $res['headers'] are with the name as the key and the value as the value. So to get the User-Agent, you would do the following.<\/p> $user_agent = $res['headers']['user-agent']; <p>The body is the raw response content and can be retrieved from $res['body'].<\/p> <p>This function is called first to make the request and there are other API functions to abstract out the above convoluted setup.<\/p> <p>Request method defaults for helper functions:<\/p> <ul> <li>Default 'GET' for wp_remote_get()<\/li> <li>Default 'POST' for wp_remote_post()<\/li> <li>Default 'HEAD' for wp_remote_head()<\/li> <\/ul>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_remote_retrieve_body": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_body",
        "summary": "Retrieve only the body from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The body of the response. Empty string if no body or incorrect parameter given.",
        "rank": 0
    },
    "wp_remote_retrieve_cookie": {
        "since": "4.4.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_cookie",
        "summary": "Retrieve a single cookie by name from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "The name of the cookie to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Http_Cookie",
            "string"
        ],
        "return_description": "The <code>WP_Http_Cookie<\/code> object. Empty string if the cookie isn't present in the response.",
        "rank": 0
    },
    "wp_remote_retrieve_cookie_value": {
        "since": "4.4.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_cookie_value",
        "summary": "Retrieve a single cookie's value by name from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "The name of the cookie to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The value of the cookie. Empty string if the cookie isn't present in the response.",
        "rank": 0
    },
    "wp_remote_retrieve_cookies": {
        "since": "4.4.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_cookies",
        "summary": "Retrieve only the cookies from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of <code>WP_Http_Cookie<\/code> objects from the response. Empty array if there are none, or the response is a WP_Error.",
        "rank": 0
    },
    "wp_remote_retrieve_header": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_header",
        "summary": "Retrieve a single header by name from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "header": {
                "label": "header",
                "description": "Header name to retrieve value from.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The header value. Empty string on if incorrect parameter given, or if the header doesn't exist.",
        "rank": 0
    },
    "wp_remote_retrieve_headers": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_headers",
        "summary": "Retrieve only the headers from the raw response.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "Requests_Utility_CaseInsensitiveDictionary"
        ],
        "return_description": "The headers of the response. Empty array if incorrect parameter given.",
        "rank": 0
    },
    "wp_remote_retrieve_response_code": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_response_code",
        "summary": "Retrieve only the response code from the raw response.",
        "description": "<p>Will return an empty array if incorrect parameter value is given.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "string"
        ],
        "return_description": "The response code as an integer. Empty string on incorrect parameter given.",
        "rank": 0
    },
    "wp_remote_retrieve_response_message": {
        "since": "2.7.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_remote_retrieve_response_message",
        "summary": "Retrieve only the response message from the raw response.",
        "description": "<p>Will return an empty array if incorrect parameter value is given.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "HTTP response.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The response message. Empty string on incorrect parameter given.",
        "rank": 0
    },
    "wp_removable_query_args": {
        "since": "4.4.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_removable_query_args",
        "summary": "Returns an array of single-use query variable names that can be removed from a URL.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of parameters to remove from the URL.",
        "rank": 0
    },
    "wp_remove_object_terms": {
        "since": "3.6.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_remove_object_terms",
        "summary": "Remove term(s) associated with a given object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_id": {
                "label": "object_id",
                "description": "The ID of the object from which the terms will be removed.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "terms": {
                "label": "terms",
                "description": "The slug(s) or ID(s) of the term(s) to remove.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, false or WP_Error on failure.",
        "rank": 0
    },
    "wp_replace_in_html_tags": {
        "since": "4.2.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_replace_in_html_tags",
        "summary": "Replace characters or phrases within HTML elements only.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "haystack": {
                "label": "haystack",
                "description": "The text which has to be formatted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "replace_pairs": {
                "label": "replace_pairs",
                "description": "In the form array('from' =&gt; 'to', ...).",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The formatted text.",
        "rank": 0
    },
    "wp_reschedule_event": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_reschedule_event",
        "summary": "Reschedules a recurring event.",
        "description": "<p>Mainly for internal use, this takes the time stamp of a previously run recurring event and reschedules it for its next run.<\/p> <p>To change upcoming scheduled events, use wp_schedule_event() to change the recurrence frequency.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "timestamp": {
                "label": "timestamp",
                "description": "Unix timestamp (UTC) for when the event was scheduled.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "recurrence": {
                "label": "recurrence",
                "description": "How often the event should subsequently recur. See wp_get_schedules() for accepted values.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "hook": {
                "label": "hook",
                "description": "Action hook to execute when the event is run.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if event successfully rescheduled. False for failure.",
        "rank": 0
    },
    "wp_reset_vars": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_reset_vars",
        "summary": "Resets global variables based on $_GET and $_POST",
        "description": "<p>This function resets global variables based on the names passed in the $vars array to the value of $_POST[$var] or $_GET[$var] or '' if neither is defined.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "vars": {
                "label": "vars",
                "description": "An array of globals to reset.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_resolve_numeric_slug_conflicts": {
        "since": "4.3.0",
        "group": "Rewrite",
        "type": "efct",
        "name": "wp_resolve_numeric_slug_conflicts",
        "summary": "Resolve numeric slugs that collide with date permalinks.",
        "description": "<p>Permalinks of posts with numeric slugs can sometimes look to WP_Query::parse_query() like a date archive, as when your permalink structure is \/%year%\/%postname%\/ and a post with post_name '05' has the URL \/2015\/05\/.<\/p> <p>This function detects conflicts of this type and resolves them in favor of the post permalink.<\/p> <p>Note that, since 4.3.0, wp_unique_post_slug() prevents the creation of post slugs that would result in a date archive conflict. The resolution performed in this function is primarily for legacy content, as well as cases when the admin has changed the site's permalink structure in a way that introduces URL conflicts.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "query_vars": {
                "label": "query_vars",
                "description": "Query variables for setting up the loop, as determined in WP::parse_request().",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Returns the original array of query vars, with date\/post conflicts resolved.",
        "rank": 0
    },
    "wp_restore_image": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_restore_image",
        "summary": "Restores the metadata for a given attachment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Attachment post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "stdClass",
                "label": "stdClass"
            }
        },
        "return": [
            "stdClass"
        ],
        "return_description": "Image restoration message object.",
        "rank": 0
    },
    "wp_restore_post_revision": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "efct",
        "name": "wp_restore_post_revision",
        "summary": "Restores a post to the specified revision.",
        "description": "<p>Can restore a past revision using all fields of the post revision, or only selected fields.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "revision_id": {
                "label": "revision_id",
                "description": "Revision ID or revision object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "fields": {
                "label": "fields",
                "description": "What fields to restore from. Defaults to all.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false",
            "null"
        ],
        "return_description": "Null if error, false if no fields to restore, (int) post ID if success.",
        "rank": 0
    },
    "wp_revisions_enabled": {
        "since": "3.6.0",
        "group": "Post_Revisions",
        "type": "efct",
        "name": "wp_revisions_enabled",
        "summary": "Determine if revisions are enabled for a given post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if number of revisions to keep isn't zero, false otherwise.",
        "rank": 0
    },
    "wp_revisions_to_keep": {
        "since": "3.6.0",
        "group": "Post_Revisions",
        "type": "efct",
        "name": "wp_revisions_to_keep",
        "summary": "Determine how many revisions to retain for a given post.",
        "description": "<p>By default, an infinite number of revisions are kept.<\/p> <p>The constant WP_POST_REVISIONS can be set in wp-config to specify the limit of revisions to keep.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "The post object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "The number of revisions to keep.",
        "rank": 0
    },
    "wp_revoke_user": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_revoke_user",
        "summary": "Remove all capabilities from user.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_roles": {
        "since": "4.3.0",
        "group": "Users",
        "type": "fct",
        "name": "wp_roles",
        "summary": "Retrieves the global WP_Roles instance and instantiates it if necessary.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_Roles",
                "label": "WP_Roles"
            }
        },
        "return": [
            "WP_Roles"
        ],
        "return_description": "WP_Roles global instance if not already instantiated.",
        "rank": 0
    },
    "wp_rss": {
        "since": "1.5.0",
        "group": "External",
        "type": "efct",
        "name": "wp_rss",
        "summary": "Display all RSS items in a HTML ordered list.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "URL of feed to display. Will not auto sense feed URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "num_items": {
                "label": "num_items",
                "description": "Number of items to display, default is all.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "-1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_safe_redirect": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_safe_redirect",
        "summary": "Performs a safe (local) redirect, using wp_redirect().",
        "description": "<p>Checks whether the $location is using an allowed host, if it has an absolute path. A plugin can therefore set or remove allowed host(s) to or from the list.<\/p> <p>If the host is not allowed, then the redirect defaults to wp-admin on the siteurl instead. This prevents malicious redirects which redirect to another host, but only used in a few places.<\/p> <p>Note: wp_safe_redirect() does not exit automatically, and should almost always be followed by a call to exit;:<\/p> wp_safe_redirect( $url ); exit; <p>Exiting can also be selectively manipulated by using wp_safe_redirect() as a conditional in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:<\/p> if ( wp_safe_redirect( $url ) ) { exit; }",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "The path or URL to redirect to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "status": {
                "label": "status",
                "description": "HTTP response status code to use. Default '302' (Moved Temporarily).",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "302",
                "required": false
            },
            "x_redirect_by": {
                "label": "x_redirect_by",
                "description": "The application doing the redirect.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'WordPress'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "$redirect False if the redirect was cancelled, true otherwise.",
        "rank": 0
    },
    "wp_safe_remote_get": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_safe_remote_get",
        "summary": "Retrieve the raw response from a safe HTTP request using the GET method.",
        "description": "<p>This function is ideal when the HTTP request is being made to an arbitrary URL. The URL is validated to avoid redirection and request forgery attacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_safe_remote_head": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_safe_remote_head",
        "summary": "Retrieve the raw response from a safe HTTP request using the HEAD method.",
        "description": "<p>This function is ideal when the HTTP request is being made to an arbitrary URL. The URL is validated to avoid redirection and request forgery attacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_safe_remote_post": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_safe_remote_post",
        "summary": "Retrieve the raw response from a safe HTTP request using the POST method.",
        "description": "<p>This function is ideal when the HTTP request is being made to an arbitrary URL. The URL is validated to avoid redirection and request forgery attacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_safe_remote_request": {
        "since": "3.6.0",
        "group": "HTTP",
        "type": "efct",
        "name": "wp_safe_remote_request",
        "summary": "Retrieve the raw response from a safe HTTP request.",
        "description": "<p>This function is ideal when the HTTP request is being made to an arbitrary URL. The URL is validated to avoid redirection and request forgery attacks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "url": {
                "label": "url",
                "description": "Site URL to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Request arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Error",
            "array"
        ],
        "return_description": "The response or WP_Error on failure.",
        "rank": 0
    },
    "wp_salt": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_salt",
        "summary": "Get salt to add to hashes.",
        "description": "<p>Salts are created using secret keys. Secret keys are located in two places: in the database and in the wp-config.php file. The secret key in the database is randomly generated and will be appended to the secret keys in wp-config.php.<\/p> <p>The secret keys in wp-config.php should be updated to strong, random keys to maximize security. Below is an example of how the secret key constants are defined. Do not paste this example directly into wp-config.php. Instead, have a {@link https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/ secret key created} just for you.<\/p> define('AUTH_KEY', ' Xakm&lt;o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@&lt; &gt;M%G4Yt&gt;f`z]MON'); define('SECURE_AUTH_KEY', 'LzJ}op]mr|6+![P}Ak:uNdJCJZd&gt;(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%\/U^O~'); define('LOGGED_IN_KEY', '|i|Ux`9&lt;p-h$aFf(qnT:sDO:D1P^wZ$$\/Ra@miTJi9G;ddp_&lt;q}6H1)o|a +&amp;JCM'); define('NONCE_KEY', '%:R{[P|,s.KuMltH5}cI;\/k&lt;Gx~j!f0I)m_sIyu+&amp;NJZ)-iO&gt;z7X&gt;QYR0Z_XnZ@|'); define('AUTH_SALT', 'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW'); define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9\/^4-3 STz},T(w}W&lt;I`.JjPi)&lt;Bmf1v,HpGe}T1:Xt7n'); define('LOGGED_IN_SALT', '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n&lt;+=uKR:&gt;*c(u`g~EJBf#8u#R{mUEZrozmm'); define('NONCE_SALT', 'h`GXHhD&gt;SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&amp;`+AycHcAV$+?@3q+rxV{%^VyKT'); <p>Salting passwords helps against tools which has stored hashed values of common dictionary strings. The added values makes it harder to crack.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "Authentication scheme (auth, secure_auth, logged_in, nonce)",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'auth'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Salt value",
        "rank": 0
    },
    "wp_sanitize_redirect": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_sanitize_redirect",
        "summary": "Sanitizes a URL for use in a redirect.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "The path to redirect to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Redirect-sanitized URL.",
        "rank": 0
    },
    "wp_save_image": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_save_image",
        "summary": "Saves image to post along with enqueued changes in $_REQUEST['history']",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "stdClass",
                "label": "stdClass"
            }
        },
        "return": [
            "stdClass"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_save_image_file": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_save_image_file",
        "summary": "Saves image to file.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "image": {
                "label": "image",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "mime_type": {
                "label": "mime_type",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_id": {
                "label": "post_id",
                "description": "",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_save_nav_menu_items": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_save_nav_menu_items",
        "summary": "Save posted nav menu item data.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_id": {
                "label": "menu_id",
                "description": "The menu ID for which to save this item. Value of 0 makes a draft, orphaned menu item. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "menu_data": {
                "label": "menu_data",
                "description": "The unsanitized POSTed menu item data.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int[]",
                "label": "int[]"
            }
        },
        "return": [
            "int[]"
        ],
        "return_description": "The database IDs of the items saved",
        "rank": 0
    },
    "wp_save_post_revision": {
        "since": "2.6.0",
        "group": "Post_Revisions",
        "type": "efct",
        "name": "wp_save_post_revision",
        "summary": "Creates a revision for the current version of a post.",
        "description": "<p>Typically used immediately after a post update, as every update is a revision, and the most recent revision always matches the current post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "The ID of the post to save as a revision.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error",
            "void"
        ],
        "return_description": "Void or 0 if error, new revision ID, if success.",
        "rank": 0
    },
    "wp_schedule_event": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_schedule_event",
        "summary": "Schedules a recurring event.",
        "description": "<p>Schedules a hook which will be triggered by WordPress at the specified interval. The action will trigger when someone visits your WordPress site if the scheduled time has passed.<\/p> <p>Valid values for the recurrence are 'hourly', 'daily', and 'twicedaily'. These can be extended using the {@see 'cron_schedules'} filter in wp_get_schedules().<\/p> <p>Note that scheduling an event to occur within 10 minutes of an existing event with the same action hook will be ignored unless you pass unique $args values for each scheduled event.<\/p> <p>Use wp_next_scheduled() to prevent duplicate events.<\/p> <p>Use wp_schedule_single_event() to schedule a non-recurring event.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "timestamp": {
                "label": "timestamp",
                "description": "Unix timestamp (UTC) for when to next run the event.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "recurrence": {
                "label": "recurrence",
                "description": "How often the event should subsequently recur. See wp_get_schedules() for accepted values.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "hook": {
                "label": "hook",
                "description": "Action hook to execute when the event is run.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if event successfully scheduled. False for failure.",
        "rank": 0
    },
    "wp_schedule_single_event": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_schedule_single_event",
        "summary": "Schedules an event to run only once.",
        "description": "<p>Schedules a hook which will be triggered by WordPress at the specified time. The action will trigger when someone visits your WordPress site if the scheduled time has passed.<\/p> <p>Note that scheduling an event to occur within 10 minutes of an existing event with the same action hook will be ignored unless you pass unique $args values for each scheduled event.<\/p> <p>Use wp_next_scheduled() to prevent duplicate events.<\/p> <p>Use wp_schedule_event() to schedule a recurring event.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "timestamp": {
                "label": "timestamp",
                "description": "Unix timestamp (UTC) for when to next run the event.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "hook": {
                "label": "hook",
                "description": "Action hook to execute when the event is run.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if event successfully scheduled. False for failure.",
        "rank": 0
    },
    "wp_script_add_data": {
        "since": "4.2.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_script_add_data",
        "summary": "Add metadata to a script.",
        "description": "<p>Works only if the script has already been added.<\/p> <p>Possible values for $key and $value: 'conditional' string Comments for IE 6, lte IE 7, etc.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "Name of data point for which we're storing a value.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "String containing the data to be added.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_script_is": {
        "since": "2.8.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_script_is",
        "summary": "Determines whether a script has been added to the queue.",
        "description": "<p>For more information on this and similar theme functions, check out the {@link https:\/\/developer.wordpress.org\/themes\/basics\/conditional-tags\/ Conditional Tags} article in the Theme Developer Handbook.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the script.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "list": {
                "label": "list",
                "description": "Status of the script to check. Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'enqueued'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the script is queued.",
        "rank": 0
    },
    "wp_scripts": {
        "since": "4.2.0",
        "group": "Dependencies",
        "type": "fct",
        "name": "wp_scripts",
        "summary": "Initialize $wp_scripts if it has not been set.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_Scripts",
                "label": "WP_Scripts"
            }
        },
        "return": [
            "WP_Scripts"
        ],
        "return_description": "WP_Scripts instance.",
        "rank": 0
    },
    "wp_scripts_get_suffix": {
        "since": "5.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_scripts_get_suffix",
        "summary": "Returns the suffix that can be used for the scripts.",
        "description": "<p>There are two suffix types, the normal one and the dev suffix.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "type": {
                "label": "type",
                "description": "The type of suffix to retrieve.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The script suffix.",
        "rank": 0
    },
    "wp_send_json": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_send_json",
        "summary": "Send a JSON response back to an Ajax request.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "response": {
                "label": "response",
                "description": "Variable (usually an array or object) to encode as JSON, then print and die.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "status_code": {
                "label": "status_code",
                "description": "The HTTP status code to output.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_send_json_error": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_send_json_error",
        "summary": "Send a JSON response back to an Ajax request, indicating failure.",
        "description": "<p>If the $data parameter is a WP_Error object, the errors within the object are processed and output as an array of error codes and corresponding messages. All other types are output without further processing.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Data to encode as JSON, then print and die.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "status_code": {
                "label": "status_code",
                "description": "The HTTP status code to output.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_send_json_success": {
        "since": "3.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_send_json_success",
        "summary": "Send a JSON response back to an Ajax request, indicating success.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "data": {
                "label": "data",
                "description": "Data to encode as JSON, then print and die.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            },
            "status_code": {
                "label": "status_code",
                "description": "The HTTP status code to output.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_send_new_user_notifications": {
        "since": "4.4.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_send_new_user_notifications",
        "summary": "Initiates email notifications related to the creation of new users.",
        "description": "<p>Notifications are sent both to the site admin and to the newly created user.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "ID of the newly created user.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "notify": {
                "label": "notify",
                "description": "Type of notification that should happen. Accepts 'admin' or an empty string (admin only), 'user', or 'both' (admin and user).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'both'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_send_user_request": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_send_user_request",
        "summary": "Send a confirmation request email to confirm an action.",
        "description": "<p>If the request is not already pending, it will be updated.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "ID of the request created via wp_create_user_request().",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, <code>WP_Error<\/code> on failure.",
        "rank": 0
    },
    "wp_set_auth_cookie": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_set_auth_cookie",
        "summary": "Log in a user by setting authentication cookies.",
        "description": "<p>The $remember parameter increases the time that the cookie will be kept. The default the cookie is kept without remembering is two days. When $remember is set, the cookies will be kept for 14 days or two weeks.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "remember": {
                "label": "remember",
                "description": "Whether to remember the user",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            },
            "secure": {
                "label": "secure",
                "description": "Whether the admin cookies should only be sent over HTTPS. Default is_ssl().",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            },
            "token": {
                "label": "token",
                "description": "User's session token to use for this cookie.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_set_comment_cookies": {
        "since": "3.4.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_set_comment_cookies",
        "summary": "Sets the cookies used to store an unauthenticated commentator's identity. Typically used to recall previous comments by this commentator that are still held in moderation.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment": {
                "label": "comment",
                "description": "Comment object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "user": {
                "label": "user",
                "description": "Comment author's user object. The user may not exist.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "cookies_consent": {
                "label": "cookies_consent",
                "description": "Comment author's consent to store cookies.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_set_comment_status": {
        "since": "1.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_set_comment_status",
        "summary": "Sets the status of a comment.",
        "description": "<p>The {@see 'wp_set_comment_status'} action is called after the comment is handled. If the comment status is not in the list, then false is returned.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "comment_status": {
                "label": "comment_status",
                "description": "New comment status, either 'hold', 'approve', 'spam', or 'trash'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "wp_error": {
                "label": "wp_error",
                "description": "Whether to return a WP_Error object if there is a failure. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, false or WP_Error on failure.",
        "rank": 0
    },
    "wp_set_current_user": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_set_current_user",
        "summary": "Changes the current user by ID or name.",
        "description": "<p>Set $id to null and specify a name if you do not know a user's ID.<\/p> <p>Some WordPress functionality is based on the current user and not based on the signed in user. Therefore, it opens the ability to edit and perform actions on users who aren't signed in.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "name": {
                "label": "name",
                "description": "User's username",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "WP_User",
                "label": "WP_User"
            }
        },
        "return": [
            "WP_User"
        ],
        "return_description": "Current user User object",
        "rank": 0
    },
    "wp_set_link_cats": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_set_link_cats",
        "summary": "Update link with the specified link categories.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "link_id": {
                "label": "link_id",
                "description": "ID of the link to update.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "link_categories": {
                "label": "link_categories",
                "description": "Array of link category IDs to add the link to.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_set_object_terms": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_set_object_terms",
        "summary": "Create Term and Taxonomy Relationships.",
        "description": "<p>Relates an object (post, link etc) to a term and taxonomy type. Creates the term and taxonomy relationship if it doesn't already exist. Creates a term if it doesn't exist (using the slug).<\/p> <p>A relationship means that the term is grouped in or belongs to the taxonomy. A term has no meaning until it is given context by defining which taxonomy it exists under.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "object_id": {
                "label": "object_id",
                "description": "The object to relate to.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "terms": {
                "label": "terms",
                "description": "A single term slug, single term id, or array of either term slugs or ids. Will replace all existing related terms in this taxonomy. Passing an empty value will remove all related terms.",
                "type": "string",
                "types": [
                    "string",
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The context in which to relate the term to the object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "append": {
                "label": "append",
                "description": "If false will delete difference of terms.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Term taxonomy IDs of the affected terms.",
        "rank": 0
    },
    "wp_set_password": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_set_password",
        "summary": "Updates the user's password with a new encrypted one.",
        "description": "<p>For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm.<\/p> <p>Please note: This function should be used sparingly and is really only meant for single-time application. Leveraging this improperly in a plugin or theme could result in an endless loop of password resets if precautions are not taken to ensure it does not execute on every page load.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "password": {
                "label": "password",
                "description": "The plaintext new user password",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_set_post_categories": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_set_post_categories",
        "summary": "Set categories for a post.",
        "description": "<p>If the post categories parameter is not set, then the default category is going used.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_ID": {
                "label": "post_ID",
                "description": "The Post ID. Does not default to the ID of the global $post. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "post_categories": {
                "label": "post_categories",
                "description": "List of category IDs, or the ID of a single category.",
                "type": "array",
                "types": [
                    "array",
                    "int"
                ],
                "default": "array()",
                "required": false
            },
            "append": {
                "label": "append",
                "description": "If true, don't delete existing categories, just add on. If false, replace the categories with the new categories.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of term taxonomy IDs of affected categories. WP_Error or false on failure.",
        "rank": 0
    },
    "wp_set_post_lock": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_set_post_lock",
        "summary": "Mark the post as currently being edited by the current user",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "ID of the post being edited.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false"
        ],
        "return_description": "Array of the lock time and user ID. False if the post does not exist, or                     there is no current user.",
        "rank": 0
    },
    "wp_set_post_tags": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_set_post_tags",
        "summary": "Set the tags for a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "tags": {
                "label": "tags",
                "description": "An array of tags to set for the post, or a string of tags separated by commas.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "append": {
                "label": "append",
                "description": "If true, don't delete existing tags, just add on. If false, replace the tags with the new tags.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of term taxonomy IDs of affected terms. WP_Error or false on failure.",
        "rank": 0
    },
    "wp_set_post_terms": {
        "since": "2.8.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_set_post_terms",
        "summary": "Set the terms for a post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "The Post ID. Does not default to the ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "tags": {
                "label": "tags",
                "description": "An array of terms to set for the post, or a string of terms separated by commas. Hierarchical taxonomies must always pass IDs rather than names so that children with the same names but different parents aren't confused.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "''",
                "required": false
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "Taxonomy name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'post_tag'",
                "required": false
            },
            "append": {
                "label": "append",
                "description": "If true, don't delete existing terms, just add on. If false, replace the terms with the new terms.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "false",
            "WP_Error"
        ],
        "return_description": "Array of term taxonomy IDs of affected terms. WP_Error or false on failure.",
        "rank": 0
    },
    "wp_set_script_translations": {
        "since": "5.0.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_set_script_translations",
        "summary": "Sets translated strings for a script.",
        "description": "<p>Works only if the script has already been added.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Script handle the textdomain will be attached to.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "domain": {
                "label": "domain",
                "description": "Text domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'default'",
                "required": false
            },
            "path": {
                "label": "path",
                "description": "The full file path to the directory containing translation files.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the text domain was successfully localized, false otherwise.",
        "rank": 0
    },
    "wp_setup_nav_menu_item": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_setup_nav_menu_item",
        "summary": "Decorates a menu item object with the shared navigation menu item properties.",
        "description": "<p>Properties:<\/p> <ul> <li>ID: The term_id if the menu item represents a taxonomy term.<\/li> <li>attr_title: The title attribute of the link element for this menu item.<\/li> <li>classes: The array of class attribute values for the link element of this menu item.<\/li> <li>db_id: The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).<\/li> <li>description: The description of this menu item.<\/li> <li>menu_item_parent: The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.<\/li> <li>object: The type of object originally represented, such as &quot;category,&quot; &quot;post&quot;, or &quot;attachment.&quot;<\/li> <li>object_id: The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.<\/li> <li>post_parent: The DB ID of the original object's parent object, if any (0 otherwise).<\/li> <li>post_title: A &quot;no title&quot; label if menu item represents a post that lacks a title.<\/li> <li>target: The target attribute of the link element for this menu item.<\/li> <li>title: The title of this menu item.<\/li> <li>type: The family of objects originally represented, such as &quot;post_type&quot; or &quot;taxonomy.&quot;<\/li> <li>type_label: The singular label used to describe this type of menu item.<\/li> <li>url: The URL to which this menu item points.<\/li> <li>xfn: The XFN relationship expressed in the link of this menu item.<\/li> <li>_invalid: Whether the menu item represents an object that no longer exists.<\/li> <\/ul>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_item": {
                "label": "menu_item",
                "description": "The menu item to modify.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "object",
                "label": "object"
            }
        },
        "return": [
            "object"
        ],
        "return_description": "$menu_item The menu item with standard menu item properties.",
        "rank": 0
    },
    "wp_should_upgrade_global_tables": {
        "since": "4.3.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_should_upgrade_global_tables",
        "summary": "Determine if global tables should be upgraded.",
        "description": "<p>This function performs a series of checks to ensure the environment allows for the safe upgrading of global WordPress database tables. It is necessary because global tables will commonly grow to millions of rows on large installations, and the ability to control their upgrade routines can be critical to the operation of large networks.<\/p> <p>In a future iteration, this function may use wp_is_large_network() to more- intelligently prevent global table upgrades. Until then, we make sure WordPress is on the main site of the main network, to avoid running queries more than once in multi-site or multi-network environments.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether to run the upgrade routines on global tables.",
        "rank": 0
    },
    "wp_sidebar_description": {
        "since": "2.9.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_sidebar_description",
        "summary": "Retrieve description for a sidebar.",
        "description": "<p>When registering sidebars a 'description' parameter can be included that describes the sidebar for display on the widget administration panel.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "sidebar ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Sidebar description, if available.",
        "rank": 0
    },
    "wp_signon": {
        "since": "2.5.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_signon",
        "summary": "Authenticates and logs a user in with 'remember' capability.",
        "description": "<p>The credentials is an array that has 'user_login', 'user_password', and 'remember' indices. If the credentials is not given, then the log in form will be assumed and used if set.<\/p> <p>The various authentication cookies will be set by this function and will be set for a longer period depending on if the 'remember' credential is set to true.<\/p> <p>Note: wp_signon() doesn't handle setting the current user. This means that if the function is called before the {@see 'init'} hook is fired, is_user_logged_in() will evaluate as false until that point. If is_user_logged_in() is needed in conjunction with wp_signon(), wp_set_current_user() should be called explicitly.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "credentials": {
                "label": "credentials",
                "description": "User info in order to sign on.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "secure_cookie": {
                "label": "secure_cookie",
                "description": "Whether to use secure cookie.",
                "type": "string",
                "types": [
                    "string",
                    "bool"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_User",
            "WP_Error"
        ],
        "return_description": "WP_User on success, WP_Error on failure.",
        "rank": 0
    },
    "wp_site_admin_email_change_notification": {
        "since": "4.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_site_admin_email_change_notification",
        "summary": "Send an email to the old site admin email address when the site admin email address changes.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "old_email": {
                "label": "old_email",
                "description": "The old site admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "new_email": {
                "label": "new_email",
                "description": "The new site admin email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "option_name": {
                "label": "option_name",
                "description": "The relevant database option name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_slash": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_slash",
        "summary": "Add slashes to a string or array of strings.",
        "description": "<p>This should be used when preparing data for core API that expects slashed data. This should not be used to escape data going directly into an SQL query.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "String or array of strings to slash.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Slashed $value",
        "rank": 0
    },
    "wp_spaces_regexp": {
        "since": "4.0.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_spaces_regexp",
        "summary": "Returns the regexp for common whitespace characters.",
        "description": "<p>By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp. This is designed to replace the PCRE \\s sequence. In ticket #22692, that sequence was found to be unreliable due to random inclusion of the A0 byte.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The spaces regexp.",
        "rank": 0
    },
    "wp_spam_comment": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_spam_comment",
        "summary": "Marks a comment as Spam",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_specialchars_decode": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_specialchars_decode",
        "summary": "Converts a number of HTML entities into their special characters.",
        "description": "<p>Specifically deals with: &amp;, &lt;, &gt;, &quot;, and '.<\/p> <p>$quote_style can be set to ENT_COMPAT to decode &quot; entities, or ENT_QUOTES to do both &quot; and '. Default is ENT_NOQUOTES where no quotes are decoded.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "The text which is to be decoded.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "quote_style": {
                "label": "quote_style",
                "description": "Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "ENT_NOQUOTES",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The decoded text without HTML entities.",
        "rank": 0
    },
    "wp_sprintf": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_sprintf",
        "summary": "WordPress implementation of PHP sprintf() with filters.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pattern": {
                "label": "pattern",
                "description": "The string which formatted args are inserted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": ",... Arguments to be formatted into the $pattern string.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The formatted string.",
        "rank": 0
    },
    "wp_sprintf_l": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_sprintf_l",
        "summary": "Localize list items before the rest of the content.",
        "description": "<p>The '%l' must be at the first characters can then contain the rest of the content. The list items will have ', ', ', and', and ' and ' added depending on the amount of list items in the $args parameter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pattern": {
                "label": "pattern",
                "description": "Content containing '%l' at the beginning.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "List items to prepend to the content and replace '%l'.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Localized list items and rest of the content.",
        "rank": 0
    },
    "wp_star_rating": {
        "since": "3.8.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_star_rating",
        "summary": "Output a HTML element with a star rating for a given rating.",
        "description": "<p>Outputs a HTML element with the star rating exposed on a 0..5 scale in half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the number of ratings may also be displayed by passing the $number parameter.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array of star ratings arguments. <ul><li><b>'rating'<\/b><br\/><i>(int|float)<\/i> The rating to display, expressed in either a 0.5 rating increment, or percentage. Default 0.<\/li> <li><b>'type'<\/b><br\/><i>(string)<\/i> Format that the $rating is in. Valid values are 'rating' (default), or, 'percent'. Default 'rating'.<\/li> <li><b>'number'<\/b><br\/><i>(int)<\/i> The number of ratings that makes up this rating. Default 0.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo the generated markup. False to return the markup instead of echoing it. Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Star rating HTML.",
        "rank": 0
    },
    "wp_staticize_emoji": {
        "since": "4.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_staticize_emoji",
        "summary": "Convert emoji to a static img element.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The content to encode.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The encoded content.",
        "rank": 0
    },
    "wp_staticize_emoji_for_email": {
        "since": "4.2.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_staticize_emoji_for_email",
        "summary": "Convert emoji in emails into static images.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "mail": {
                "label": "mail",
                "description": "The email data array.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The email data array, with emoji in the message staticized.",
        "rank": 0
    },
    "wp_stream_image": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_stream_image",
        "summary": "Streams image in WP_Image_Editor to browser.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "image": {
                "label": "image",
                "description": "The image editor instance.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "mime_type": {
                "label": "mime_type",
                "description": "The mime type of the image.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "The image's attachment post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_strip_all_tags": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_strip_all_tags",
        "summary": "Properly strip all HTML tags including script and style",
        "description": "<p>This differs from strip_tags() because it removes the contents of the &lt;script&gt; and &lt;style&gt; tags. E.g. strip_tags( '&lt;script&gt;something&lt;\/script&gt;' ) will return 'something'. wp_strip_all_tags will return ''<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "string": {
                "label": "string",
                "description": "String containing HTML tags",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "remove_breaks": {
                "label": "remove_breaks",
                "description": "Whether to remove left over line breaks and white space chars",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The processed string.",
        "rank": 0
    },
    "wp_style_add_data": {
        "since": "3.6.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_style_add_data",
        "summary": "Add metadata to a CSS stylesheet.",
        "description": "<p>Works only if the stylesheet has already been added.<\/p> <p>Possible values for $key and $value: 'conditional' string Comments for IE 6, lte IE 7 etc. 'rtl' bool|string To declare an RTL stylesheet. 'suffix' string Optional suffix, used in combination with RTL. 'alt' bool For rel=&quot;alternate stylesheet&quot;. 'title' string For preferred\/alternate stylesheets.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "Name of data point for which we're storing a value. Accepts 'conditional', 'rtl' and 'suffix', 'alt' and 'title'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "String containing the CSS data to be added.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_style_is": {
        "since": "2.8.0",
        "group": "Dependencies",
        "type": "efct",
        "name": "wp_style_is",
        "summary": "Check whether a CSS stylesheet has been added to the queue.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "handle": {
                "label": "handle",
                "description": "Name of the stylesheet.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "list": {
                "label": "list",
                "description": "Status of the stylesheet to check. Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'enqueued'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether style is queued.",
        "rank": 0
    },
    "wp_style_loader_src": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_style_loader_src",
        "summary": "Administration Screen CSS for changing the styles.",
        "description": "<p>If installing the 'wp-admin\/' directory will be replaced with '.\/'.<\/p> <p>The $_wp_admin_css_colors global manages the Administration Screens CSS stylesheet that is loaded. The option that is set is 'admin_color' and is the color and key for the array. The value for the color key is an object with a 'url' parameter that has the URL path to the CSS file.<\/p> <p>The query from $src parameter will be appended to the URL that is given from the $_wp_admin_css_colors array value URL.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "src": {
                "label": "src",
                "description": "Source URL.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "handle": {
                "label": "handle",
                "description": "Either 'colors' or 'colors-rtl'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "false"
        ],
        "return_description": "URL path to CSS stylesheet for Administration Screens.",
        "rank": 0
    },
    "wp_styles": {
        "since": "4.2.0",
        "group": "Dependencies",
        "type": "fct",
        "name": "wp_styles",
        "summary": "Initialize $wp_styles if it has not been set.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "WP_Styles",
                "label": "WP_Styles"
            }
        },
        "return": [
            "WP_Styles"
        ],
        "return_description": "WP_Styles instance.",
        "rank": 0
    },
    "wp_suspend_cache_addition": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_suspend_cache_addition",
        "summary": "Temporarily suspend cache additions.",
        "description": "<p>Stops more data being added to the cache, but still allows cache retrieval. This is useful for actions, such as imports, when a lot of data would otherwise be almost uselessly added to the cache.<\/p> <p>Suspension lasts for a single page load at most. Remember to call this function again if you wish to re-enable cache adds earlier.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "suspend": {
                "label": "suspend",
                "description": "Suspends additions if true, re-enables them if false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "The current suspend setting",
        "rank": 0
    },
    "wp_suspend_cache_invalidation": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_suspend_cache_invalidation",
        "summary": "Suspend cache invalidation.",
        "description": "<p>Turns cache invalidation on and off. Useful during imports where you don't want to do invalidations every time a post is inserted. Callers must be sure that what they are doing won't lead to an inconsistent cache when invalidation is suspended.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "suspend": {
                "label": "suspend",
                "description": "Whether to suspend or enable cache invalidation.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "The current suspend setting.",
        "rank": 0
    },
    "wp_switch_roles_and_user": {
        "since": "4.9.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_switch_roles_and_user",
        "summary": "Switches the initialized roles and current user capabilities to another site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_site_id": {
                "label": "new_site_id",
                "description": "New site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "old_site_id": {
                "label": "old_site_id",
                "description": "Old site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_tag_cloud": {
        "since": "2.3.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_tag_cloud",
        "summary": "Displays a tag cloud.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for displaying a tag cloud. See wp_generate_tag_cloud() and get_terms() for the full lists of arguments that can be passed in $args. <ul><li><b>'number'<\/b><br\/><i>(int)<\/i> The number of tags to display. Accepts any positive integer or zero to return all. Default 0 (all tags).<\/li> <li><b>'link'<\/b><br\/><i>(string)<\/i> Whether to display term editing links or term permalinks. Accepts 'edit' and 'view'. Default 'view'.<\/li> <li><b>'post_type'<\/b><br\/><i>(string)<\/i> The post type. Used to highlight the proper post type menu on the linked edit page. Defaults to the first post type associated with the taxonomy.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether or not to echo the return value. Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "void",
            "array"
        ],
        "return_description": "Generated tag cloud, only if no failures and 'array' is set for the 'format' argument.                    Otherwise, this function outputs the tag cloud.",
        "rank": 0
    },
    "wp_targeted_link_rel": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "wp_targeted_link_rel",
        "summary": "Adds rel noreferrer and noopener to all HTML A elements that have a target.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Content that may contain HTML A elements.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Converted content.",
        "rank": 0
    },
    "wp_targeted_link_rel_callback": {
        "since": false,
        "group": "WordPress",
        "type": "efct",
        "name": "wp_targeted_link_rel_callback",
        "summary": "Callback to add rel=\"noreferrer noopener\" string to HTML A element.",
        "description": "<p>Will not duplicate existing noreferrer and noopener values to prevent from invalidating the HTML.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "matches": {
                "label": "matches",
                "description": "Single Match",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "HTML A Element with rel noreferrer noopener in addition to any existing values",
        "rank": 0
    },
    "wp_tempnam": {
        "since": "2.6.0",
        "group": "Filesystem",
        "type": "efct",
        "name": "wp_tempnam",
        "summary": "Returns a filename of a Temporary unique file.",
        "description": "<p>Please note that the calling function must unlink() this itself.<\/p> <p>The filename is based off the passed parameter or defaults to the current unix timestamp, while the directory can either be passed as well, or by leaving it blank, default to a writable temporary directory.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "filename": {
                "label": "filename",
                "description": "Filename to base the Unique file off.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "dir": {
                "label": "dir",
                "description": "Directory to store the file in.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "a writable filename",
        "rank": 0
    },
    "wp_term_is_shared": {
        "since": "4.4.0",
        "group": "Taxonomy",
        "type": "fct",
        "name": "wp_term_is_shared",
        "summary": "Determine whether a term is shared between multiple taxonomies.",
        "description": "<p>Shared taxonomy terms began to be split in 4.3, but failed cron tasks or other delays in upgrade routines may cause shared terms to remain.<\/p>",
        "inputs": {
            "term_id": {
                "label": "term_id",
                "description": "Term ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Returns false if a term is not shared between multiple taxonomies or              if splittng shared taxonomy terms is finished.",
        "rank": 0
    },
    "wp_terms_checklist": {
        "since": "3.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_terms_checklist",
        "summary": "Output an unordered list of checkbox input elements labelled with term names.",
        "description": "<p>Taxonomy-independent version of wp_category_checklist().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default 0.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Array or string of arguments for generating a terms checklist. <ul><li><b>'descendants_and_self'<\/b><br\/><i>(int)<\/i> ID of the category to output along with its descendants. Default 0.<\/li> <li><b>'selected_cats'<\/b><br\/><i>(int[])<\/i> Array of category IDs to mark as checked. Default false.<\/li> <li><b>'popular_cats'<\/b><br\/><i>(int[])<\/i> Array of category IDs to receive the &quot;popular-category&quot; class. Default false.<\/li> <li><b>'walker'<\/b><br\/><i>(object)<\/i> Walker object to use to build the output. Default is a Walker_Category_Checklist instance.<\/li> <li><b>'taxonomy'<\/b><br\/><i>(string)<\/i> Taxonomy to generate the checklist for. Default 'category'.<\/li> <li><b>'checked_ontop'<\/b><br\/><i>(bool)<\/i> Whether to move checked items out of the hierarchy and to the top of the list. Default true.<\/li> <li><b>'echo'<\/b><br\/><i>(bool)<\/i> Whether to echo the generated markup. False to return the markup instead of echoing it. Default true.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_text_diff": {
        "since": "2.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_text_diff",
        "summary": "Displays a human readable HTML representation of the difference between two strings.",
        "description": "<p>The Diff is available for getting the changes between versions. The output is HTML, so the primary use is for displaying the changes. If the two strings are equivalent, then an empty string will be returned.<\/p> <p>The arguments supported and can be changed are listed below.<\/p> <p>'title' : Default is an empty string. Titles the diff in a manner compatible with the output. 'title_left' : Default is an empty string. Change the HTML to the left of the title. 'title_right' : Default is an empty string. Change the HTML to the right of the title.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "left_string": {
                "label": "left_string",
                "description": "&quot;old&quot; (left) version of string",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "right_string": {
                "label": "right_string",
                "description": "&quot;new&quot; (right) version of string",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Change 'title', 'title_left', and 'title_right' defaults.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Empty string if strings are equivalent or HTML with differences.",
        "rank": 0
    },
    "wp_theme_update_row": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "wp_theme_update_row",
        "summary": "Displays update information for a theme.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "theme_key": {
                "label": "theme_key",
                "description": "Theme stylesheet.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "theme": {
                "label": "theme",
                "description": "Theme object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_throttle_comment_flood": {
        "since": "2.1.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_throttle_comment_flood",
        "summary": "Whether a comment should be blocked because of comment flood.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "block": {
                "label": "block",
                "description": "Whether plugin has already blocked comment.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "time_lastcomment": {
                "label": "time_lastcomment",
                "description": "Timestamp for last comment.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "time_newcomment": {
                "label": "time_newcomment",
                "description": "Timestamp for new comment.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether comment should be blocked.",
        "rank": 0
    },
    "wp_timezone_choice": {
        "since": "2.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_timezone_choice",
        "summary": "Gives a nicely-formatted list of timezone strings.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "selected_zone": {
                "label": "selected_zone",
                "description": "Selected timezone.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "locale": {
                "label": "locale",
                "description": "Locale to load the timezones in. Default current site locale.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_timezone_override_offset": {
        "since": "2.8.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_timezone_override_offset",
        "summary": "gmt_offset modification for smart timezone handling.",
        "description": "<p>Overrides the gmt_offset option if we have a timezone_string available.<\/p>",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "float",
            "false"
        ],
        "return_description": "Timezone GMT offset, false otherwise.",
        "rank": 0
    },
    "wp_title": {
        "since": "1.0.0",
        "group": "Template",
        "type": "efct",
        "name": "wp_title",
        "summary": "Display or retrieve page title for all areas of blog.",
        "description": "<p>By default, the page title will display the separator before the page title, so that the blog title will be before the page title. This is not good for title display, since the blog title shows up on most tabs and not what is important, which is the page that the user is looking at.<\/p> <p>There are also SEO benefits to having the blog title after or to the 'right' of the page title. However, it is mostly common sense to have the blog title to the right with most browsers supporting tabs. You can achieve this by using the seplocation parameter and setting the value to 'right'. This change was introduced around 2.5.0, in case backward compatibility of themes is important.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sep": {
                "label": "sep",
                "description": "default is '&raquo;'. How to separate the various items within the page title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'&raquo;'",
                "required": false
            },
            "display": {
                "label": "display",
                "description": "Whether to display or retrieve title.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "seplocation": {
                "label": "seplocation",
                "description": "Direction to display title, 'right'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "null"
        ],
        "return_description": "String on retrieve, null when displaying.",
        "rank": 0
    },
    "wp_title_rss": {
        "since": "2.2.0",
        "group": "Feed",
        "type": "efct",
        "name": "wp_title_rss",
        "summary": "Display the blog title for display of the feed title.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Unused.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "'&#8211;'",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_transition_comment_status": {
        "since": "2.7.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_transition_comment_status",
        "summary": "Call hooks for when a comment status transition occurs.",
        "description": "<p>Calls hooks for comment status transitions. If the new comment status is not the same as the previous comment status, then two hooks will be ran, the first is {@see 'transition_comment<em>status'} with new status, old status, and comment data. The next action called is {@see comment<\/em>$old_status<em>to<\/em>$new_status'}. It has the comment data.<\/p> <p>The final action will run whether or not the comment statuses are the same. The action is named {@see 'comment_$new<em>status<\/em>$comment-&gt;comment_type'}.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_status": {
                "label": "new_status",
                "description": "New comment status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "old_status": {
                "label": "old_status",
                "description": "Previous comment status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "comment": {
                "label": "comment",
                "description": "Comment data.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_transition_post_status": {
        "since": "2.3.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_transition_post_status",
        "summary": "Fires actions related to the transitioning of a post's status.",
        "description": "<p>When a post is saved, the post status is &quot;transitioned&quot; from one status to another, though this does not always mean the status has actually changed before and after the save. This function fires a number of action hooks related to that transition: the generic {@see 'transition_post_status'} action, as well as the dynamic hooks {@see '$old_status<em>to<\/em>$new_status'} and {@see '$new<em>status<\/em>$post-&gt;post_type'}. Note that the function does not transition the post object in the database.<\/p> <p>For instance: When publishing a post for the first time, the post status may transition from 'draft' \u2013 or some other status \u2013 to 'publish'. However, if a post is already published and is simply being updated, the &quot;old&quot; and &quot;new&quot; statuses may both be 'publish' before and after the transition.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "new_status": {
                "label": "new_status",
                "description": "Transition to this post status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "old_status": {
                "label": "old_status",
                "description": "Previous post status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post": {
                "label": "post",
                "description": "Post data.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_trash_comment": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_trash_comment",
        "summary": "Moves a comment to the Trash",
        "description": "<p>If trash is disabled, comment is permanently deleted.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_trash_post": {
        "since": "2.9.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_trash_post",
        "summary": "Move a post or page to the Trash",
        "description": "<p>If trash is disabled, the post or page is permanently deleted.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post if EMPTY_TRASH_DAYS equals true.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "false",
            "null"
        ],
        "return_description": "Post data on success, false or null on failure.",
        "rank": 0
    },
    "wp_trash_post_comments": {
        "since": "2.9.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_trash_post_comments",
        "summary": "Moves comments for a post to the trash.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "mixed",
            "void"
        ],
        "return_description": "False on failure.",
        "rank": 0
    },
    "wp_trim_excerpt": {
        "since": "1.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_trim_excerpt",
        "summary": "Generates an excerpt from the content, if needed.",
        "description": "<p>The excerpt word amount will be 55 words and if the amount is greater than that, then the string ' [&hellip;]' will be appended to the excerpt. If the string is less than 55 words, then the content will be returned as is.<\/p> <p>The 55 word limit can be modified by plugins\/themes using the {@see 'excerpt_length'} filter The ' [&hellip;]' string can be modified by plugins\/themes using the {@see 'excerpt_more'} filter<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The excerpt. If set to empty, an excerpt is generated.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The excerpt.",
        "rank": 0
    },
    "wp_trim_words": {
        "since": "3.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_trim_words",
        "summary": "Trims text to a certain number of words.",
        "description": "<p>This function is localized. For languages that count 'words' by the individual character (such as East Asian languages), the $num_words argument will apply to the number of individual characters.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "Text to trim.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "num_words": {
                "label": "num_words",
                "description": "Number of words.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "55",
                "required": false
            },
            "more": {
                "label": "more",
                "description": "What to append if $text needs to be trimmed. Default '&hellip;'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Trimmed text.",
        "rank": 0
    },
    "wp_uninitialize_site": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_uninitialize_site",
        "summary": "Runs the uninitialization routine for a given site.",
        "description": "<p>This process includes dropping the site's database tables and deleting its uploads directory.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID or object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "True on success, or error object on failure.",
        "rank": 0
    },
    "wp_unique_filename": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_unique_filename",
        "summary": "Get a filename that is sanitized and unique for the given directory.",
        "description": "<p>If the filename is not unique, then a number will be added to the filename before the extension, and will continue adding numbers until the filename is unique.<\/p> <p>The callback is passed three parameters, the first one is the directory, the second is the filename, and the third is the extension.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "dir": {
                "label": "dir",
                "description": "Directory.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "filename": {
                "label": "filename",
                "description": "File name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "unique_filename_callback": {
                "label": "unique_filename_callback",
                "description": "Callback.",
                "type": "callable",
                "types": [
                    "callable"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "New filename, if given wasn't unique.",
        "rank": 0
    },
    "wp_unique_id": {
        "since": "5.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_unique_id",
        "summary": "Get unique ID.",
        "description": "<p>This is a PHP implementation of Underscore's uniqueId method. A static variable contains an integer that is incremented with each call. This number is returned with the optional prefix. As such the returned value is not universally unique, but it is unique across the life of the PHP process.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "prefix": {
                "label": "prefix",
                "description": "Prefix for the returned ID.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Unique ID.",
        "rank": 0
    },
    "wp_unique_post_slug": {
        "since": "2.8.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_unique_post_slug",
        "summary": "Computes a unique slug for the post, when given the desired slug and some post details.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "slug": {
                "label": "slug",
                "description": "The desired slug (post_name).",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_ID": {
                "label": "post_ID",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "post_status": {
                "label": "post_status",
                "description": "No uniqueness checks are made if the post is still draft or pending.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_type": {
                "label": "post_type",
                "description": "Post type.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "post_parent": {
                "label": "post_parent",
                "description": "Post parent ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)",
        "rank": 0
    },
    "wp_unique_term_slug": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_unique_term_slug",
        "summary": "Will make slug unique, if it isn't already.",
        "description": "<p>The $slug has to be unique global to every taxonomy, meaning that one taxonomy term can't have a matching slug with another taxonomy term. Each slug has to be globally unique for every taxonomy.<\/p> <p>The way this works is that if the taxonomy that the term belongs to is hierarchical and has a parent, it will append that parent to the $slug.<\/p> <p>If that still doesn't return an unique slug, then it try to append a number until it finds a number that is truly unique.<\/p> <p>The only purpose for $term is for appending a parent, if one exists.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "slug": {
                "label": "slug",
                "description": "The string that will be tried for a unique slug.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "term": {
                "label": "term",
                "description": "The term object that the $slug will belong to.",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Will return a true unique slug.",
        "rank": 0
    },
    "wp_unregister_sidebar_widget": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_unregister_sidebar_widget",
        "summary": "Remove widget from sidebar.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_unregister_widget_control": {
        "since": "2.2.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_unregister_widget_control",
        "summary": "Remove control callback for widget.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_unschedule_event": {
        "since": "2.1.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_unschedule_event",
        "summary": "Unschedule a previously scheduled event.",
        "description": "<p>The $timestamp and $hook parameters are required so that the event can be identified.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "timestamp": {
                "label": "timestamp",
                "description": "Unix timestamp (UTC) of the event.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "hook": {
                "label": "hook",
                "description": "Action hook of the event.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array containing each separate argument to pass to the hook's callback function. Although not passed to a callback, these arguments are used to uniquely identify the event, so they should be the same as those used when originally scheduling the event.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if event successfully unscheduled. False for failure.",
        "rank": 0
    },
    "wp_unschedule_hook": {
        "since": "4.9.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_unschedule_hook",
        "summary": "Unschedules all events attached to the hook.",
        "description": "<p>Can be useful for plugins when deactivating to clean up the cron queue.<\/p> <p>Warning: This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE. For information about casting to booleans see the {@link https:\/\/php.net\/manual\/en\/language.types.boolean.php PHP documentation}. Use the === operator for testing the return value of this function.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "hook": {
                "label": "hook",
                "description": "Action hook, the execution of which will be unscheduled.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "int"
        ],
        "return_description": "On success an integer indicating number of events unscheduled (0 indicates no                  events were registered on the hook), false if unscheduling fails.",
        "rank": 0
    },
    "wp_unslash": {
        "since": "3.6.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_unslash",
        "summary": "Remove slashes from a string or array of strings.",
        "description": "<p>This should be used to remove slashes from data passed to core API that expects data to be unslashed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "value": {
                "label": "value",
                "description": "String or array of strings to unslash.",
                "type": "string",
                "types": [
                    "string",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "Unslashed $value",
        "rank": 0
    },
    "wp_unspam_comment": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_unspam_comment",
        "summary": "Removes a comment from the Spam",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_untrash_comment": {
        "since": "2.9.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_untrash_comment",
        "summary": "Removes a comment from the Trash",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "comment_id": {
                "label": "comment_id",
                "description": "Comment ID or WP_Comment object.",
                "type": "int",
                "types": [
                    "int",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on failure.",
        "rank": 0
    },
    "wp_untrash_post": {
        "since": "2.9.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_untrash_post",
        "summary": "Restore a post or page from the Trash.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID. Default is ID of the global $post.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "false",
            "null"
        ],
        "return_description": "Post data on success, false or null on failure.",
        "rank": 0
    },
    "wp_untrash_post_comments": {
        "since": "2.9.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_untrash_post_comments",
        "summary": "Restore comments for a post from the trash.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post": {
                "label": "post",
                "description": "Post ID or post object. Defaults to global $post.",
                "type": "int",
                "types": [
                    "int",
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "true",
            "void"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_update_attachment_metadata": {
        "since": "2.1.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_update_attachment_metadata",
        "summary": "Update metadata for an attachment.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attachment_id": {
                "label": "attachment_id",
                "description": "Attachment post ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "Attachment meta data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "False if $post is invalid.",
        "rank": 0
    },
    "wp_update_blog_public_option_on_site_update": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_update_blog_public_option_on_site_update",
        "summary": "Updates the `blog_public` option for a given site ID.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "public": {
                "label": "public",
                "description": "The value of the site status.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_category": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_update_category",
        "summary": "Aliases wp_insert_category() with minimal args.",
        "description": "<p>If you want to update only some fields of an existing category, call this function with only the new values set inside $catarr.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "catarr": {
                "label": "catarr",
                "description": "The 'cat_ID' value is required. All other keys are optional.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "bool"
        ],
        "return_description": "The ID number of the new or updated Category on success. Zero or FALSE on failure.",
        "rank": 0
    },
    "wp_update_comment": {
        "since": "2.0.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_update_comment",
        "summary": "Updates an existing comment in the database.",
        "description": "<p>Filters the comment and makes sure certain fields are valid before updating.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "commentarr": {
                "label": "commentarr",
                "description": "Contains information on the comment.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "int",
                "label": "int"
            }
        },
        "return": [
            "int"
        ],
        "return_description": "Comment was updated if value is 1, or was not updated if value is 0.",
        "rank": 0
    },
    "wp_update_comment_count": {
        "since": "2.1.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_update_comment_count",
        "summary": "Updates the comment count for post(s).",
        "description": "<p>When $do_deferred is false (is by default) and the comments have been set to be deferred, the post_id will be added to a queue, which will be updated at a later date and only updated once per post ID.<\/p> <p>If the comments have not be set up to be deferred, then the post will be updated. When $do_deferred is set to true, then all previous deferred post IDs will be updated along with the current $post_id.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": null,
                "required": true
            },
            "do_deferred": {
                "label": "do_deferred",
                "description": "Whether to process previously deferred post comment counts.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "void"
        ],
        "return_description": "True on success, false on failure or if post with ID does                   not exist.",
        "rank": 0
    },
    "wp_update_comment_count_now": {
        "since": "2.5.0",
        "group": "Comment",
        "type": "efct",
        "name": "wp_update_comment_count_now",
        "summary": "Updates the comment count for the post.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_id": {
                "label": "post_id",
                "description": "Post ID",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True on success, false on '0' $post_id or if post with ID does not exist.",
        "rank": 0
    },
    "wp_update_custom_css_post": {
        "since": "4.7.0",
        "group": "Theme",
        "type": "efct",
        "name": "wp_update_custom_css_post",
        "summary": "Update the `custom_css` post for a given theme.",
        "description": "<p>Inserts a custom_css post when one doesn't yet exist.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "css": {
                "label": "css",
                "description": "CSS, stored in post_content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Args. <ul><li><b>'preprocessed'<\/b><br\/><i>(string)<\/i> Pre-processed CSS, stored in post_content_filtered. Normally empty string. Optional.<\/li> <li><b>'stylesheet'<\/b><br\/><i>(string)<\/i> Stylesheet (child theme) to update. Optional, defaults to current theme\/stylesheet.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "WP_Post",
            "WP_Error"
        ],
        "return_description": "Post on success, error on failure.",
        "rank": 0
    },
    "wp_update_link": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_update_link",
        "summary": "Updates a link in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "linkdata": {
                "label": "linkdata",
                "description": "Link data to update.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Value 0 or WP_Error on failure. The updated link ID on success.",
        "rank": 0
    },
    "wp_update_nav_menu_item": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_update_nav_menu_item",
        "summary": "Save the properties of a menu item or create a new one.",
        "description": "<p>The menu-item-title, menu-item-description, and menu-item-attr-title are expected to be pre-slashed since they are passed directly into wp_insert_post().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_id": {
                "label": "menu_id",
                "description": "The ID of the menu. Required. If &quot;0&quot;, makes the menu item a draft orphan.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "menu_item_db_id": {
                "label": "menu_item_db_id",
                "description": "The ID of the menu item. If &quot;0&quot;, creates a new menu item.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "menu_item_data": {
                "label": "menu_item_data",
                "description": "The menu item's data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The menu item's database ID or WP_Error object on failure.",
        "rank": 0
    },
    "wp_update_nav_menu_object": {
        "since": "3.0.0",
        "group": "Nav_Menus",
        "type": "efct",
        "name": "wp_update_nav_menu_object",
        "summary": "Save the properties of a menu or create a new menu with those properties.",
        "description": "<p>Note that $menu_data is expected to be pre-slashed.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "menu_id": {
                "label": "menu_id",
                "description": "The ID of the menu or &quot;0&quot; to create a new menu.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "0",
                "required": true
            },
            "menu_data": {
                "label": "menu_data",
                "description": "The array of menu data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Menu ID on success, WP_Error object on failure.",
        "rank": 0
    },
    "wp_update_network_counts": {
        "since": "3.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_update_network_counts",
        "summary": "Update the network-wide counts for the current network.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_network_site_counts": {
        "since": "3.7.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_update_network_site_counts",
        "summary": "Update the network-wide site count.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_network_user_counts": {
        "since": "3.7.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_update_network_user_counts",
        "summary": "Update the network-wide user count.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "ID of the network. Default is the current network.",
                "type": "int",
                "types": [
                    "int",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_plugins": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_update_plugins",
        "summary": "Check plugin versions against the latest versions hosted on WordPress.org.",
        "description": "<p>The WordPress version, PHP version, and Locale is sent along with a list of all plugins installed. Checks against the WordPress server at api.wordpress.org. Will only check if WordPress isn't installing.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "extra_stats": {
                "label": "extra_stats",
                "description": "Extra statistics to report to the WordPress.org API.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_post": {
        "since": "1.0.0",
        "group": "Post",
        "type": "efct",
        "name": "wp_update_post",
        "summary": "Update a post with new post data.",
        "description": "<p>The date does not have to be set for drafts. You can set the date and it will not be overridden.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "postarr": {
                "label": "postarr",
                "description": "Post data. Arrays are expected to be escaped, objects are not. Default array.",
                "type": "array",
                "types": [
                    "array",
                    "object"
                ],
                "default": "array()",
                "required": false
            },
            "wp_error": {
                "label": "wp_error",
                "description": "Allow return of WP_Error on failure.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The value 0 or WP_Error on failure. The post ID on success.",
        "rank": 0
    },
    "wp_update_site": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_update_site",
        "summary": "Updates a site in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "site_id": {
                "label": "site_id",
                "description": "ID of the site that should be updated.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "Site data to update. See wp_insert_site() for the list of supported keys.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The updated site's ID on success, or error object on failure.",
        "rank": 0
    },
    "wp_update_term": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_update_term",
        "summary": "Update term based on arguments provided.",
        "description": "<p>The $args will indiscriminately override all values with the same field name. Care must be taken to not override important information need to update or update will fail (or perhaps create a new term, neither would be acceptable).<\/p> <p>Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not defined in $args already.<\/p> <p>'alias_of' will create a term group, if it doesn't already exist, and update it for the $term.<\/p> <p>If the 'slug' argument in $args is missing, then the 'name' in $args will be used. It should also be noted that if you set 'slug' and it isn't unique then a WP_Error will be passed back. If you don't pass any slug, then a unique one will be created for you.<\/p> <p>For what can be overrode in $args, check the term scheme can contain and stay away from the term keys.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term_id": {
                "label": "term_id",
                "description": "The ID of the term",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The context in which to relate the term to the object.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Array of get_terms() arguments.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "Returns Term ID and Taxonomy Term ID",
        "rank": 0
    },
    "wp_update_term_count": {
        "since": "2.3.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_update_term_count",
        "summary": "Updates the amount of terms in taxonomy.",
        "description": "<p>If there is a taxonomy callback applied, then it will be called for updating the count.<\/p> <p>The default action is to count what the amount of terms have the relationship of term ID. Once that is done, then update the database.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "The term_taxonomy_id of the terms.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The context of the term.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "do_deferred": {
                "label": "do_deferred",
                "description": "Whether to flush the deferred term counts too.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "If no terms will return false, and if successful will return true.",
        "rank": 0
    },
    "wp_update_term_count_now": {
        "since": "2.5.0",
        "group": "Taxonomy",
        "type": "efct",
        "name": "wp_update_term_count_now",
        "summary": "Perform term count update immediately.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "terms": {
                "label": "terms",
                "description": "The term_taxonomy_id of terms to update.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "taxonomy": {
                "label": "taxonomy",
                "description": "The context of the term.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "true",
                "label": "true"
            }
        },
        "return": [
            "true"
        ],
        "return_description": "Always true when complete.",
        "rank": 0
    },
    "wp_update_themes": {
        "since": "2.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_update_themes",
        "summary": "Check theme versions against the latest versions hosted on WordPress.org.",
        "description": "<p>A list of all themes installed in sent to WP. Checks against the WordPress server at api.wordpress.org. Will only check if WordPress isn't installing.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "extra_stats": {
                "label": "extra_stats",
                "description": "Extra statistics to report to the WordPress.org API.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_update_user": {
        "since": "2.0.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_update_user",
        "summary": "Update a user in the database.",
        "description": "<p>It is possible to update a user's password by specifying the 'user_pass' value in the $userdata parameter array.<\/p> <p>If current user's password is being updated, then the cookies will be cleared.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "userdata": {
                "label": "userdata",
                "description": "An array of user data or a user object of type stdClass or WP_User.",
                "type": "array",
                "types": [
                    "array",
                    "object",
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "The updated user's ID or a WP_Error object if the user could not be updated.",
        "rank": 0
    },
    "wp_upload_bits": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_upload_bits",
        "summary": "Create a file in the upload folder with given content.",
        "description": "<p>If there is an error, then the key 'error' will exist with the error message. If success, then the key 'file' will have the unique file path, the 'url' key will have the link to the new file. and the 'error' key will be set to false.<\/p> <p>This function will not move an uploaded file to the upload folder. It will create a new file with the content in $bits parameter. If you move the upload file, read the content of the uploaded file, and then you can give the filename and content to this function, which will add it to the upload folder.<\/p> <p>The permissions will be set on the new file automatically by this function.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "name": {
                "label": "name",
                "description": "Filename.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Never used. Set to null.",
                "type": "null",
                "types": [
                    "null",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "bits": {
                "label": "bits",
                "description": "File content",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "time": {
                "label": "time",
                "description": "Time formatted in 'yyyy\/mm'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_upload_dir": {
        "since": "2.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_upload_dir",
        "summary": "Get an array containing the current upload directory's path and url.",
        "description": "<p>Checks the 'upload_path' option, which should be from the web root folder, and if it isn't empty it will be used. If it is empty, then the path will be 'WP_CONTENT_DIR\/uploads'. If the 'UPLOADS' constant is defined, then it will override the 'upload_path' option and 'WP_CONTENT_DIR\/uploads' path.<\/p> <p>The upload URL path is set either by the 'upload_url_path' option or by using the 'WP_CONTENT_URL' constant and appending '\/uploads' to the path.<\/p> <p>If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in the administration settings panel), then the time will be used. The format will be year first and then month.<\/p> <p>If the path couldn't be created, then an error will be returned with the key 'error' containing the error message. The error suggests that the parent directory is not writable by the server.<\/p> <p>On success, the returned array will have many indices: 'path' - base directory and sub directory or full path to upload directory. 'url' - base url and sub directory or absolute URL to upload directory. 'subdir' - sub directory if uploads use year\/month folders option is on. 'basedir' - path without subdir. 'baseurl' - URL path without subdir. 'error' - false or error message.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "time": {
                "label": "time",
                "description": "Time formatted in 'yyyy\/mm'.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "null",
                "required": false
            },
            "create_dir": {
                "label": "create_dir",
                "description": "Whether to check and create the uploads directory. Default true for backward compatibility.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            },
            "refresh_cache": {
                "label": "refresh_cache",
                "description": "Whether to refresh the cache.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "See above for description.",
        "rank": 0
    },
    "wp_user_personal_data_exporter": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_user_personal_data_exporter",
        "summary": "Finds and exports personal data associated with an email address from the user and user_meta table.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "email_address": {
                "label": "email_address",
                "description": "The users email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "An array of personal data.",
        "rank": 0
    },
    "wp_user_request_action_description": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_user_request_action_description",
        "summary": "Get action description from the name and return a string.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "action_name": {
                "label": "action_name",
                "description": "Action name of the request.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Human readable action name.",
        "rank": 0
    },
    "wp_using_ext_object_cache": {
        "since": "3.7.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_using_ext_object_cache",
        "summary": "Toggle `$_wp_using_ext_object_cache` on and off without directly touching global.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "using": {
                "label": "using",
                "description": "Whether external object cache is being used.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "The current 'using' setting.",
        "rank": 0
    },
    "wp_using_themes": {
        "since": "5.1.0",
        "group": "WordPress",
        "type": "fct",
        "name": "wp_using_themes",
        "summary": "Determines whether the current request should use themes.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if themes should be used, false otherwise.",
        "rank": 0
    },
    "wp_validate_auth_cookie": {
        "since": "2.5.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_validate_auth_cookie",
        "summary": "Validates authentication cookie.",
        "description": "<p>The checks include making sure that the authentication cookie is set and pulling in the contents (if $cookie is not used).<\/p> <p>Makes sure the cookie is not expired. Verifies the hash in cookie is what is should be and compares the two.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "cookie": {
                "label": "cookie",
                "description": "If used, will validate contents instead of cookie's",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "scheme": {
                "label": "scheme",
                "description": "The cookie scheme to use: auth, secure_auth, or logged_in",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if invalid cookie, User ID if valid.",
        "rank": 0
    },
    "wp_validate_boolean": {
        "since": "4.0.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_validate_boolean",
        "summary": "Filter\/validate a variable as a boolean.",
        "description": "<p>Alternative to filter_var( $var, FILTER_VALIDATE_BOOLEAN ).<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "var": {
                "label": "var",
                "description": "Boolean value to validate.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "Whether the value is validated.",
        "rank": 0
    },
    "wp_validate_logged_in_cookie": {
        "since": "3.9.0",
        "group": "Users",
        "type": "efct",
        "name": "wp_validate_logged_in_cookie",
        "summary": "Validates the logged-in cookie.",
        "description": "<p>Checks the logged-in cookie if the previous auth cookie could not be validated and parsed.<\/p> <p>This is a callback for the {@see 'determine_current_user'} filter, rather than API.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "The user ID (or false) as received from the determine_current_user filter.",
                "type": "int",
                "types": [
                    "int",
                    "bool"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "User ID if validated, false otherwise. If a user ID from                   an earlier filter callback is received, that value is returned.",
        "rank": 0
    },
    "wp_validate_redirect": {
        "since": "2.8.1",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_validate_redirect",
        "summary": "Validates a URL for use in a redirect.",
        "description": "<p>Checks whether the $location is using an allowed host, if it has an absolute path. A plugin can therefore set or remove allowed host(s) to or from the list.<\/p> <p>If the host is not allowed, then the redirect is to $default supplied<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "location": {
                "label": "location",
                "description": "The redirect to validate",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "default": {
                "label": "default",
                "description": "The value to return if $location is not allowed",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "redirect-sanitized URL",
        "rank": 0
    },
    "wp_validate_site_data": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wp_validate_site_data",
        "summary": "Validates data for a site prior to inserting or updating in the database.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "errors": {
                "label": "errors",
                "description": "Error object, passed by reference. Will contain validation errors if any occurred.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            },
            "data": {
                "label": "data",
                "description": "Associative array of complete site data. See wp_insert_site() for the included data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "old_site": {
                "label": "old_site",
                "description": "The old site object if the data belongs to a site being updated, or null if it is a new site being inserted.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "null"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_validate_user_request_key": {
        "since": "4.9.6",
        "group": "Users",
        "type": "efct",
        "name": "wp_validate_user_request_key",
        "summary": "Validate a user request by comparing the key with the request's key.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "request_id": {
                "label": "request_id",
                "description": "ID of the request being confirmed.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "Provided key to validate.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "bool",
            "WP_Error"
        ],
        "return_description": "WP_Error on failure, true on success.",
        "rank": 0
    },
    "wp_verify_nonce": {
        "since": "2.0.3",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_verify_nonce",
        "summary": "Verify that correct nonce was used with time limit.",
        "description": "<p>The user is given an amount of time to use the token, so therefore, since the UID and $action remain the same, the independent variable is the time.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "nonce": {
                "label": "nonce",
                "description": "Nonce that was used in the form to verify",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "action": {
                "label": "action",
                "description": "Should give context to what is taking place and be the same when nonce was created.",
                "type": "string",
                "types": [
                    "string",
                    "int"
                ],
                "default": "-1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "false",
            "int"
        ],
        "return_description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
        "rank": 0
    },
    "wp_version_check": {
        "since": "2.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wp_version_check",
        "summary": "Check WordPress version against the newest version.",
        "description": "<p>The WordPress version, PHP version, and Locale is sent. Checks against the WordPress server at api.wordpress.org server. Will only check if WordPress isn't installing.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "extra_stats": {
                "label": "extra_stats",
                "description": "Extra statistics to report to the WordPress.org API.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "force_check": {
                "label": "force_check",
                "description": "Whether to bypass the transient cache and force a fresh update check. Defaults to false, true if $extra_stats is set.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_video_shortcode": {
        "since": "3.6.0",
        "group": "Media",
        "type": "efct",
        "name": "wp_video_shortcode",
        "summary": "Builds the Video shortcode output.",
        "description": "<p>This implements the functionality of the Video Shortcode for displaying WordPress mp4s in a post.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "attr": {
                "label": "attr",
                "description": "Attributes of the shortcode. <ul><li><b>'src'<\/b><br\/><i>(string)<\/i> URL to the source of the video file. Default empty.<\/li> <li><b>'height'<\/b><br\/><i>(int)<\/i> Height of the video embed in pixels. Default 360.<\/li> <li><b>'width'<\/b><br\/><i>(int)<\/i> Width of the video embed in pixels. Default $content_width or 640.<\/li> <li><b>'poster'<\/b><br\/><i>(string)<\/i> The 'poster' attribute for the &lt;video&gt; element. Default empty.<\/li> <li><b>'loop'<\/b><br\/><i>(string)<\/i> The 'loop' attribute for the &lt;video&gt; element. Default empty.<\/li> <li><b>'autoplay'<\/b><br\/><i>(string)<\/i> The 'autoplay' attribute for the &lt;video&gt; element. Default empty.<\/li> <li><b>'preload'<\/b><br\/><i>(string)<\/i> The 'preload' attribute for the &lt;video&gt; element. Default 'metadata'.<\/li> <li><b>'class'<\/b><br\/><i>(string)<\/i> The 'class' attribute for the &lt;video&gt; element. Default 'wp-video-shortcode'.<\/li> <\/li><\/ul>",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "content": {
                "label": "content",
                "description": "Shortcode content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "HTML content to display video.",
        "rank": 0
    },
    "wp_widget_control": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "efct",
        "name": "wp_widget_control",
        "summary": "Meta widget used to display the control form for a widget.",
        "description": "<p>Called from dynamic_sidebar().<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "sidebar_args": {
                "label": "sidebar_args",
                "description": "",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_widget_description": {
        "since": "2.5.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_widget_description",
        "summary": "Retrieve description for widget.",
        "description": "<p>When registering widgets, the options can also include 'description' that describes the widget for display on the widget administration panel or in the theme.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "Widget ID.",
                "type": "int",
                "types": [
                    "int",
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "void"
        ],
        "return_description": "Widget description, if available.",
        "rank": 0
    },
    "wp_widget_rss_form": {
        "since": "2.5.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_widget_rss_form",
        "summary": "Display RSS widget options form.",
        "description": "<p>The options for what fields are displayed for the RSS form are all booleans and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author', 'show_date'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "args": {
                "label": "args",
                "description": "Values for input fields.",
                "type": "array",
                "types": [
                    "array",
                    "string"
                ],
                "default": null,
                "required": true
            },
            "inputs": {
                "label": "inputs",
                "description": "Override default display options.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_widget_rss_output": {
        "since": "2.5.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_widget_rss_output",
        "summary": "Display the RSS entries in a list.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "rss": {
                "label": "rss",
                "description": "RSS url.",
                "type": "string",
                "types": [
                    "string",
                    "array",
                    "object"
                ],
                "default": null,
                "required": true
            },
            "args": {
                "label": "args",
                "description": "Widget arguments.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wp_widget_rss_process": {
        "since": "2.5.0",
        "group": "Widgets",
        "type": "efct",
        "name": "wp_widget_rss_process",
        "summary": "Process RSS feed widget data and optionally retrieve feed items.",
        "description": "<p>The feed widget can not have more than 20 items or it will reset back to the default, which is 10.<\/p> <p>The resulting array has the feed title, feed url, feed link (from channel), feed items, error (if any), and whether to show summary, author, and date. All respectively in the order of the array elements.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "widget_rss": {
                "label": "widget_rss",
                "description": "RSS widget feed data. Expects unescaped data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": null,
                "required": true
            },
            "check_feed": {
                "label": "check_feed",
                "description": "Whether to check feed for errors.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_widgets_access_body_class": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "wp_widgets_access_body_class",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "classes": {
                "label": "classes",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wp_write_post": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "fct",
        "name": "wp_write_post",
        "summary": "Creates a new post from the \"Write Post\" form using $_POST information.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "wpautop": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "wpautop",
        "summary": "Replaces double line-breaks with paragraph elements.",
        "description": "<p>A group of regex replaces used to identify text formatted with newlines and replace double line-breaks with HTML paragraph tags. The remaining line-breaks after conversion become &lt;<br\/>&gt; tags, unless $br is set to '0' or 'false'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "pee": {
                "label": "pee",
                "description": "The text which has to be formatted.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "br": {
                "label": "br",
                "description": "If set, this will convert all remaining line-breaks after paragraphing.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "true",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Text which has been converted into correct paragraph tags.",
        "rank": 0
    },
    "wpmu_activate_signup": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_activate_signup",
        "summary": "Activate a signup.",
        "description": "<p>Hook to {@see 'wpmu_activate_user'} or {@see 'wpmu_activate_blog'} for events that should happen only when users or sites are self-created (since those actions are not called when users and sites are created by a Super Admin).<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "key": {
                "label": "key",
                "description": "The activation key provided to the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "array",
            "WP_Error"
        ],
        "return_description": "An array containing information about the activated user and\/or blog",
        "rank": 0
    },
    "wpmu_create_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_create_blog",
        "summary": "Create a site.",
        "description": "<p>This function runs when a user self-registers a new site as well as when a Super Admin creates a new site. Hook to {@see 'wpmu_new_blog'} for events that should affect all new sites.<\/p> <p>On subdirectory installations, $domain is the same as the main site's domain, and the path is the subdirectory name (eg 'example.com' and '\/blog1\/'). On subdomain installations, $domain is the new subdomain + root domain (eg 'blog1.example.com'), and $path is '\/'.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The new site's domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The new site's path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "The new site's title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "The user ID of the new site's admin.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "options": {
                "label": "options",
                "description": "Array of key=&gt;value pairs used to set initial site options. If valid status keys are included ('public', 'archived', 'mature', 'spam', 'deleted', or 'lang_id') the given site status(es) will be updated. Otherwise, keys and values will be used to set options for the new site.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            },
            "network_id": {
                "label": "network_id",
                "description": "Network ID. Only relevant on multi-network installations.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": "1",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "WP_Error"
        ],
        "return_description": "Returns WP_Error object on failure, the new site ID on success.",
        "rank": 0
    },
    "wpmu_create_user": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_create_user",
        "summary": "Create a user.",
        "description": "<p>This function runs when a user self-registers as well as when a Super Admin creates a new user. Hook to {@see 'wpmu_new_user'} for events that should affect all new users, but only on Multisite (otherwise use {@see'user_register'}).<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The new user's login name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "The new user's password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "email": {
                "label": "email",
                "description": "The new user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "false"
        ],
        "return_description": "Returns false on failure, or int $user_id on success",
        "rank": 0
    },
    "wpmu_delete_blog": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_delete_blog",
        "summary": "Delete a site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "Site ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "drop": {
                "label": "drop",
                "description": "True if site's database tables should be dropped. Default is false.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wpmu_delete_user": {
        "since": "3.0.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_delete_user",
        "summary": "Delete a user from the network and remove from all sites.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "id": {
                "label": "id",
                "description": "The user ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "True if the user was deleted, otherwise false.",
        "rank": 0
    },
    "wpmu_log_new_registrations": {
        "since": "5.1.0",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_log_new_registrations",
        "summary": "Logs the user email, IP, and registration date of a new site.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "The new site's object or ID.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "int"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID, or array of arguments including 'user_id'.",
                "type": "int",
                "types": [
                    "int",
                    "array"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wpmu_signup_blog": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_signup_blog",
        "summary": "Record site signup information for future activation.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The requested domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The requested path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "The requested site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user": {
                "label": "user",
                "description": "The user's requested login name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wpmu_signup_blog_notification": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_signup_blog_notification",
        "summary": "Send a confirmation request email to a user when they sign up for a new site. The new site will not become active until the confirmation link is clicked.",
        "description": "<p>This is the notification function used when site registration is enabled.<\/p> <p>Filter {@see 'wpmu_signup_blog_notification'} to bypass this function or replace it with your own notification behavior.<\/p> <p>Filter {@see 'wpmu_signup_blog_notification_email'} and {@see 'wpmu_signup_blog_notification_subject'} to change the content and subject line of the email sent to newly registered users.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "domain": {
                "label": "domain",
                "description": "The new blog domain.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "path": {
                "label": "path",
                "description": "The new blog path.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "The site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_login": {
                "label": "user_login",
                "description": "The user's login name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The activation key created in wpmu_signup_blog()",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wpmu_signup_user": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_signup_user",
        "summary": "Record user signup information for future activation.",
        "description": "<p>This function is used when user registration is open but new site registration is not.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user": {
                "label": "user",
                "description": "The user's requested login name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wpmu_signup_user_notification": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_signup_user_notification",
        "summary": "Send a confirmation request email to a user when they sign up for a new user account (without signing up for a site at the same time). The user account will not become active until the confirmation link is clicked.",
        "description": "<p>This is the notification function used when no new site has been requested.<\/p> <p>Filter {@see 'wpmu_signup_user_notification'} to bypass this function or replace it with your own notification behavior.<\/p> <p>Filter {@see 'wpmu_signup_user_notification_email'} and {@see 'wpmu_signup_user_notification_subject'} to change the content and subject line of the email sent to newly registered users.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_login": {
                "label": "user_login",
                "description": "The user's login name.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The user's email address.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "key": {
                "label": "key",
                "description": "The activation key created in wpmu_signup_user()",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wpmu_validate_blog_signup": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_validate_blog_signup",
        "summary": "Processes new site registrations.",
        "description": "<p>Checks the data provided by the user during blog signup. Verifies the validity and uniqueness of blog paths and domains.<\/p> <p>This function prevents the current user from registering a new site with a blogname equivalent to another user's login name. Passing the $user parameter to the function, where $user is the other user, is effectively an override of this limitation.<\/p> <p>Filter {@see 'wpmu_validate_blog_signup'} if you want to modify the way that WordPress validates new site signups.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blogname": {
                "label": "blogname",
                "description": "The blog name provided by the user. Must be unique.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "blog_title": {
                "label": "blog_title",
                "description": "The blog title provided by the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user": {
                "label": "user",
                "description": "The user object to check against the new site name.",
                "type": "mixed",
                "types": [
                    "mixed",
                    "string"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Contains the new site data and error messages.",
        "rank": 0
    },
    "wpmu_validate_user_signup": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_validate_user_signup",
        "summary": "Sanitize and validate data required for a user sign-up.",
        "description": "<p>Verifies the validity and uniqueness of user names and user email addresses, and checks email addresses against admin-provided domain whitelists and blacklists.<\/p> <p>The {@see 'wpmu_validate_user_signup'} hook provides an easy way to modify the sign-up process. The value $result, which is passed to the hook, contains both the user-provided info and the error messages created by the function. {@see 'wpmu_validate_user_signup'} allows you to process the data in any way you'd like, and unset the relevant errors if necessary.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_name": {
                "label": "user_name",
                "description": "The login name provided by the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "user_email": {
                "label": "user_email",
                "description": "The email provided by the user.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "Contains username, email, and error messages.",
        "rank": 0
    },
    "wpmu_welcome_notification": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_welcome_notification",
        "summary": "Notify a user that their blog activation has been successful.",
        "description": "<p>Filter {@see 'wpmu_welcome_notification'} to disable or bypass.<\/p> <p>Filter {@see 'update_welcome_email'} and {@see 'update_welcome_subject'} to modify the content and subject line of the notification email.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "blog_id": {
                "label": "blog_id",
                "description": "Blog ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "User password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "title": {
                "label": "title",
                "description": "Site title.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wpmu_welcome_user_notification": {
        "since": "MU (3.0.0)",
        "group": "Multisite",
        "type": "efct",
        "name": "wpmu_welcome_user_notification",
        "summary": "Notify a user that their account activation has been successful.",
        "description": "<p>Filter {@see 'wpmu_welcome_user_notification'} to disable or bypass.<\/p> <p>Filter {@see 'update_welcome_user_email'} and {@see 'update_welcome_user_subject'} to modify the content and subject line of the notification email.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "user_id": {
                "label": "user_id",
                "description": "User ID.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "password": {
                "label": "password",
                "description": "User password.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "meta": {
                "label": "meta",
                "description": "Signup meta data.",
                "type": "array",
                "types": [
                    "array"
                ],
                "default": "array()",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wptexturize": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "wptexturize",
        "summary": "Replaces common plain text characters into formatted entities",
        "description": "<p>As an example,<\/p> 'cause today's effort makes it worth tomorrow's \"holiday\" ... <p>Becomes:<\/p> &amp;#8217;cause today&amp;#8217;s effort makes it worth tomorrow&amp;#8217;s &amp;#8220;holiday&amp;#8221; &amp;#8230; <p>Code within certain html blocks are skipped.<\/p> <p>Do not use this function before the {@see 'init'} action hook; everything will break.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "text": {
                "label": "text",
                "description": "The text to be formatted",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "reset": {
                "label": "reset",
                "description": "Set to true for unit testing. Translated patterns will reset.",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": "false",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The string replaced with html entities",
        "rank": 0
    },
    "wptexturize_primes": {
        "since": "4.3.0",
        "group": "WordPress",
        "type": "efct",
        "name": "wptexturize_primes",
        "summary": "Implements a logic tree to determine whether or not \"7'.\" represents seven feet, then converts the special char into either a prime char or a closing quote char.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "haystack": {
                "label": "haystack",
                "description": "The plain text to be searched.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "needle": {
                "label": "needle",
                "description": "The character to search for such as ' or &quot;.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "prime": {
                "label": "prime",
                "description": "The prime char to use for replacement.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "open_quote": {
                "label": "open_quote",
                "description": "The opening quote char. Opening quote replacement must be accomplished already.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "close_quote": {
                "label": "close_quote",
                "description": "The closing quote char to use for replacement.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "The $haystack value after primes and quotes replacements.",
        "rank": 0
    },
    "wpview_media_sandbox_styles": {
        "since": "4.0.0",
        "group": "Media",
        "type": "fct",
        "name": "wpview_media_sandbox_styles",
        "summary": "Returns the URLs for CSS files used in an iframe-sandbox'd TinyMCE media view.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "array",
                "label": "array"
            }
        },
        "return": [
            "array"
        ],
        "return_description": "The relevant CSS file URLs.",
        "rank": 0
    },
    "write_post": {
        "since": "2.0.0",
        "group": "Administration",
        "type": "fct",
        "name": "write_post",
        "summary": "Calls wp_write_post() and handles the errors.",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "int",
            "null"
        ],
        "return_description": "",
        "rank": 0
    },
    "wxr_authors_list": {
        "since": "3.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_authors_list",
        "summary": "Output list of authors with posts",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "post_ids": {
                "label": "post_ids",
                "description": "Array of post IDs to filter the query by.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "null",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_cat_name": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_cat_name",
        "summary": "Output a cat_name XML tag from a given category object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "category": {
                "label": "category",
                "description": "Category Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_category_description": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_category_description",
        "summary": "Output a category_description XML tag from a given category object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "category": {
                "label": "category",
                "description": "Category Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_cdata": {
        "since": "2.1.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_cdata",
        "summary": "Wrap given string in XML CDATA tag.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "str": {
                "label": "str",
                "description": "String to wrap in XML CDATA tag.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "",
        "rank": 0
    },
    "wxr_filter_postmeta": {
        "since": false,
        "group": "Administration",
        "type": "efct",
        "name": "wxr_filter_postmeta",
        "summary": "",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "return_me": {
                "label": "return_me",
                "description": "",
                "type": "bool",
                "types": [
                    "bool"
                ],
                "default": null,
                "required": true
            },
            "meta_key": {
                "label": "meta_key",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "bool",
                "label": "bool"
            }
        },
        "return": [
            "bool"
        ],
        "return_description": "",
        "rank": 0
    },
    "wxr_site_url": {
        "since": "2.5.0",
        "group": "Administration",
        "type": "fct",
        "name": "wxr_site_url",
        "summary": "Return the URL of the site",
        "description": "",
        "inputs": {},
        "outputs": {
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Site URL.",
        "rank": 0
    },
    "wxr_tag_description": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_tag_description",
        "summary": "Output a tag_description XML tag from a given tag object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Tag Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_tag_name": {
        "since": "2.3.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_tag_name",
        "summary": "Output a tag_name XML tag from a given tag object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "tag": {
                "label": "tag",
                "description": "Tag Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_term_description": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_term_description",
        "summary": "Output a term_description XML tag from a given term object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_term_meta": {
        "since": "4.6.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_term_meta",
        "summary": "Output term meta XML tags for a given term object.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term object.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "wxr_term_name": {
        "since": "2.9.0",
        "group": "Administration",
        "type": "efct",
        "name": "wxr_term_name",
        "summary": "Output a term_name XML tag from a given term object",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "term": {
                "label": "term",
                "description": "Term Object",
                "type": "object",
                "types": [
                    "object"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "xfn_check": {
        "since": "1.0.1",
        "group": "WordPress",
        "type": "efct",
        "name": "xfn_check",
        "summary": "Display checked checkboxes attribute for xfn microformat options.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "class": {
                "label": "class",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            },
            "value": {
                "label": "value",
                "description": "",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": "''",
                "required": false
            },
            "deprecated": {
                "label": "deprecated",
                "description": "Never used.",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": "''",
                "required": false
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            }
        },
        "return": [],
        "return_description": "",
        "rank": 0
    },
    "xmlrpc_getpostcategory": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "xmlrpc_getpostcategory",
        "summary": "Retrieve the post category or categories from XMLRPC XML.",
        "description": "<p>If the category element is not found, then the default post category will be used. The return type then would be what $post_default_category. If the category is found, then it will always be an array.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "XMLRPC XML Request content",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "mixed",
                "label": "mixed"
            }
        },
        "return": [
            "string",
            "array"
        ],
        "return_description": "List of categories or category name.",
        "rank": 0
    },
    "xmlrpc_getposttitle": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "xmlrpc_getposttitle",
        "summary": "Retrieve post title from XMLRPC XML.",
        "description": "<p>If the title element is not part of the XML, then the default post title from the $post_default_title will be used instead.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "XMLRPC XML Request content",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Post title",
        "rank": 0
    },
    "xmlrpc_pingback_error": {
        "since": "3.5.1",
        "group": "Comment",
        "type": "efct",
        "name": "xmlrpc_pingback_error",
        "summary": "Default filter attached to xmlrpc_pingback_error.",
        "description": "<p>Returns a generic pingback error code unless the error code is 48, which reports that the pingback is already registered.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "ixr_error": {
                "label": "ixr_error",
                "description": "",
                "type": "mixed",
                "types": [
                    "mixed"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "IXR_Error",
                "label": "IXR_Error"
            }
        },
        "return": [
            "IXR_Error"
        ],
        "return_description": "",
        "rank": 0
    },
    "xmlrpc_removepostdata": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "xmlrpc_removepostdata",
        "summary": "XMLRPC XML content without title and category elements.",
        "description": "",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "content": {
                "label": "content",
                "description": "XML-RPC XML Request content.",
                "type": "string",
                "types": [
                    "string"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "XMLRPC XML Request content without title and category elements.",
        "rank": 0
    },
    "zeroise": {
        "since": "0.71",
        "group": "WordPress",
        "type": "efct",
        "name": "zeroise",
        "summary": "Add leading zeros when necessary.",
        "description": "<p>If you set the threshold to '4' and the number is '10', then you will get back '0010'. If you set the threshold to '4' and the number is '5000', then you will get back '5000'.<\/p> <p>Uses sprintf to append the amount of zeros based on the $threshold parameter and the size of the number. If the number is large enough, then no zeros will be appended.<\/p>",
        "inputs": {
            "ifct": {
                "type": "efct",
                "required": false
            },
            "number": {
                "label": "number",
                "description": "Number to append zeros to if not greater than threshold.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            },
            "threshold": {
                "label": "threshold",
                "description": "Digit places number needs to be to not have zeros added.",
                "type": "int",
                "types": [
                    "int"
                ],
                "default": null,
                "required": true
            }
        },
        "outputs": {
            "ofct": {
                "type": "efct",
                "required": false
            },
            "return": {
                "type": "string",
                "label": "string"
            }
        },
        "return": [
            "string"
        ],
        "return_description": "Adds leading zeros to number if needed.",
        "rank": 0
    }
}